
Final_project_Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cb8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011a  00800060  00002cb8  00002d4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  0080017a  0080017a  00002e66  2**0
                  ALLOC
  3 .stab         00002ebc  00000000  00000000  00002e68  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013e3  00000000  00000000  00005d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00007107  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  00007287  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  00007458  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  00009468  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  0000a5c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000b5cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  0000b76c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  0000ba2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c338  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 eb       	ldi	r30, 0xB8	; 184
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 38       	cpi	r26, 0x8F	; 143
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b5 09 	call	0x136a	; 0x136a <main>
      8a:	0c 94 5a 16 	jmp	0x2cb4	; 0x2cb4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f2 15 	jmp	0x2be4	; 0x2be4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0e 16 	jmp	0x2c1c	; 0x2c1c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fe 15 	jmp	0x2bfc	; 0x2bfc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1a 16 	jmp	0x2c34	; 0x2c34 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fe 15 	jmp	0x2bfc	; 0x2bfc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1a 16 	jmp	0x2c34	; 0x2c34 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f2 15 	jmp	0x2be4	; 0x2be4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0e 16 	jmp	0x2c1c	; 0x2c1c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fe 15 	jmp	0x2bfc	; 0x2bfc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 1a 16 	jmp	0x2c34	; 0x2c34 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 fe 15 	jmp	0x2bfc	; 0x2bfc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 1a 16 	jmp	0x2c34	; 0x2c34 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 fe 15 	jmp	0x2bfc	; 0x2bfc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 1a 16 	jmp	0x2c34	; 0x2c34 <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 17 16 	jmp	0x2c2e	; 0x2c2e <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 02 16 	jmp	0x2c04	; 0x2c04 <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e8 59       	subi	r30, 0x98	; 152
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <DcMotor_Init>:
#include "gpio.h"
#include <avr/io.h>
#include "PWM.h"
#include "DC_motor.h"
void DcMotor_Init(void)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	/* Setting up motor1 o/p pins*/
	GPIO_setupPinDirection(Motor1_PORT_ID, Motor1_INPUT_PIN1, PIN_OUTPUT);
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	60 e0       	ldi	r22, 0x00	; 0
     cac:	41 e0       	ldi	r20, 0x01	; 1
     cae:	0e 94 2a 0b 	call	0x1654	; 0x1654 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(Motor1_PORT_ID, Motor1_INPUT_PIN2, PIN_OUTPUT);
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	61 e0       	ldi	r22, 0x01	; 1
     cb6:	41 e0       	ldi	r20, 0x01	; 1
     cb8:	0e 94 2a 0b 	call	0x1654	; 0x1654 <GPIO_setupPinDirection>

	/* Initially Motor is Stopped*/
	GPIO_writePin(Motor1_PORT_ID,Motor1_INPUT_PIN1,Stop);
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	40 e0       	ldi	r20, 0x00	; 0
     cc2:	0e 94 15 0c 	call	0x182a	; 0x182a <GPIO_writePin>
	GPIO_writePin(Motor1_PORT_ID,Motor1_INPUT_PIN2,Stop);
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	61 e0       	ldi	r22, 0x01	; 1
     cca:	40 e0       	ldi	r20, 0x00	; 0
     ccc:	0e 94 15 0c 	call	0x182a	; 0x182a <GPIO_writePin>

}
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	08 95       	ret

00000cd6 <DcMotor_Rotate>:


void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	00 d0       	rcall	.+0      	; 0xcdc <DcMotor_Rotate+0x6>
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	89 83       	std	Y+1, r24	; 0x01
     ce2:	6a 83       	std	Y+2, r22	; 0x02
	/* change the state of the motor according to input state given */
	GPIO_writePin(Motor1_PORT_ID,Motor1_INPUT_PIN1,(state&0x01));
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	98 2f       	mov	r25, r24
     ce8:	91 70       	andi	r25, 0x01	; 1
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	60 e0       	ldi	r22, 0x00	; 0
     cee:	49 2f       	mov	r20, r25
     cf0:	0e 94 15 0c 	call	0x182a	; 0x182a <GPIO_writePin>
	GPIO_writePin(Motor1_PORT_ID,Motor1_INPUT_PIN2,((state&0x02)>>1));
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	88 2f       	mov	r24, r24
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	82 70       	andi	r24, 0x02	; 2
     cfc:	90 70       	andi	r25, 0x00	; 0
     cfe:	95 95       	asr	r25
     d00:	87 95       	ror	r24
     d02:	98 2f       	mov	r25, r24
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	61 e0       	ldi	r22, 0x01	; 1
     d08:	49 2f       	mov	r20, r25
     d0a:	0e 94 15 0c 	call	0x182a	; 0x182a <GPIO_writePin>

	/* generate duty cycle of speed value (0-->100) to get required motor speed */
	PWM_Timer0_Start(speed);
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	0e 94 8f 06 	call	0xd1e	; 0xd1e <PWM_Timer0_Start>

}
     d14:	0f 90       	pop	r0
     d16:	0f 90       	pop	r0
     d18:	cf 91       	pop	r28
     d1a:	df 91       	pop	r29
     d1c:	08 95       	ret

00000d1e <PWM_Timer0_Start>:
#include <avr/io.h>
#include "PWM.h"
#include "std_types.h"

void PWM_Timer0_Start(uint8 duty_cycle)
	{
     d1e:	0f 93       	push	r16
     d20:	1f 93       	push	r17
     d22:	df 93       	push	r29
     d24:	cf 93       	push	r28
     d26:	0f 92       	push	r0
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
     d2c:	89 83       	std	Y+1, r24	; 0x01

		TCNT0 = 0; //Set Timer Initial value
     d2e:	e2 e5       	ldi	r30, 0x52	; 82
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	10 82       	st	Z, r1

		OCR0  = (float)(duty_cycle*2.55); // Set Compare Value
     d34:	0c e5       	ldi	r16, 0x5C	; 92
     d36:	10 e0       	ldi	r17, 0x00	; 0
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	88 2f       	mov	r24, r24
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	aa 27       	eor	r26, r26
     d40:	97 fd       	sbrc	r25, 7
     d42:	a0 95       	com	r26
     d44:	ba 2f       	mov	r27, r26
     d46:	bc 01       	movw	r22, r24
     d48:	cd 01       	movw	r24, r26
     d4a:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
     d4e:	dc 01       	movw	r26, r24
     d50:	cb 01       	movw	r24, r22
     d52:	bc 01       	movw	r22, r24
     d54:	cd 01       	movw	r24, r26
     d56:	23 e3       	ldi	r18, 0x33	; 51
     d58:	33 e3       	ldi	r19, 0x33	; 51
     d5a:	43 e2       	ldi	r20, 0x23	; 35
     d5c:	50 e4       	ldi	r21, 0x40	; 64
     d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d62:	dc 01       	movw	r26, r24
     d64:	cb 01       	movw	r24, r22
     d66:	bc 01       	movw	r22, r24
     d68:	cd 01       	movw	r24, r26
     d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d6e:	dc 01       	movw	r26, r24
     d70:	cb 01       	movw	r24, r22
     d72:	f8 01       	movw	r30, r16
     d74:	80 83       	st	Z, r24

		DDRB  = DDRB | (1<<PB3); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
     d76:	a7 e3       	ldi	r26, 0x37	; 55
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	e7 e3       	ldi	r30, 0x37	; 55
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	88 60       	ori	r24, 0x08	; 8
     d82:	8c 93       	st	X, r24
		 * 1. Fast PWM mode FOC0=0
		 * 2. Fast PWM Mode WGM01=1 & WGM00=1
		 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
		 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
		 */
		TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01) | (1<<CS00);
     d84:	e3 e5       	ldi	r30, 0x53	; 83
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	8b e6       	ldi	r24, 0x6B	; 107
     d8a:	80 83       	st	Z, r24
	}
     d8c:	0f 90       	pop	r0
     d8e:	cf 91       	pop	r28
     d90:	df 91       	pop	r29
     d92:	1f 91       	pop	r17
     d94:	0f 91       	pop	r16
     d96:	08 95       	ret

00000d98 <__vector_7>:
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
		}
}
#else
ISR(TIMER1_COMPA_vect){
     d98:	1f 92       	push	r1
     d9a:	0f 92       	push	r0
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	0f 92       	push	r0
     da0:	11 24       	eor	r1, r1
     da2:	2f 93       	push	r18
     da4:	3f 93       	push	r19
     da6:	4f 93       	push	r20
     da8:	5f 93       	push	r21
     daa:	6f 93       	push	r22
     dac:	7f 93       	push	r23
     dae:	8f 93       	push	r24
     db0:	9f 93       	push	r25
     db2:	af 93       	push	r26
     db4:	bf 93       	push	r27
     db6:	ef 93       	push	r30
     db8:	ff 93       	push	r31
     dba:	df 93       	push	r29
     dbc:	cf 93       	push	r28
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     dc2:	80 91 7a 01 	lds	r24, 0x017A
     dc6:	90 91 7b 01 	lds	r25, 0x017B
     dca:	00 97       	sbiw	r24, 0x00	; 0
     dcc:	29 f0       	breq	.+10     	; 0xdd8 <__vector_7+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     dce:	e0 91 7a 01 	lds	r30, 0x017A
     dd2:	f0 91 7b 01 	lds	r31, 0x017B
     dd6:	09 95       	icall
		}
}
     dd8:	cf 91       	pop	r28
     dda:	df 91       	pop	r29
     ddc:	ff 91       	pop	r31
     dde:	ef 91       	pop	r30
     de0:	bf 91       	pop	r27
     de2:	af 91       	pop	r26
     de4:	9f 91       	pop	r25
     de6:	8f 91       	pop	r24
     de8:	7f 91       	pop	r23
     dea:	6f 91       	pop	r22
     dec:	5f 91       	pop	r21
     dee:	4f 91       	pop	r20
     df0:	3f 91       	pop	r19
     df2:	2f 91       	pop	r18
     df4:	0f 90       	pop	r0
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	0f 90       	pop	r0
     dfa:	1f 90       	pop	r1
     dfc:	18 95       	reti

00000dfe <Timer1_init>:
#endif
void Timer1_init(const Timer1_ConfigType * Config_Ptr){
     dfe:	df 93       	push	r29
     e00:	cf 93       	push	r28
     e02:	00 d0       	rcall	.+0      	; 0xe04 <Timer1_init+0x6>
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62
     e08:	9a 83       	std	Y+2, r25	; 0x02
     e0a:	89 83       	std	Y+1, r24	; 0x01

		TCNT1=(Config_Ptr->initial_value);
     e0c:	ac e4       	ldi	r26, 0x4C	; 76
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e9 81       	ldd	r30, Y+1	; 0x01
     e12:	fa 81       	ldd	r31, Y+2	; 0x02
     e14:	80 81       	ld	r24, Z
     e16:	91 81       	ldd	r25, Z+1	; 0x01
     e18:	11 96       	adiw	r26, 0x01	; 1
     e1a:	9c 93       	st	X, r25
     e1c:	8e 93       	st	-X, r24
		TCCR1A |= (1<<FOC1A) | (1<<FOC1B);
     e1e:	af e4       	ldi	r26, 0x4F	; 79
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	ef e4       	ldi	r30, 0x4F	; 79
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	8c 60       	ori	r24, 0x0C	; 12
     e2a:	8c 93       	st	X, r24
		if ((Config_Ptr->mode)==1){
     e2c:	e9 81       	ldd	r30, Y+1	; 0x01
     e2e:	fa 81       	ldd	r31, Y+2	; 0x02
     e30:	85 81       	ldd	r24, Z+5	; 0x05
     e32:	81 30       	cpi	r24, 0x01	; 1
     e34:	71 f4       	brne	.+28     	; 0xe52 <Timer1_init+0x54>
			OCR1A=Config_Ptr->compare_value;
     e36:	aa e4       	ldi	r26, 0x4A	; 74
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e9 81       	ldd	r30, Y+1	; 0x01
     e3c:	fa 81       	ldd	r31, Y+2	; 0x02
     e3e:	82 81       	ldd	r24, Z+2	; 0x02
     e40:	93 81       	ldd	r25, Z+3	; 0x03
     e42:	11 96       	adiw	r26, 0x01	; 1
     e44:	9c 93       	st	X, r25
     e46:	8e 93       	st	-X, r24
			TIMSK = (1<<OCIE1A);
     e48:	e9 e5       	ldi	r30, 0x59	; 89
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 e1       	ldi	r24, 0x10	; 16
     e4e:	80 83       	st	Z, r24
     e50:	04 c0       	rjmp	.+8      	; 0xe5a <Timer1_init+0x5c>
		}
		else{
			TIMSK = (1<<TOIE1);
     e52:	e9 e5       	ldi	r30, 0x59	; 89
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	80 83       	st	Z, r24
		}
		TCCR1B = ( TCCR1B & 0xF8 ) | ( Config_Ptr->prescaler );
     e5a:	ae e4       	ldi	r26, 0x4E	; 78
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	ee e4       	ldi	r30, 0x4E	; 78
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	98 2f       	mov	r25, r24
     e66:	98 7f       	andi	r25, 0xF8	; 248
     e68:	e9 81       	ldd	r30, Y+1	; 0x01
     e6a:	fa 81       	ldd	r31, Y+2	; 0x02
     e6c:	84 81       	ldd	r24, Z+4	; 0x04
     e6e:	89 2b       	or	r24, r25
     e70:	8c 93       	st	X, r24
		TCCR1B = ( TCCR1B & 0xF7 ) | ( (Config_Ptr->mode)<<3 );
     e72:	ae e4       	ldi	r26, 0x4E	; 78
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	ee e4       	ldi	r30, 0x4E	; 78
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	28 2f       	mov	r18, r24
     e7e:	27 7f       	andi	r18, 0xF7	; 247
     e80:	e9 81       	ldd	r30, Y+1	; 0x01
     e82:	fa 81       	ldd	r31, Y+2	; 0x02
     e84:	85 81       	ldd	r24, Z+5	; 0x05
     e86:	88 2f       	mov	r24, r24
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	88 0f       	add	r24, r24
     e8c:	99 1f       	adc	r25, r25
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	82 2b       	or	r24, r18
     e98:	8c 93       	st	X, r24

}
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	cf 91       	pop	r28
     ea0:	df 91       	pop	r29
     ea2:	08 95       	ret

00000ea4 <Timer1_deInit>:

 void Timer1_deInit(void){
     ea4:	df 93       	push	r29
     ea6:	cf 93       	push	r28
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
	 /* Clear All Timer1 Registers */
	 	TCCR1A = 0;
     eac:	ef e4       	ldi	r30, 0x4F	; 79
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	10 82       	st	Z, r1
	 	TCCR1B = 0;
     eb2:	ee e4       	ldi	r30, 0x4E	; 78
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	10 82       	st	Z, r1
	 	TCNT1 = 0;
     eb8:	ec e4       	ldi	r30, 0x4C	; 76
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	11 82       	std	Z+1, r1	; 0x01
     ebe:	10 82       	st	Z, r1
	 	OCR1A=0;
     ec0:	ea e4       	ldi	r30, 0x4A	; 74
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	11 82       	std	Z+1, r1	; 0x01
     ec6:	10 82       	st	Z, r1
	 	TIMSK &= ~(1<<OCIE1A);
     ec8:	a9 e5       	ldi	r26, 0x59	; 89
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e9 e5       	ldi	r30, 0x59	; 89
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	8f 7e       	andi	r24, 0xEF	; 239
     ed4:	8c 93       	st	X, r24
	 	TIMSK &= ~(1<<TOIE1);
     ed6:	a9 e5       	ldi	r26, 0x59	; 89
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e9 e5       	ldi	r30, 0x59	; 89
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	8b 7f       	andi	r24, 0xFB	; 251
     ee2:	8c 93       	st	X, r24
 }
     ee4:	cf 91       	pop	r28
     ee6:	df 91       	pop	r29
     ee8:	08 95       	ret

00000eea <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void)){
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <Timer1_setCallBack+0x6>
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
     ef4:	9a 83       	std	Y+2, r25	; 0x02
     ef6:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
		g_callBackPtr = a_ptr;
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	9a 81       	ldd	r25, Y+2	; 0x02
     efc:	90 93 7b 01 	sts	0x017B, r25
     f00:	80 93 7a 01 	sts	0x017A, r24
}
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	08 95       	ret

00000f0e <Buzzer_init>:
 */
#include "BUZZER.h"
#include "common_macros.h" /* For GET_BIT Macro */
#include "gpio.h"

void Buzzer_init(){
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
     f16:	83 e0       	ldi	r24, 0x03	; 3
     f18:	62 e0       	ldi	r22, 0x02	; 2
     f1a:	41 e0       	ldi	r20, 0x01	; 1
     f1c:	0e 94 2a 0b 	call	0x1654	; 0x1654 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
     f20:	83 e0       	ldi	r24, 0x03	; 3
     f22:	62 e0       	ldi	r22, 0x02	; 2
     f24:	40 e0       	ldi	r20, 0x00	; 0
     f26:	0e 94 15 0c 	call	0x182a	; 0x182a <GPIO_writePin>
}
     f2a:	cf 91       	pop	r28
     f2c:	df 91       	pop	r29
     f2e:	08 95       	ret

00000f30 <Buzzer_on>:
void Buzzer_on(void){
     f30:	df 93       	push	r29
     f32:	cf 93       	push	r28
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
     f38:	83 e0       	ldi	r24, 0x03	; 3
     f3a:	62 e0       	ldi	r22, 0x02	; 2
     f3c:	41 e0       	ldi	r20, 0x01	; 1
     f3e:	0e 94 15 0c 	call	0x182a	; 0x182a <GPIO_writePin>
}
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <Buzzer_off>:

void Buzzer_off(void){
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
     f50:	83 e0       	ldi	r24, 0x03	; 3
     f52:	62 e0       	ldi	r22, 0x02	; 2
     f54:	40 e0       	ldi	r20, 0x00	; 0
     f56:	0e 94 15 0c 	call	0x182a	; 0x182a <GPIO_writePin>
}
     f5a:	cf 91       	pop	r28
     f5c:	df 91       	pop	r29
     f5e:	08 95       	ret

00000f60 <timer_count>:
 success to now if the passwords are matched --> success =1 in this case
 k to count the number of wrong tries
 eeprom array to read from eeprom before check
 */
// timer call back function
void timer_count (){
     f60:	df 93       	push	r29
     f62:	cf 93       	push	r28
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
	tick++;
     f68:	80 91 7c 01 	lds	r24, 0x017C
     f6c:	8f 5f       	subi	r24, 0xFF	; 255
     f6e:	80 93 7c 01 	sts	0x017C, r24

}
     f72:	cf 91       	pop	r28
     f74:	df 91       	pop	r29
     f76:	08 95       	ret

00000f78 <check_current_pass>:
/*check current pass function
 recieve password and compare it with the one in eeprom
 */
void check_current_pass(char *current_pass1){
     f78:	0f 93       	push	r16
     f7a:	1f 93       	push	r17
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	00 d0       	rcall	.+0      	; 0xf82 <check_current_pass+0xa>
     f82:	00 d0       	rcall	.+0      	; 0xf84 <check_current_pass+0xc>
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	9c 83       	std	Y+4, r25	; 0x04
     f8a:	8b 83       	std	Y+3, r24	; 0x03
	LCD_clearScreen();
     f8c:	0e 94 92 13 	call	0x2724	; 0x2724 <LCD_clearScreen>
	char i=0,j=0;
     f90:	1a 82       	std	Y+2, r1	; 0x02
     f92:	19 82       	std	Y+1, r1	; 0x01
	succes=0;
     f94:	10 92 7d 01 	sts	0x017D, r1
	for (i=0 ; i<5 ; i++){ // loop to recieve 5 bytes from HMI_ECU
     f98:	1a 82       	std	Y+2, r1	; 0x02
     f9a:	0f c0       	rjmp	.+30     	; 0xfba <check_current_pass+0x42>
		//UART_sendByte(MC2_READY);
		current_pass1[i]=UART_recieveByte(); //recieve in current pass array
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	9c 81       	ldd	r25, Y+4	; 0x04
     fa6:	8c 01       	movw	r16, r24
     fa8:	02 0f       	add	r16, r18
     faa:	13 1f       	adc	r17, r19
     fac:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <UART_recieveByte>
     fb0:	f8 01       	movw	r30, r16
     fb2:	80 83       	st	Z, r24
 */
void check_current_pass(char *current_pass1){
	LCD_clearScreen();
	char i=0,j=0;
	succes=0;
	for (i=0 ; i<5 ; i++){ // loop to recieve 5 bytes from HMI_ECU
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	8f 5f       	subi	r24, 0xFF	; 255
     fb8:	8a 83       	std	Y+2, r24	; 0x02
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	85 30       	cpi	r24, 0x05	; 5
     fbe:	70 f3       	brcs	.-36     	; 0xf9c <check_current_pass+0x24>
		//EEPROM_readByte(0x0311+i, eeprom[i]);

		//_delay_ms(100);
//LCD_intgerToString(eeprom[i]);
	//}
	for(i=0 ; i<5 ; i++){ //loop to check each byte if equal or not
     fc0:	1a 82       	std	Y+2, r1	; 0x02
     fc2:	17 c0       	rjmp	.+46     	; 0xff2 <check_current_pass+0x7a>
		if( current_pass1[i]!=eeprom[i]){
     fc4:	8a 81       	ldd	r24, Y+2	; 0x02
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	9c 81       	ldd	r25, Y+4	; 0x04
     fce:	fc 01       	movw	r30, r24
     fd0:	e2 0f       	add	r30, r18
     fd2:	f3 1f       	adc	r31, r19
     fd4:	20 81       	ld	r18, Z
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	88 2f       	mov	r24, r24
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	fc 01       	movw	r30, r24
     fde:	ec 57       	subi	r30, 0x7C	; 124
     fe0:	fe 4f       	sbci	r31, 0xFE	; 254
     fe2:	80 81       	ld	r24, Z
     fe4:	28 17       	cp	r18, r24
     fe6:	11 f0       	breq	.+4      	; 0xfec <check_current_pass+0x74>

			j=1; // j=1 if wrong password
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	89 83       	std	Y+1, r24	; 0x01
		//EEPROM_readByte(0x0311+i, eeprom[i]);

		//_delay_ms(100);
//LCD_intgerToString(eeprom[i]);
	//}
	for(i=0 ; i<5 ; i++){ //loop to check each byte if equal or not
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	8f 5f       	subi	r24, 0xFF	; 255
     ff0:	8a 83       	std	Y+2, r24	; 0x02
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	85 30       	cpi	r24, 0x05	; 5
     ff6:	30 f3       	brcs	.-52     	; 0xfc4 <check_current_pass+0x4c>
		if( current_pass1[i]!=eeprom[i]){

			j=1; // j=1 if wrong password
		}
	}
	if(j==0){ // j=1 if right password
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	88 23       	and	r24, r24
     ffc:	39 f4       	brne	.+14     	; 0x100c <check_current_pass+0x94>
		succes=1; //to break from the do..while loop
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	80 93 7d 01 	sts	0x017D, r24
		UART_sendByte(Matched); //send that the password is right to HMI
    1004:	81 e1       	ldi	r24, 0x11	; 17
    1006:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <UART_sendByte>
    100a:	06 c0       	rjmp	.+12     	; 0x1018 <check_current_pass+0xa0>
	//	LCD_moveCursor(0, 0);
		//LCD_displayString("Matched"); //display this statement in controller lcd
		//_delay_ms(1000);
		//LCD_clearScreen();
	}
	else if(j==1){
    100c:	89 81       	ldd	r24, Y+1	; 0x01
    100e:	81 30       	cpi	r24, 0x01	; 1
    1010:	19 f4       	brne	.+6      	; 0x1018 <check_current_pass+0xa0>
		//while(UART_recieveByte() != MC2_READY){}

		UART_sendByte(NotMatched); //send that the password isn't right to HMI
    1012:	8f ef       	ldi	r24, 0xFF	; 255
    1014:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <UART_sendByte>
		//LCD_moveCursor(0, 0);
		//LCD_displayString("Not Matched");  //display this statement in controller lcd
		//_delay_ms(1000);
		//LCD_clearScreen();
	}
	while(UART_recieveByte()!= contin );
    1018:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <UART_recieveByte>
    101c:	8d 30       	cpi	r24, 0x0D	; 13
    101e:	e1 f7       	brne	.-8      	; 0x1018 <check_current_pass+0xa0>
	return ;
}
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	1f 91       	pop	r17
    102e:	0f 91       	pop	r16
    1030:	08 95       	ret

00001032 <check_new_pass>:
/*
 check new password function
 recieve two password and check if matched and send the result to HMI
 */
void check_new_pass(char *pass1 , char *pass2){
    1032:	0f 93       	push	r16
    1034:	1f 93       	push	r17
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	a2 97       	sbiw	r28, 0x22	; 34
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	f8 94       	cli
    1044:	de bf       	out	0x3e, r29	; 62
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	cd bf       	out	0x3d, r28	; 61
    104a:	98 a3       	std	Y+32, r25	; 0x20
    104c:	8f 8f       	std	Y+31, r24	; 0x1f
    104e:	7a a3       	std	Y+34, r23	; 0x22
    1050:	69 a3       	std	Y+33, r22	; 0x21
	char i=0,j=0;
    1052:	1e 8e       	std	Y+30, r1	; 0x1e
    1054:	1d 8e       	std	Y+29, r1	; 0x1d
	succes=0;
    1056:	10 92 7d 01 	sts	0x017D, r1
	for (i=0 ; i<5 ; i++){ //loop to recieve the first password byte by byte
    105a:	1e 8e       	std	Y+30, r1	; 0x1e
    105c:	0f c0       	rjmp	.+30     	; 0x107c <check_new_pass+0x4a>

		pass1[i]=UART_recieveByte(); //store in pass1 array
    105e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1066:	98 a1       	ldd	r25, Y+32	; 0x20
    1068:	8c 01       	movw	r16, r24
    106a:	02 0f       	add	r16, r18
    106c:	13 1f       	adc	r17, r19
    106e:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <UART_recieveByte>
    1072:	f8 01       	movw	r30, r16
    1074:	80 83       	st	Z, r24
 recieve two password and check if matched and send the result to HMI
 */
void check_new_pass(char *pass1 , char *pass2){
	char i=0,j=0;
	succes=0;
	for (i=0 ; i<5 ; i++){ //loop to recieve the first password byte by byte
    1076:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1078:	8f 5f       	subi	r24, 0xFF	; 255
    107a:	8e 8f       	std	Y+30, r24	; 0x1e
    107c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    107e:	85 30       	cpi	r24, 0x05	; 5
    1080:	70 f3       	brcs	.-36     	; 0x105e <check_new_pass+0x2c>
		//LCD_displayCharacter('x');
		//LCD_intgerToString(pass1[i]);//display the first password in controller lcd

	}

	for (i=0 ; i<5 ; i++){ //loop to recieve the sec password byte by byte
    1082:	1e 8e       	std	Y+30, r1	; 0x1e
    1084:	13 c0       	rjmp	.+38     	; 0x10ac <check_new_pass+0x7a>

		LCD_moveCursor(1,i);
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	6e 8d       	ldd	r22, Y+30	; 0x1e
    108a:	0e 94 14 13 	call	0x2628	; 0x2628 <LCD_moveCursor>
		pass2[i]=UART_recieveByte(); //store in pass2 array
    108e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	89 a1       	ldd	r24, Y+33	; 0x21
    1096:	9a a1       	ldd	r25, Y+34	; 0x22
    1098:	8c 01       	movw	r16, r24
    109a:	02 0f       	add	r16, r18
    109c:	13 1f       	adc	r17, r19
    109e:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <UART_recieveByte>
    10a2:	f8 01       	movw	r30, r16
    10a4:	80 83       	st	Z, r24
		//LCD_displayCharacter('x');
		//LCD_intgerToString(pass1[i]);//display the first password in controller lcd

	}

	for (i=0 ; i<5 ; i++){ //loop to recieve the sec password byte by byte
    10a6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10a8:	8f 5f       	subi	r24, 0xFF	; 255
    10aa:	8e 8f       	std	Y+30, r24	; 0x1e
    10ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10ae:	85 30       	cpi	r24, 0x05	; 5
    10b0:	50 f3       	brcs	.-44     	; 0x1086 <check_new_pass+0x54>
		LCD_moveCursor(1,i);
		pass2[i]=UART_recieveByte(); //store in pass2 array
		//LCD_intgerToString(pass2[i]);//display the sec password in controller lcd

	}
	for(i=0 ; i<5 ; i++){ //loop to check the two passwords byte by byte
    10b2:	1e 8e       	std	Y+30, r1	; 0x1e
    10b4:	19 c0       	rjmp	.+50     	; 0x10e8 <check_new_pass+0xb6>
		if( pass1[i]!=pass2[i]){
    10b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10be:	98 a1       	ldd	r25, Y+32	; 0x20
    10c0:	fc 01       	movw	r30, r24
    10c2:	e2 0f       	add	r30, r18
    10c4:	f3 1f       	adc	r31, r19
    10c6:	40 81       	ld	r20, Z
    10c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	89 a1       	ldd	r24, Y+33	; 0x21
    10d0:	9a a1       	ldd	r25, Y+34	; 0x22
    10d2:	fc 01       	movw	r30, r24
    10d4:	e2 0f       	add	r30, r18
    10d6:	f3 1f       	adc	r31, r19
    10d8:	80 81       	ld	r24, Z
    10da:	48 17       	cp	r20, r24
    10dc:	11 f0       	breq	.+4      	; 0x10e2 <check_new_pass+0xb0>
			j=1; // j=1 if not matched
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	8d 8f       	std	Y+29, r24	; 0x1d
		LCD_moveCursor(1,i);
		pass2[i]=UART_recieveByte(); //store in pass2 array
		//LCD_intgerToString(pass2[i]);//display the sec password in controller lcd

	}
	for(i=0 ; i<5 ; i++){ //loop to check the two passwords byte by byte
    10e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10e4:	8f 5f       	subi	r24, 0xFF	; 255
    10e6:	8e 8f       	std	Y+30, r24	; 0x1e
    10e8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10ea:	85 30       	cpi	r24, 0x05	; 5
    10ec:	20 f3       	brcs	.-56     	; 0x10b6 <check_new_pass+0x84>
		if( pass1[i]!=pass2[i]){
			j=1; // j=1 if not matched
		}
	}
	if(j==0){ //if matched
    10ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10f0:	88 23       	and	r24, r24
    10f2:	09 f0       	breq	.+2      	; 0x10f6 <check_new_pass+0xc4>
    10f4:	1d c1       	rjmp	.+570    	; 0x1330 <check_new_pass+0x2fe>
		//while(UART_recieveByte() != MC2_READY){}
		succes=1;
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	80 93 7d 01 	sts	0x017D, r24
		UART_sendByte(Matched); //send that the two passwords are matched to HMI
    10fc:	81 e1       	ldi	r24, 0x11	; 17
    10fe:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <UART_sendByte>
		//UART_sendString("Matched!#");
		LCD_clearScreen();
    1102:	0e 94 92 13 	call	0x2724	; 0x2724 <LCD_clearScreen>
		LCD_moveCursor(0, 0);
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	60 e0       	ldi	r22, 0x00	; 0
    110a:	0e 94 14 13 	call	0x2628	; 0x2628 <LCD_moveCursor>
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	aa e7       	ldi	r26, 0x7A	; 122
    1114:	b4 e4       	ldi	r27, 0x44	; 68
    1116:	89 8f       	std	Y+25, r24	; 0x19
    1118:	9a 8f       	std	Y+26, r25	; 0x1a
    111a:	ab 8f       	std	Y+27, r26	; 0x1b
    111c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    111e:	69 8d       	ldd	r22, Y+25	; 0x19
    1120:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1122:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1124:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	4a ef       	ldi	r20, 0xFA	; 250
    112c:	54 e4       	ldi	r21, 0x44	; 68
    112e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1132:	dc 01       	movw	r26, r24
    1134:	cb 01       	movw	r24, r22
    1136:	8d 8b       	std	Y+21, r24	; 0x15
    1138:	9e 8b       	std	Y+22, r25	; 0x16
    113a:	af 8b       	std	Y+23, r26	; 0x17
    113c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    113e:	6d 89       	ldd	r22, Y+21	; 0x15
    1140:	7e 89       	ldd	r23, Y+22	; 0x16
    1142:	8f 89       	ldd	r24, Y+23	; 0x17
    1144:	98 8d       	ldd	r25, Y+24	; 0x18
    1146:	20 e0       	ldi	r18, 0x00	; 0
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	40 e8       	ldi	r20, 0x80	; 128
    114c:	5f e3       	ldi	r21, 0x3F	; 63
    114e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1152:	88 23       	and	r24, r24
    1154:	2c f4       	brge	.+10     	; 0x1160 <check_new_pass+0x12e>
		__ticks = 1;
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	9c 8b       	std	Y+20, r25	; 0x14
    115c:	8b 8b       	std	Y+19, r24	; 0x13
    115e:	3f c0       	rjmp	.+126    	; 0x11de <check_new_pass+0x1ac>
	else if (__tmp > 65535)
    1160:	6d 89       	ldd	r22, Y+21	; 0x15
    1162:	7e 89       	ldd	r23, Y+22	; 0x16
    1164:	8f 89       	ldd	r24, Y+23	; 0x17
    1166:	98 8d       	ldd	r25, Y+24	; 0x18
    1168:	20 e0       	ldi	r18, 0x00	; 0
    116a:	3f ef       	ldi	r19, 0xFF	; 255
    116c:	4f e7       	ldi	r20, 0x7F	; 127
    116e:	57 e4       	ldi	r21, 0x47	; 71
    1170:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1174:	18 16       	cp	r1, r24
    1176:	4c f5       	brge	.+82     	; 0x11ca <check_new_pass+0x198>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1178:	69 8d       	ldd	r22, Y+25	; 0x19
    117a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    117c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    117e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	40 e2       	ldi	r20, 0x20	; 32
    1186:	51 e4       	ldi	r21, 0x41	; 65
    1188:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    118c:	dc 01       	movw	r26, r24
    118e:	cb 01       	movw	r24, r22
    1190:	bc 01       	movw	r22, r24
    1192:	cd 01       	movw	r24, r26
    1194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1198:	dc 01       	movw	r26, r24
    119a:	cb 01       	movw	r24, r22
    119c:	9c 8b       	std	Y+20, r25	; 0x14
    119e:	8b 8b       	std	Y+19, r24	; 0x13
    11a0:	0f c0       	rjmp	.+30     	; 0x11c0 <check_new_pass+0x18e>
    11a2:	88 ec       	ldi	r24, 0xC8	; 200
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	9a 8b       	std	Y+18, r25	; 0x12
    11a8:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11aa:	89 89       	ldd	r24, Y+17	; 0x11
    11ac:	9a 89       	ldd	r25, Y+18	; 0x12
    11ae:	01 97       	sbiw	r24, 0x01	; 1
    11b0:	f1 f7       	brne	.-4      	; 0x11ae <check_new_pass+0x17c>
    11b2:	9a 8b       	std	Y+18, r25	; 0x12
    11b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11b6:	8b 89       	ldd	r24, Y+19	; 0x13
    11b8:	9c 89       	ldd	r25, Y+20	; 0x14
    11ba:	01 97       	sbiw	r24, 0x01	; 1
    11bc:	9c 8b       	std	Y+20, r25	; 0x14
    11be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11c0:	8b 89       	ldd	r24, Y+19	; 0x13
    11c2:	9c 89       	ldd	r25, Y+20	; 0x14
    11c4:	00 97       	sbiw	r24, 0x00	; 0
    11c6:	69 f7       	brne	.-38     	; 0x11a2 <check_new_pass+0x170>
    11c8:	14 c0       	rjmp	.+40     	; 0x11f2 <check_new_pass+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ca:	6d 89       	ldd	r22, Y+21	; 0x15
    11cc:	7e 89       	ldd	r23, Y+22	; 0x16
    11ce:	8f 89       	ldd	r24, Y+23	; 0x17
    11d0:	98 8d       	ldd	r25, Y+24	; 0x18
    11d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d6:	dc 01       	movw	r26, r24
    11d8:	cb 01       	movw	r24, r22
    11da:	9c 8b       	std	Y+20, r25	; 0x14
    11dc:	8b 8b       	std	Y+19, r24	; 0x13
    11de:	8b 89       	ldd	r24, Y+19	; 0x13
    11e0:	9c 89       	ldd	r25, Y+20	; 0x14
    11e2:	98 8b       	std	Y+16, r25	; 0x10
    11e4:	8f 87       	std	Y+15, r24	; 0x0f
    11e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    11e8:	98 89       	ldd	r25, Y+16	; 0x10
    11ea:	01 97       	sbiw	r24, 0x01	; 1
    11ec:	f1 f7       	brne	.-4      	; 0x11ea <check_new_pass+0x1b8>
    11ee:	98 8b       	std	Y+16, r25	; 0x10
    11f0:	8f 87       	std	Y+15, r24	; 0x0f
		//LCD_displayString("Matched"); //display matched in controller lcd
		_delay_ms(1000);
//LCD_clearScreen();
//LCD_intgerToString(5);
		for (i=0 ; i<5 ; i++){
    11f2:	1e 8e       	std	Y+30, r1	; 0x1e
    11f4:	98 c0       	rjmp	.+304    	; 0x1326 <check_new_pass+0x2f4>
			EEPROM_writeByte(0x0311+i ,pass2[i]); //store the new pass in eeprom
    11f6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11f8:	88 2f       	mov	r24, r24
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	8f 5e       	subi	r24, 0xEF	; 239
    11fe:	9c 4f       	sbci	r25, 0xFC	; 252
    1200:	ac 01       	movw	r20, r24
    1202:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	89 a1       	ldd	r24, Y+33	; 0x21
    120a:	9a a1       	ldd	r25, Y+34	; 0x22
    120c:	fc 01       	movw	r30, r24
    120e:	e2 0f       	add	r30, r18
    1210:	f3 1f       	adc	r31, r19
    1212:	20 81       	ld	r18, Z
    1214:	ca 01       	movw	r24, r20
    1216:	62 2f       	mov	r22, r18
    1218:	0e 94 89 0a 	call	0x1512	; 0x1512 <EEPROM_writeByte>
			eeprom[i]=pass2[i];
    121c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    121e:	48 2f       	mov	r20, r24
    1220:	50 e0       	ldi	r21, 0x00	; 0
    1222:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	89 a1       	ldd	r24, Y+33	; 0x21
    122a:	9a a1       	ldd	r25, Y+34	; 0x22
    122c:	fc 01       	movw	r30, r24
    122e:	e2 0f       	add	r30, r18
    1230:	f3 1f       	adc	r31, r19
    1232:	80 81       	ld	r24, Z
    1234:	fa 01       	movw	r30, r20
    1236:	ec 57       	subi	r30, 0x7C	; 124
    1238:	fe 4f       	sbci	r31, 0xFE	; 254
    123a:	80 83       	st	Z, r24
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	a8 ec       	ldi	r26, 0xC8	; 200
    1242:	b2 e4       	ldi	r27, 0x42	; 66
    1244:	8b 87       	std	Y+11, r24	; 0x0b
    1246:	9c 87       	std	Y+12, r25	; 0x0c
    1248:	ad 87       	std	Y+13, r26	; 0x0d
    124a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    124c:	6b 85       	ldd	r22, Y+11	; 0x0b
    124e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1250:	8d 85       	ldd	r24, Y+13	; 0x0d
    1252:	9e 85       	ldd	r25, Y+14	; 0x0e
    1254:	20 e0       	ldi	r18, 0x00	; 0
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	4a ef       	ldi	r20, 0xFA	; 250
    125a:	54 e4       	ldi	r21, 0x44	; 68
    125c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1260:	dc 01       	movw	r26, r24
    1262:	cb 01       	movw	r24, r22
    1264:	8f 83       	std	Y+7, r24	; 0x07
    1266:	98 87       	std	Y+8, r25	; 0x08
    1268:	a9 87       	std	Y+9, r26	; 0x09
    126a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    126c:	6f 81       	ldd	r22, Y+7	; 0x07
    126e:	78 85       	ldd	r23, Y+8	; 0x08
    1270:	89 85       	ldd	r24, Y+9	; 0x09
    1272:	9a 85       	ldd	r25, Y+10	; 0x0a
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	40 e8       	ldi	r20, 0x80	; 128
    127a:	5f e3       	ldi	r21, 0x3F	; 63
    127c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1280:	88 23       	and	r24, r24
    1282:	2c f4       	brge	.+10     	; 0x128e <check_new_pass+0x25c>
		__ticks = 1;
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	9e 83       	std	Y+6, r25	; 0x06
    128a:	8d 83       	std	Y+5, r24	; 0x05
    128c:	3f c0       	rjmp	.+126    	; 0x130c <check_new_pass+0x2da>
	else if (__tmp > 65535)
    128e:	6f 81       	ldd	r22, Y+7	; 0x07
    1290:	78 85       	ldd	r23, Y+8	; 0x08
    1292:	89 85       	ldd	r24, Y+9	; 0x09
    1294:	9a 85       	ldd	r25, Y+10	; 0x0a
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	3f ef       	ldi	r19, 0xFF	; 255
    129a:	4f e7       	ldi	r20, 0x7F	; 127
    129c:	57 e4       	ldi	r21, 0x47	; 71
    129e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12a2:	18 16       	cp	r1, r24
    12a4:	4c f5       	brge	.+82     	; 0x12f8 <check_new_pass+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    12a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    12aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	40 e2       	ldi	r20, 0x20	; 32
    12b4:	51 e4       	ldi	r21, 0x41	; 65
    12b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ba:	dc 01       	movw	r26, r24
    12bc:	cb 01       	movw	r24, r22
    12be:	bc 01       	movw	r22, r24
    12c0:	cd 01       	movw	r24, r26
    12c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12c6:	dc 01       	movw	r26, r24
    12c8:	cb 01       	movw	r24, r22
    12ca:	9e 83       	std	Y+6, r25	; 0x06
    12cc:	8d 83       	std	Y+5, r24	; 0x05
    12ce:	0f c0       	rjmp	.+30     	; 0x12ee <check_new_pass+0x2bc>
    12d0:	88 ec       	ldi	r24, 0xC8	; 200
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	9c 83       	std	Y+4, r25	; 0x04
    12d6:	8b 83       	std	Y+3, r24	; 0x03
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	9c 81       	ldd	r25, Y+4	; 0x04
    12dc:	01 97       	sbiw	r24, 0x01	; 1
    12de:	f1 f7       	brne	.-4      	; 0x12dc <check_new_pass+0x2aa>
    12e0:	9c 83       	std	Y+4, r25	; 0x04
    12e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12e4:	8d 81       	ldd	r24, Y+5	; 0x05
    12e6:	9e 81       	ldd	r25, Y+6	; 0x06
    12e8:	01 97       	sbiw	r24, 0x01	; 1
    12ea:	9e 83       	std	Y+6, r25	; 0x06
    12ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ee:	8d 81       	ldd	r24, Y+5	; 0x05
    12f0:	9e 81       	ldd	r25, Y+6	; 0x06
    12f2:	00 97       	sbiw	r24, 0x00	; 0
    12f4:	69 f7       	brne	.-38     	; 0x12d0 <check_new_pass+0x29e>
    12f6:	14 c0       	rjmp	.+40     	; 0x1320 <check_new_pass+0x2ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12f8:	6f 81       	ldd	r22, Y+7	; 0x07
    12fa:	78 85       	ldd	r23, Y+8	; 0x08
    12fc:	89 85       	ldd	r24, Y+9	; 0x09
    12fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1300:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1304:	dc 01       	movw	r26, r24
    1306:	cb 01       	movw	r24, r22
    1308:	9e 83       	std	Y+6, r25	; 0x06
    130a:	8d 83       	std	Y+5, r24	; 0x05
    130c:	8d 81       	ldd	r24, Y+5	; 0x05
    130e:	9e 81       	ldd	r25, Y+6	; 0x06
    1310:	9a 83       	std	Y+2, r25	; 0x02
    1312:	89 83       	std	Y+1, r24	; 0x01
    1314:	89 81       	ldd	r24, Y+1	; 0x01
    1316:	9a 81       	ldd	r25, Y+2	; 0x02
    1318:	01 97       	sbiw	r24, 0x01	; 1
    131a:	f1 f7       	brne	.-4      	; 0x1318 <check_new_pass+0x2e6>
    131c:	9a 83       	std	Y+2, r25	; 0x02
    131e:	89 83       	std	Y+1, r24	; 0x01
		LCD_moveCursor(0, 0);
		//LCD_displayString("Matched"); //display matched in controller lcd
		_delay_ms(1000);
//LCD_clearScreen();
//LCD_intgerToString(5);
		for (i=0 ; i<5 ; i++){
    1320:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1322:	8f 5f       	subi	r24, 0xFF	; 255
    1324:	8e 8f       	std	Y+30, r24	; 0x1e
    1326:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1328:	85 30       	cpi	r24, 0x05	; 5
    132a:	08 f4       	brcc	.+2      	; 0x132e <check_new_pass+0x2fc>
    132c:	64 cf       	rjmp	.-312    	; 0x11f6 <check_new_pass+0x1c4>
    132e:	0c c0       	rjmp	.+24     	; 0x1348 <check_new_pass+0x316>
			eeprom[i]=pass2[i];
			//LCD_intgerToString(pass2[i]);
			_delay_ms(100);
		}
	}
	else if(j==1){
    1330:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1332:	81 30       	cpi	r24, 0x01	; 1
    1334:	49 f4       	brne	.+18     	; 0x1348 <check_new_pass+0x316>
		UART_sendByte(NotMatched);//send that the two passwords are not matched to HMI
    1336:	8f ef       	ldi	r24, 0xFF	; 255
    1338:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <UART_sendByte>
		LCD_clearScreen();
    133c:	0e 94 92 13 	call	0x2724	; 0x2724 <LCD_clearScreen>
		LCD_moveCursor(0, 0);
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	60 e0       	ldi	r22, 0x00	; 0
    1344:	0e 94 14 13 	call	0x2628	; 0x2628 <LCD_moveCursor>
		//LCD_displayString("NOT Matched"); //display not matched in controller lcd
		//_delay_ms(1000);

	}
	while(UART_recieveByte()!= contin ); //polling until user press enter
    1348:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <UART_recieveByte>
    134c:	8d 30       	cpi	r24, 0x0D	; 13
    134e:	e1 f7       	brne	.-8      	; 0x1348 <check_new_pass+0x316>
	LCD_clearScreen();
    1350:	0e 94 92 13 	call	0x2724	; 0x2724 <LCD_clearScreen>
	return ;
}
    1354:	a2 96       	adiw	r28, 0x22	; 34
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	f8 94       	cli
    135a:	de bf       	out	0x3e, r29	; 62
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	cd bf       	out	0x3d, r28	; 61
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	1f 91       	pop	r17
    1366:	0f 91       	pop	r16
    1368:	08 95       	ret

0000136a <main>:
int main(){
    136a:	df 93       	push	r29
    136c:	cf 93       	push	r28
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	2c 97       	sbiw	r28, 0x0c	; 12
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	f8 94       	cli
    1378:	de bf       	out	0x3e, r29	; 62
    137a:	0f be       	out	0x3f, r0	; 63
    137c:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1<<7); //enable I bit
    137e:	af e5       	ldi	r26, 0x5F	; 95
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	ef e5       	ldi	r30, 0x5F	; 95
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	80 68       	ori	r24, 0x80	; 128
    138a:	8c 93       	st	X, r24
	TWI_init(&CONFIG); //initialization of the twi
    138c:	8e e6       	ldi	r24, 0x6E	; 110
    138e:	91 e0       	ldi	r25, 0x01	; 1
    1390:	0e 94 9c 13 	call	0x2738	; 0x2738 <TWI_init>
	LCD_init();//initialization of the lcd
    1394:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <LCD_init>
	 1- send 8 bits data
	 2- using even parity error detector
	 3- stop bit is one bit only
	 4- baud rate = 9600
	 */
	UART_ConfigType Config = {eight_bits,even_parity,one_bit,9600};
    1398:	ce 01       	movw	r24, r28
    139a:	01 96       	adiw	r24, 0x01	; 1
    139c:	99 87       	std	Y+9, r25	; 0x09
    139e:	88 87       	std	Y+8, r24	; 0x08
    13a0:	e3 e7       	ldi	r30, 0x73	; 115
    13a2:	f1 e0       	ldi	r31, 0x01	; 1
    13a4:	fb 87       	std	Y+11, r31	; 0x0b
    13a6:	ea 87       	std	Y+10, r30	; 0x0a
    13a8:	f7 e0       	ldi	r31, 0x07	; 7
    13aa:	fc 87       	std	Y+12, r31	; 0x0c
    13ac:	ea 85       	ldd	r30, Y+10	; 0x0a
    13ae:	fb 85       	ldd	r31, Y+11	; 0x0b
    13b0:	00 80       	ld	r0, Z
    13b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    13b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    13b6:	01 96       	adiw	r24, 0x01	; 1
    13b8:	9b 87       	std	Y+11, r25	; 0x0b
    13ba:	8a 87       	std	Y+10, r24	; 0x0a
    13bc:	e8 85       	ldd	r30, Y+8	; 0x08
    13be:	f9 85       	ldd	r31, Y+9	; 0x09
    13c0:	00 82       	st	Z, r0
    13c2:	88 85       	ldd	r24, Y+8	; 0x08
    13c4:	99 85       	ldd	r25, Y+9	; 0x09
    13c6:	01 96       	adiw	r24, 0x01	; 1
    13c8:	99 87       	std	Y+9, r25	; 0x09
    13ca:	88 87       	std	Y+8, r24	; 0x08
    13cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    13ce:	91 50       	subi	r25, 0x01	; 1
    13d0:	9c 87       	std	Y+12, r25	; 0x0c
    13d2:	ec 85       	ldd	r30, Y+12	; 0x0c
    13d4:	ee 23       	and	r30, r30
    13d6:	51 f7       	brne	.-44     	; 0x13ac <main+0x42>
	UART_init( &Config); //initialization of the UART with UART config struct
    13d8:	ce 01       	movw	r24, r28
    13da:	01 96       	adiw	r24, 0x01	; 1
    13dc:	0e 94 70 14 	call	0x28e0	; 0x28e0 <UART_init>
	Timer1_init(&timer_config);// initialization of the timer
    13e0:	88 e6       	ldi	r24, 0x68	; 104
    13e2:	91 e0       	ldi	r25, 0x01	; 1
    13e4:	0e 94 ff 06 	call	0xdfe	; 0xdfe <Timer1_init>
	Timer1_setCallBack(timer_count);
    13e8:	80 eb       	ldi	r24, 0xB0	; 176
    13ea:	97 e0       	ldi	r25, 0x07	; 7
    13ec:	0e 94 75 07 	call	0xeea	; 0xeea <Timer1_setCallBack>
	//choose timer_count function as call back functin
	Buzzer_init();// initialization of the buzzer
    13f0:	0e 94 87 07 	call	0xf0e	; 0xf0e <Buzzer_init>
	DcMotor_Init();// initialization of the motor
    13f4:	0e 94 50 06 	call	0xca0	; 0xca0 <DcMotor_Init>
	do {
		/* looping until the user enter
			       two matched password to be
			       the current password of the system */

		check_new_pass(pass_1,pass_2);//calling check_new_pass function
    13f8:	8f e7       	ldi	r24, 0x7F	; 127
    13fa:	91 e0       	ldi	r25, 0x01	; 1
    13fc:	29 e8       	ldi	r18, 0x89	; 137
    13fe:	31 e0       	ldi	r19, 0x01	; 1
    1400:	b9 01       	movw	r22, r18
    1402:	0e 94 19 08 	call	0x1032	; 0x1032 <check_new_pass>

	}while(succes==0); //if two pass matched succes=1 and break from the loop
    1406:	80 91 7d 01 	lds	r24, 0x017D
    140a:	88 23       	and	r24, r24
    140c:	a9 f3       	breq	.-22     	; 0x13f8 <main+0x8e>

	while(1){
//recieveing the choice of HMI in ans var
		ans=UART_recieveByte();
    140e:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <UART_recieveByte>
    1412:	80 93 8e 01 	sts	0x018E, r24


		if (ans ==11){ //if choose '+'
    1416:	80 91 8e 01 	lds	r24, 0x018E
    141a:	8b 30       	cpi	r24, 0x0B	; 11
    141c:	09 f0       	breq	.+2      	; 0x1420 <main+0xb6>
    141e:	43 c0       	rjmp	.+134    	; 0x14a6 <main+0x13c>

			do{
				if(k==3){ //check if the wrong trials is 3
    1420:	80 91 7e 01 	lds	r24, 0x017E
    1424:	83 30       	cpi	r24, 0x03	; 3
    1426:	69 f4       	brne	.+26     	; 0x1442 <main+0xd8>
					k=0;
    1428:	10 92 7e 01 	sts	0x017E, r1
					//buzzer
					tick=0;
    142c:	10 92 7c 01 	sts	0x017C, r1
					Buzzer_on(); // turn on the buzzer
    1430:	0e 94 98 07 	call	0xf30	; 0xf30 <Buzzer_on>
					while(tick!=20);// polling 60 sec
    1434:	80 91 7c 01 	lds	r24, 0x017C
    1438:	84 31       	cpi	r24, 0x14	; 20
    143a:	e1 f7       	brne	.-8      	; 0x1434 <main+0xca>
					Buzzer_off(); // turn off the buzzer
    143c:	0e 94 a4 07 	call	0xf48	; 0xf48 <Buzzer_off>
    1440:	0d c0       	rjmp	.+26     	; 0x145c <main+0xf2>

					break; //break after the third trial
				}

				check_current_pass(pass_1); //check the Kth trial
    1442:	8f e7       	ldi	r24, 0x7F	; 127
    1444:	91 e0       	ldi	r25, 0x01	; 1
    1446:	0e 94 bc 07 	call	0xf78	; 0xf78 <check_current_pass>
				k++; //increace tries
    144a:	80 91 7e 01 	lds	r24, 0x017E
    144e:	8f 5f       	subi	r24, 0xFF	; 255
    1450:	80 93 7e 01 	sts	0x017E, r24
			}while(succes==0); /*break from loop if onr of two conditions happen
    1454:	80 91 7d 01 	lds	r24, 0x017D
    1458:	88 23       	and	r24, r24
    145a:	11 f3       	breq	.-60     	; 0x1420 <main+0xb6>
			1- three wrong trials
			2- the password is true
			*/
			k=0;
    145c:	10 92 7e 01 	sts	0x017E, r1
			if(succes==1){
    1460:	80 91 7d 01 	lds	r24, 0x017D
    1464:	81 30       	cpi	r24, 0x01	; 1
    1466:	99 f6       	brne	.-90     	; 0x140e <main+0xa4>
				//the user enter the right password
				//UART_sendByte(Matched);
				tick=0; //start timer from 0
    1468:	10 92 7c 01 	sts	0x017C, r1
				DcMotor_Rotate (1,100);
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	64 e6       	ldi	r22, 0x64	; 100
    1470:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DcMotor_Rotate>
				//rotate motor clockwise with max speed
               // _delay_ms(1000);
				while(tick !=5); //polling 15 sec
    1474:	80 91 7c 01 	lds	r24, 0x017C
    1478:	85 30       	cpi	r24, 0x05	; 5
    147a:	e1 f7       	brne	.-8      	; 0x1474 <main+0x10a>
				DcMotor_Rotate (0,0); //stop the motor
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	60 e0       	ldi	r22, 0x00	; 0
    1480:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DcMotor_Rotate>
				//_delay_ms(1000);
				while(tick !=6);//polling 3 sec
    1484:	80 91 7c 01 	lds	r24, 0x017C
    1488:	86 30       	cpi	r24, 0x06	; 6
    148a:	e1 f7       	brne	.-8      	; 0x1484 <main+0x11a>
				DcMotor_Rotate (2,100); //rotate motor anti clockwise with max speed
    148c:	82 e0       	ldi	r24, 0x02	; 2
    148e:	64 e6       	ldi	r22, 0x64	; 100
    1490:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DcMotor_Rotate>
				//_delay_ms(1000);
				while(tick !=11);//polling 15 sec
    1494:	80 91 7c 01 	lds	r24, 0x017C
    1498:	8b 30       	cpi	r24, 0x0B	; 11
    149a:	e1 f7       	brne	.-8      	; 0x1494 <main+0x12a>
				DcMotor_Rotate (0,0);
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	60 e0       	ldi	r22, 0x00	; 0
    14a0:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DcMotor_Rotate>
    14a4:	b4 cf       	rjmp	.-152    	; 0x140e <main+0xa4>
				//_delay_ms(1000);
			}
		}
		else if (ans == 13){
    14a6:	80 91 8e 01 	lds	r24, 0x018E
    14aa:	8d 30       	cpi	r24, 0x0D	; 13
    14ac:	09 f0       	breq	.+2      	; 0x14b0 <main+0x146>
    14ae:	af cf       	rjmp	.-162    	; 0x140e <main+0xa4>
			do{
				//like the the last one
				if(k==3){
    14b0:	80 91 7e 01 	lds	r24, 0x017E
    14b4:	83 30       	cpi	r24, 0x03	; 3
    14b6:	69 f4       	brne	.+26     	; 0x14d2 <main+0x168>

					k=0;
    14b8:	10 92 7e 01 	sts	0x017E, r1
					tick=0;
    14bc:	10 92 7c 01 	sts	0x017C, r1
					Buzzer_on(); // turn on the buzzer
    14c0:	0e 94 98 07 	call	0xf30	; 0xf30 <Buzzer_on>
					while(tick!=20); //polling 60 sec
    14c4:	80 91 7c 01 	lds	r24, 0x017C
    14c8:	84 31       	cpi	r24, 0x14	; 20
    14ca:	e1 f7       	brne	.-8      	; 0x14c4 <main+0x15a>
					Buzzer_off(); // turn off the buzzer
    14cc:	0e 94 a4 07 	call	0xf48	; 0xf48 <Buzzer_off>
    14d0:	0d c0       	rjmp	.+26     	; 0x14ec <main+0x182>

					break;
				}

				check_current_pass(pass_1);
    14d2:	8f e7       	ldi	r24, 0x7F	; 127
    14d4:	91 e0       	ldi	r25, 0x01	; 1
    14d6:	0e 94 bc 07 	call	0xf78	; 0xf78 <check_current_pass>
				k++;
    14da:	80 91 7e 01 	lds	r24, 0x017E
    14de:	8f 5f       	subi	r24, 0xFF	; 255
    14e0:	80 93 7e 01 	sts	0x017E, r24
			}while(succes==0);
    14e4:	80 91 7d 01 	lds	r24, 0x017D
    14e8:	88 23       	and	r24, r24
    14ea:	11 f3       	breq	.-60     	; 0x14b0 <main+0x146>
			/*break from loop if onr of two conditions happen
						1- three wrong trials
						2- the password is true
						*/
			k=0;
    14ec:	10 92 7e 01 	sts	0x017E, r1
			if(succes==1){
    14f0:	80 91 7d 01 	lds	r24, 0x017D
    14f4:	81 30       	cpi	r24, 0x01	; 1
    14f6:	09 f0       	breq	.+2      	; 0x14fa <main+0x190>
    14f8:	8a cf       	rjmp	.-236    	; 0x140e <main+0xa4>
				do {
						/* looping until the user enter
							       two matched password to be
							       the current password of the system */

						check_new_pass(pass_1,pass_2);//calling check_new_pass function
    14fa:	8f e7       	ldi	r24, 0x7F	; 127
    14fc:	91 e0       	ldi	r25, 0x01	; 1
    14fe:	29 e8       	ldi	r18, 0x89	; 137
    1500:	31 e0       	ldi	r19, 0x01	; 1
    1502:	b9 01       	movw	r22, r18
    1504:	0e 94 19 08 	call	0x1032	; 0x1032 <check_new_pass>

					}while(succes==0);
    1508:	80 91 7d 01 	lds	r24, 0x017D
    150c:	88 23       	and	r24, r24
    150e:	a9 f3       	breq	.-22     	; 0x14fa <main+0x190>
    1510:	7e cf       	rjmp	.-260    	; 0x140e <main+0xa4>

00001512 <EEPROM_writeByte>:

#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	00 d0       	rcall	.+0      	; 0x1518 <EEPROM_writeByte+0x6>
    1518:	00 d0       	rcall	.+0      	; 0x151a <EEPROM_writeByte+0x8>
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	9a 83       	std	Y+2, r25	; 0x02
    1520:	89 83       	std	Y+1, r24	; 0x01
    1522:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1524:	0e 94 09 14 	call	0x2812	; 0x2812 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1528:	0e 94 61 14 	call	0x28c2	; 0x28c2 <TWI_getStatus>
    152c:	88 30       	cpi	r24, 0x08	; 8
    152e:	11 f0       	breq	.+4      	; 0x1534 <EEPROM_writeByte+0x22>
        return ERROR;
    1530:	1c 82       	std	Y+4, r1	; 0x04
    1532:	28 c0       	rjmp	.+80     	; 0x1584 <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	9a 81       	ldd	r25, Y+2	; 0x02
    1538:	80 70       	andi	r24, 0x00	; 0
    153a:	97 70       	andi	r25, 0x07	; 7
    153c:	88 0f       	add	r24, r24
    153e:	89 2f       	mov	r24, r25
    1540:	88 1f       	adc	r24, r24
    1542:	99 0b       	sbc	r25, r25
    1544:	91 95       	neg	r25
    1546:	80 6a       	ori	r24, 0xA0	; 160
    1548:	0e 94 24 14 	call	0x2848	; 0x2848 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    154c:	0e 94 61 14 	call	0x28c2	; 0x28c2 <TWI_getStatus>
    1550:	88 31       	cpi	r24, 0x18	; 24
    1552:	11 f0       	breq	.+4      	; 0x1558 <EEPROM_writeByte+0x46>
        return ERROR;
    1554:	1c 82       	std	Y+4, r1	; 0x04
    1556:	16 c0       	rjmp	.+44     	; 0x1584 <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1558:	89 81       	ldd	r24, Y+1	; 0x01
    155a:	0e 94 24 14 	call	0x2848	; 0x2848 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    155e:	0e 94 61 14 	call	0x28c2	; 0x28c2 <TWI_getStatus>
    1562:	88 32       	cpi	r24, 0x28	; 40
    1564:	11 f0       	breq	.+4      	; 0x156a <EEPROM_writeByte+0x58>
        return ERROR;
    1566:	1c 82       	std	Y+4, r1	; 0x04
    1568:	0d c0       	rjmp	.+26     	; 0x1584 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	0e 94 24 14 	call	0x2848	; 0x2848 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1570:	0e 94 61 14 	call	0x28c2	; 0x28c2 <TWI_getStatus>
    1574:	88 32       	cpi	r24, 0x28	; 40
    1576:	11 f0       	breq	.+4      	; 0x157c <EEPROM_writeByte+0x6a>
        return ERROR;
    1578:	1c 82       	std	Y+4, r1	; 0x04
    157a:	04 c0       	rjmp	.+8      	; 0x1584 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    157c:	0e 94 19 14 	call	0x2832	; 0x2832 <TWI_stop>

    return SUCCESS;
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	8c 83       	std	Y+4, r24	; 0x04
    1584:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	cf 91       	pop	r28
    1590:	df 91       	pop	r29
    1592:	08 95       	ret

00001594 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1594:	df 93       	push	r29
    1596:	cf 93       	push	r28
    1598:	00 d0       	rcall	.+0      	; 0x159a <EEPROM_readByte+0x6>
    159a:	00 d0       	rcall	.+0      	; 0x159c <EEPROM_readByte+0x8>
    159c:	0f 92       	push	r0
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62
    15a2:	9a 83       	std	Y+2, r25	; 0x02
    15a4:	89 83       	std	Y+1, r24	; 0x01
    15a6:	7c 83       	std	Y+4, r23	; 0x04
    15a8:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    15aa:	0e 94 09 14 	call	0x2812	; 0x2812 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    15ae:	0e 94 61 14 	call	0x28c2	; 0x28c2 <TWI_getStatus>
    15b2:	88 30       	cpi	r24, 0x08	; 8
    15b4:	11 f0       	breq	.+4      	; 0x15ba <EEPROM_readByte+0x26>
        return ERROR;
    15b6:	1d 82       	std	Y+5, r1	; 0x05
    15b8:	44 c0       	rjmp	.+136    	; 0x1642 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	9a 81       	ldd	r25, Y+2	; 0x02
    15be:	80 70       	andi	r24, 0x00	; 0
    15c0:	97 70       	andi	r25, 0x07	; 7
    15c2:	88 0f       	add	r24, r24
    15c4:	89 2f       	mov	r24, r25
    15c6:	88 1f       	adc	r24, r24
    15c8:	99 0b       	sbc	r25, r25
    15ca:	91 95       	neg	r25
    15cc:	80 6a       	ori	r24, 0xA0	; 160
    15ce:	0e 94 24 14 	call	0x2848	; 0x2848 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    15d2:	0e 94 61 14 	call	0x28c2	; 0x28c2 <TWI_getStatus>
    15d6:	88 31       	cpi	r24, 0x18	; 24
    15d8:	11 f0       	breq	.+4      	; 0x15de <EEPROM_readByte+0x4a>
        return ERROR;
    15da:	1d 82       	std	Y+5, r1	; 0x05
    15dc:	32 c0       	rjmp	.+100    	; 0x1642 <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    15de:	89 81       	ldd	r24, Y+1	; 0x01
    15e0:	0e 94 24 14 	call	0x2848	; 0x2848 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    15e4:	0e 94 61 14 	call	0x28c2	; 0x28c2 <TWI_getStatus>
    15e8:	88 32       	cpi	r24, 0x28	; 40
    15ea:	11 f0       	breq	.+4      	; 0x15f0 <EEPROM_readByte+0x5c>
        return ERROR;
    15ec:	1d 82       	std	Y+5, r1	; 0x05
    15ee:	29 c0       	rjmp	.+82     	; 0x1642 <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    15f0:	0e 94 09 14 	call	0x2812	; 0x2812 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    15f4:	0e 94 61 14 	call	0x28c2	; 0x28c2 <TWI_getStatus>
    15f8:	80 31       	cpi	r24, 0x10	; 16
    15fa:	11 f0       	breq	.+4      	; 0x1600 <EEPROM_readByte+0x6c>
        return ERROR;
    15fc:	1d 82       	std	Y+5, r1	; 0x05
    15fe:	21 c0       	rjmp	.+66     	; 0x1642 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1600:	89 81       	ldd	r24, Y+1	; 0x01
    1602:	9a 81       	ldd	r25, Y+2	; 0x02
    1604:	80 70       	andi	r24, 0x00	; 0
    1606:	97 70       	andi	r25, 0x07	; 7
    1608:	88 0f       	add	r24, r24
    160a:	89 2f       	mov	r24, r25
    160c:	88 1f       	adc	r24, r24
    160e:	99 0b       	sbc	r25, r25
    1610:	91 95       	neg	r25
    1612:	81 6a       	ori	r24, 0xA1	; 161
    1614:	0e 94 24 14 	call	0x2848	; 0x2848 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1618:	0e 94 61 14 	call	0x28c2	; 0x28c2 <TWI_getStatus>
    161c:	80 34       	cpi	r24, 0x40	; 64
    161e:	11 f0       	breq	.+4      	; 0x1624 <EEPROM_readByte+0x90>
        return ERROR;
    1620:	1d 82       	std	Y+5, r1	; 0x05
    1622:	0f c0       	rjmp	.+30     	; 0x1642 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1624:	0e 94 4e 14 	call	0x289c	; 0x289c <TWI_readByteWithNACK>
    1628:	eb 81       	ldd	r30, Y+3	; 0x03
    162a:	fc 81       	ldd	r31, Y+4	; 0x04
    162c:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    162e:	0e 94 61 14 	call	0x28c2	; 0x28c2 <TWI_getStatus>
    1632:	88 35       	cpi	r24, 0x58	; 88
    1634:	11 f0       	breq	.+4      	; 0x163a <EEPROM_readByte+0xa6>
        return ERROR;
    1636:	1d 82       	std	Y+5, r1	; 0x05
    1638:	04 c0       	rjmp	.+8      	; 0x1642 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    163a:	0e 94 19 14 	call	0x2832	; 0x2832 <TWI_stop>

    return SUCCESS;
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	8d 83       	std	Y+5, r24	; 0x05
    1642:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1644:	0f 90       	pop	r0
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	0f 90       	pop	r0
    164c:	0f 90       	pop	r0
    164e:	cf 91       	pop	r28
    1650:	df 91       	pop	r29
    1652:	08 95       	ret

00001654 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1654:	df 93       	push	r29
    1656:	cf 93       	push	r28
    1658:	00 d0       	rcall	.+0      	; 0x165a <GPIO_setupPinDirection+0x6>
    165a:	00 d0       	rcall	.+0      	; 0x165c <GPIO_setupPinDirection+0x8>
    165c:	0f 92       	push	r0
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
    1662:	89 83       	std	Y+1, r24	; 0x01
    1664:	6a 83       	std	Y+2, r22	; 0x02
    1666:	4b 83       	std	Y+3, r20	; 0x03
	if( port_num >= NUM_OF_PINS_PER_PORT || port_num >= NUM_OF_PORTS ){
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	88 30       	cpi	r24, 0x08	; 8
    166c:	08 f0       	brcs	.+2      	; 0x1670 <GPIO_setupPinDirection+0x1c>
    166e:	d5 c0       	rjmp	.+426    	; 0x181a <GPIO_setupPinDirection+0x1c6>
    1670:	89 81       	ldd	r24, Y+1	; 0x01
    1672:	84 30       	cpi	r24, 0x04	; 4
    1674:	08 f0       	brcs	.+2      	; 0x1678 <GPIO_setupPinDirection+0x24>
    1676:	d1 c0       	rjmp	.+418    	; 0x181a <GPIO_setupPinDirection+0x1c6>

	}
	else{
		switch ( port_num ){
    1678:	89 81       	ldd	r24, Y+1	; 0x01
    167a:	28 2f       	mov	r18, r24
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	3d 83       	std	Y+5, r19	; 0x05
    1680:	2c 83       	std	Y+4, r18	; 0x04
    1682:	8c 81       	ldd	r24, Y+4	; 0x04
    1684:	9d 81       	ldd	r25, Y+5	; 0x05
    1686:	81 30       	cpi	r24, 0x01	; 1
    1688:	91 05       	cpc	r25, r1
    168a:	09 f4       	brne	.+2      	; 0x168e <GPIO_setupPinDirection+0x3a>
    168c:	43 c0       	rjmp	.+134    	; 0x1714 <GPIO_setupPinDirection+0xc0>
    168e:	2c 81       	ldd	r18, Y+4	; 0x04
    1690:	3d 81       	ldd	r19, Y+5	; 0x05
    1692:	22 30       	cpi	r18, 0x02	; 2
    1694:	31 05       	cpc	r19, r1
    1696:	2c f4       	brge	.+10     	; 0x16a2 <GPIO_setupPinDirection+0x4e>
    1698:	8c 81       	ldd	r24, Y+4	; 0x04
    169a:	9d 81       	ldd	r25, Y+5	; 0x05
    169c:	00 97       	sbiw	r24, 0x00	; 0
    169e:	71 f0       	breq	.+28     	; 0x16bc <GPIO_setupPinDirection+0x68>
    16a0:	bc c0       	rjmp	.+376    	; 0x181a <GPIO_setupPinDirection+0x1c6>
    16a2:	2c 81       	ldd	r18, Y+4	; 0x04
    16a4:	3d 81       	ldd	r19, Y+5	; 0x05
    16a6:	22 30       	cpi	r18, 0x02	; 2
    16a8:	31 05       	cpc	r19, r1
    16aa:	09 f4       	brne	.+2      	; 0x16ae <GPIO_setupPinDirection+0x5a>
    16ac:	5f c0       	rjmp	.+190    	; 0x176c <GPIO_setupPinDirection+0x118>
    16ae:	8c 81       	ldd	r24, Y+4	; 0x04
    16b0:	9d 81       	ldd	r25, Y+5	; 0x05
    16b2:	83 30       	cpi	r24, 0x03	; 3
    16b4:	91 05       	cpc	r25, r1
    16b6:	09 f4       	brne	.+2      	; 0x16ba <GPIO_setupPinDirection+0x66>
    16b8:	85 c0       	rjmp	.+266    	; 0x17c4 <GPIO_setupPinDirection+0x170>
    16ba:	af c0       	rjmp	.+350    	; 0x181a <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID :

			if( direction == PIN_OUTPUT){
    16bc:	8b 81       	ldd	r24, Y+3	; 0x03
    16be:	81 30       	cpi	r24, 0x01	; 1
    16c0:	a1 f4       	brne	.+40     	; 0x16ea <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA,pin_num);
    16c2:	aa e3       	ldi	r26, 0x3A	; 58
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	ea e3       	ldi	r30, 0x3A	; 58
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	48 2f       	mov	r20, r24
    16ce:	8a 81       	ldd	r24, Y+2	; 0x02
    16d0:	28 2f       	mov	r18, r24
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	02 2e       	mov	r0, r18
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <GPIO_setupPinDirection+0x8c>
    16dc:	88 0f       	add	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	0a 94       	dec	r0
    16e2:	e2 f7       	brpl	.-8      	; 0x16dc <GPIO_setupPinDirection+0x88>
    16e4:	84 2b       	or	r24, r20
    16e6:	8c 93       	st	X, r24
    16e8:	98 c0       	rjmp	.+304    	; 0x181a <GPIO_setupPinDirection+0x1c6>
			}
			else{
				CLEAR_BIT(DDRA,pin_num);
    16ea:	aa e3       	ldi	r26, 0x3A	; 58
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	ea e3       	ldi	r30, 0x3A	; 58
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	48 2f       	mov	r20, r24
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	02 2e       	mov	r0, r18
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <GPIO_setupPinDirection+0xb4>
    1704:	88 0f       	add	r24, r24
    1706:	99 1f       	adc	r25, r25
    1708:	0a 94       	dec	r0
    170a:	e2 f7       	brpl	.-8      	; 0x1704 <GPIO_setupPinDirection+0xb0>
    170c:	80 95       	com	r24
    170e:	84 23       	and	r24, r20
    1710:	8c 93       	st	X, r24
    1712:	83 c0       	rjmp	.+262    	; 0x181a <GPIO_setupPinDirection+0x1c6>
			}
			break;

		case PORTB_ID :

			if( direction == PIN_OUTPUT){
    1714:	8b 81       	ldd	r24, Y+3	; 0x03
    1716:	81 30       	cpi	r24, 0x01	; 1
    1718:	a1 f4       	brne	.+40     	; 0x1742 <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB,pin_num);
    171a:	a7 e3       	ldi	r26, 0x37	; 55
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	e7 e3       	ldi	r30, 0x37	; 55
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	48 2f       	mov	r20, r24
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	02 2e       	mov	r0, r18
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <GPIO_setupPinDirection+0xe4>
    1734:	88 0f       	add	r24, r24
    1736:	99 1f       	adc	r25, r25
    1738:	0a 94       	dec	r0
    173a:	e2 f7       	brpl	.-8      	; 0x1734 <GPIO_setupPinDirection+0xe0>
    173c:	84 2b       	or	r24, r20
    173e:	8c 93       	st	X, r24
    1740:	6c c0       	rjmp	.+216    	; 0x181a <GPIO_setupPinDirection+0x1c6>
			}
			else{
				CLEAR_BIT(DDRB,pin_num);
    1742:	a7 e3       	ldi	r26, 0x37	; 55
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e7 e3       	ldi	r30, 0x37	; 55
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	48 2f       	mov	r20, r24
    174e:	8a 81       	ldd	r24, Y+2	; 0x02
    1750:	28 2f       	mov	r18, r24
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	02 2e       	mov	r0, r18
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <GPIO_setupPinDirection+0x10c>
    175c:	88 0f       	add	r24, r24
    175e:	99 1f       	adc	r25, r25
    1760:	0a 94       	dec	r0
    1762:	e2 f7       	brpl	.-8      	; 0x175c <GPIO_setupPinDirection+0x108>
    1764:	80 95       	com	r24
    1766:	84 23       	and	r24, r20
    1768:	8c 93       	st	X, r24
    176a:	57 c0       	rjmp	.+174    	; 0x181a <GPIO_setupPinDirection+0x1c6>
			}
			break;

		case PORTC_ID :

			if( direction == PIN_OUTPUT){
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	81 30       	cpi	r24, 0x01	; 1
    1770:	a1 f4       	brne	.+40     	; 0x179a <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC,pin_num);
    1772:	a4 e3       	ldi	r26, 0x34	; 52
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	e4 e3       	ldi	r30, 0x34	; 52
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	48 2f       	mov	r20, r24
    177e:	8a 81       	ldd	r24, Y+2	; 0x02
    1780:	28 2f       	mov	r18, r24
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	02 2e       	mov	r0, r18
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <GPIO_setupPinDirection+0x13c>
    178c:	88 0f       	add	r24, r24
    178e:	99 1f       	adc	r25, r25
    1790:	0a 94       	dec	r0
    1792:	e2 f7       	brpl	.-8      	; 0x178c <GPIO_setupPinDirection+0x138>
    1794:	84 2b       	or	r24, r20
    1796:	8c 93       	st	X, r24
    1798:	40 c0       	rjmp	.+128    	; 0x181a <GPIO_setupPinDirection+0x1c6>
			}
			else{
				CLEAR_BIT(DDRC,pin_num);
    179a:	a4 e3       	ldi	r26, 0x34	; 52
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	e4 e3       	ldi	r30, 0x34	; 52
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	48 2f       	mov	r20, r24
    17a6:	8a 81       	ldd	r24, Y+2	; 0x02
    17a8:	28 2f       	mov	r18, r24
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	02 2e       	mov	r0, r18
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <GPIO_setupPinDirection+0x164>
    17b4:	88 0f       	add	r24, r24
    17b6:	99 1f       	adc	r25, r25
    17b8:	0a 94       	dec	r0
    17ba:	e2 f7       	brpl	.-8      	; 0x17b4 <GPIO_setupPinDirection+0x160>
    17bc:	80 95       	com	r24
    17be:	84 23       	and	r24, r20
    17c0:	8c 93       	st	X, r24
    17c2:	2b c0       	rjmp	.+86     	; 0x181a <GPIO_setupPinDirection+0x1c6>
			}
			break;

		case PORTD_ID :

			if( direction == PIN_OUTPUT){
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	81 30       	cpi	r24, 0x01	; 1
    17c8:	a1 f4       	brne	.+40     	; 0x17f2 <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD,pin_num);
    17ca:	a1 e3       	ldi	r26, 0x31	; 49
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e1 e3       	ldi	r30, 0x31	; 49
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	48 2f       	mov	r20, r24
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	02 2e       	mov	r0, r18
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <GPIO_setupPinDirection+0x194>
    17e4:	88 0f       	add	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	0a 94       	dec	r0
    17ea:	e2 f7       	brpl	.-8      	; 0x17e4 <GPIO_setupPinDirection+0x190>
    17ec:	84 2b       	or	r24, r20
    17ee:	8c 93       	st	X, r24
    17f0:	14 c0       	rjmp	.+40     	; 0x181a <GPIO_setupPinDirection+0x1c6>
			}
			else{
				CLEAR_BIT(DDRD,pin_num);
    17f2:	a1 e3       	ldi	r26, 0x31	; 49
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	e1 e3       	ldi	r30, 0x31	; 49
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	48 2f       	mov	r20, r24
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1800:	28 2f       	mov	r18, r24
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	02 2e       	mov	r0, r18
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <GPIO_setupPinDirection+0x1bc>
    180c:	88 0f       	add	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	0a 94       	dec	r0
    1812:	e2 f7       	brpl	.-8      	; 0x180c <GPIO_setupPinDirection+0x1b8>
    1814:	80 95       	com	r24
    1816:	84 23       	and	r24, r20
    1818:	8c 93       	st	X, r24
			}
			break;

		}
	}
}
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	08 95       	ret

0000182a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	00 d0       	rcall	.+0      	; 0x1830 <GPIO_writePin+0x6>
    1830:	00 d0       	rcall	.+0      	; 0x1832 <GPIO_writePin+0x8>
    1832:	0f 92       	push	r0
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    1838:	89 83       	std	Y+1, r24	; 0x01
    183a:	6a 83       	std	Y+2, r22	; 0x02
    183c:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    183e:	8a 81       	ldd	r24, Y+2	; 0x02
    1840:	88 30       	cpi	r24, 0x08	; 8
    1842:	08 f0       	brcs	.+2      	; 0x1846 <GPIO_writePin+0x1c>
    1844:	d5 c0       	rjmp	.+426    	; 0x19f0 <GPIO_writePin+0x1c6>
    1846:	89 81       	ldd	r24, Y+1	; 0x01
    1848:	84 30       	cpi	r24, 0x04	; 4
    184a:	08 f0       	brcs	.+2      	; 0x184e <GPIO_writePin+0x24>
    184c:	d1 c0       	rjmp	.+418    	; 0x19f0 <GPIO_writePin+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
		switch ( port_num ){
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	3d 83       	std	Y+5, r19	; 0x05
    1856:	2c 83       	std	Y+4, r18	; 0x04
    1858:	8c 81       	ldd	r24, Y+4	; 0x04
    185a:	9d 81       	ldd	r25, Y+5	; 0x05
    185c:	81 30       	cpi	r24, 0x01	; 1
    185e:	91 05       	cpc	r25, r1
    1860:	09 f4       	brne	.+2      	; 0x1864 <GPIO_writePin+0x3a>
    1862:	43 c0       	rjmp	.+134    	; 0x18ea <GPIO_writePin+0xc0>
    1864:	2c 81       	ldd	r18, Y+4	; 0x04
    1866:	3d 81       	ldd	r19, Y+5	; 0x05
    1868:	22 30       	cpi	r18, 0x02	; 2
    186a:	31 05       	cpc	r19, r1
    186c:	2c f4       	brge	.+10     	; 0x1878 <GPIO_writePin+0x4e>
    186e:	8c 81       	ldd	r24, Y+4	; 0x04
    1870:	9d 81       	ldd	r25, Y+5	; 0x05
    1872:	00 97       	sbiw	r24, 0x00	; 0
    1874:	71 f0       	breq	.+28     	; 0x1892 <GPIO_writePin+0x68>
    1876:	bc c0       	rjmp	.+376    	; 0x19f0 <GPIO_writePin+0x1c6>
    1878:	2c 81       	ldd	r18, Y+4	; 0x04
    187a:	3d 81       	ldd	r19, Y+5	; 0x05
    187c:	22 30       	cpi	r18, 0x02	; 2
    187e:	31 05       	cpc	r19, r1
    1880:	09 f4       	brne	.+2      	; 0x1884 <GPIO_writePin+0x5a>
    1882:	5f c0       	rjmp	.+190    	; 0x1942 <GPIO_writePin+0x118>
    1884:	8c 81       	ldd	r24, Y+4	; 0x04
    1886:	9d 81       	ldd	r25, Y+5	; 0x05
    1888:	83 30       	cpi	r24, 0x03	; 3
    188a:	91 05       	cpc	r25, r1
    188c:	09 f4       	brne	.+2      	; 0x1890 <GPIO_writePin+0x66>
    188e:	85 c0       	rjmp	.+266    	; 0x199a <GPIO_writePin+0x170>
    1890:	af c0       	rjmp	.+350    	; 0x19f0 <GPIO_writePin+0x1c6>
		case PORTA_ID :


			if( value == LOGIC_HIGH){
    1892:	8b 81       	ldd	r24, Y+3	; 0x03
    1894:	81 30       	cpi	r24, 0x01	; 1
    1896:	a1 f4       	brne	.+40     	; 0x18c0 <GPIO_writePin+0x96>
				SET_BIT(PORTA,pin_num);
    1898:	ab e3       	ldi	r26, 0x3B	; 59
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	eb e3       	ldi	r30, 0x3B	; 59
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	48 2f       	mov	r20, r24
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	02 2e       	mov	r0, r18
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <GPIO_writePin+0x8c>
    18b2:	88 0f       	add	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	0a 94       	dec	r0
    18b8:	e2 f7       	brpl	.-8      	; 0x18b2 <GPIO_writePin+0x88>
    18ba:	84 2b       	or	r24, r20
    18bc:	8c 93       	st	X, r24
    18be:	98 c0       	rjmp	.+304    	; 0x19f0 <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTA,pin_num);
    18c0:	ab e3       	ldi	r26, 0x3B	; 59
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	eb e3       	ldi	r30, 0x3B	; 59
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	48 2f       	mov	r20, r24
    18cc:	8a 81       	ldd	r24, Y+2	; 0x02
    18ce:	28 2f       	mov	r18, r24
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	02 2e       	mov	r0, r18
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <GPIO_writePin+0xb4>
    18da:	88 0f       	add	r24, r24
    18dc:	99 1f       	adc	r25, r25
    18de:	0a 94       	dec	r0
    18e0:	e2 f7       	brpl	.-8      	; 0x18da <GPIO_writePin+0xb0>
    18e2:	80 95       	com	r24
    18e4:	84 23       	and	r24, r20
    18e6:	8c 93       	st	X, r24
    18e8:	83 c0       	rjmp	.+262    	; 0x19f0 <GPIO_writePin+0x1c6>
			break;

		case PORTB_ID :


			if( value == LOGIC_HIGH){
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	81 30       	cpi	r24, 0x01	; 1
    18ee:	a1 f4       	brne	.+40     	; 0x1918 <GPIO_writePin+0xee>
				SET_BIT(PORTB,pin_num);
    18f0:	a8 e3       	ldi	r26, 0x38	; 56
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	e8 e3       	ldi	r30, 0x38	; 56
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	48 2f       	mov	r20, r24
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	02 2e       	mov	r0, r18
    1908:	02 c0       	rjmp	.+4      	; 0x190e <GPIO_writePin+0xe4>
    190a:	88 0f       	add	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	0a 94       	dec	r0
    1910:	e2 f7       	brpl	.-8      	; 0x190a <GPIO_writePin+0xe0>
    1912:	84 2b       	or	r24, r20
    1914:	8c 93       	st	X, r24
    1916:	6c c0       	rjmp	.+216    	; 0x19f0 <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTB,pin_num);
    1918:	a8 e3       	ldi	r26, 0x38	; 56
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	e8 e3       	ldi	r30, 0x38	; 56
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	48 2f       	mov	r20, r24
    1924:	8a 81       	ldd	r24, Y+2	; 0x02
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	02 2e       	mov	r0, r18
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <GPIO_writePin+0x10c>
    1932:	88 0f       	add	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	0a 94       	dec	r0
    1938:	e2 f7       	brpl	.-8      	; 0x1932 <GPIO_writePin+0x108>
    193a:	80 95       	com	r24
    193c:	84 23       	and	r24, r20
    193e:	8c 93       	st	X, r24
    1940:	57 c0       	rjmp	.+174    	; 0x19f0 <GPIO_writePin+0x1c6>
			break;

		case PORTC_ID :


			if( value == LOGIC_HIGH){
    1942:	8b 81       	ldd	r24, Y+3	; 0x03
    1944:	81 30       	cpi	r24, 0x01	; 1
    1946:	a1 f4       	brne	.+40     	; 0x1970 <GPIO_writePin+0x146>
				SET_BIT(PORTC,pin_num);
    1948:	a5 e3       	ldi	r26, 0x35	; 53
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	e5 e3       	ldi	r30, 0x35	; 53
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	48 2f       	mov	r20, r24
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	28 2f       	mov	r18, r24
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	02 2e       	mov	r0, r18
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <GPIO_writePin+0x13c>
    1962:	88 0f       	add	r24, r24
    1964:	99 1f       	adc	r25, r25
    1966:	0a 94       	dec	r0
    1968:	e2 f7       	brpl	.-8      	; 0x1962 <GPIO_writePin+0x138>
    196a:	84 2b       	or	r24, r20
    196c:	8c 93       	st	X, r24
    196e:	40 c0       	rjmp	.+128    	; 0x19f0 <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTC,pin_num);
    1970:	a5 e3       	ldi	r26, 0x35	; 53
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	e5 e3       	ldi	r30, 0x35	; 53
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	48 2f       	mov	r20, r24
    197c:	8a 81       	ldd	r24, Y+2	; 0x02
    197e:	28 2f       	mov	r18, r24
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	02 2e       	mov	r0, r18
    1988:	02 c0       	rjmp	.+4      	; 0x198e <GPIO_writePin+0x164>
    198a:	88 0f       	add	r24, r24
    198c:	99 1f       	adc	r25, r25
    198e:	0a 94       	dec	r0
    1990:	e2 f7       	brpl	.-8      	; 0x198a <GPIO_writePin+0x160>
    1992:	80 95       	com	r24
    1994:	84 23       	and	r24, r20
    1996:	8c 93       	st	X, r24
    1998:	2b c0       	rjmp	.+86     	; 0x19f0 <GPIO_writePin+0x1c6>
			break;

		case PORTD_ID :


			if( value == LOGIC_HIGH){
    199a:	8b 81       	ldd	r24, Y+3	; 0x03
    199c:	81 30       	cpi	r24, 0x01	; 1
    199e:	a1 f4       	brne	.+40     	; 0x19c8 <GPIO_writePin+0x19e>
				SET_BIT(PORTD,pin_num);
    19a0:	a2 e3       	ldi	r26, 0x32	; 50
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	e2 e3       	ldi	r30, 0x32	; 50
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	48 2f       	mov	r20, r24
    19ac:	8a 81       	ldd	r24, Y+2	; 0x02
    19ae:	28 2f       	mov	r18, r24
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	02 2e       	mov	r0, r18
    19b8:	02 c0       	rjmp	.+4      	; 0x19be <GPIO_writePin+0x194>
    19ba:	88 0f       	add	r24, r24
    19bc:	99 1f       	adc	r25, r25
    19be:	0a 94       	dec	r0
    19c0:	e2 f7       	brpl	.-8      	; 0x19ba <GPIO_writePin+0x190>
    19c2:	84 2b       	or	r24, r20
    19c4:	8c 93       	st	X, r24
    19c6:	14 c0       	rjmp	.+40     	; 0x19f0 <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTD,pin_num);
    19c8:	a2 e3       	ldi	r26, 0x32	; 50
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	e2 e3       	ldi	r30, 0x32	; 50
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	48 2f       	mov	r20, r24
    19d4:	8a 81       	ldd	r24, Y+2	; 0x02
    19d6:	28 2f       	mov	r18, r24
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	02 2e       	mov	r0, r18
    19e0:	02 c0       	rjmp	.+4      	; 0x19e6 <GPIO_writePin+0x1bc>
    19e2:	88 0f       	add	r24, r24
    19e4:	99 1f       	adc	r25, r25
    19e6:	0a 94       	dec	r0
    19e8:	e2 f7       	brpl	.-8      	; 0x19e2 <GPIO_writePin+0x1b8>
    19ea:	80 95       	com	r24
    19ec:	84 23       	and	r24, r20
    19ee:	8c 93       	st	X, r24
			}
			break;

		}
	}
}
    19f0:	0f 90       	pop	r0
    19f2:	0f 90       	pop	r0
    19f4:	0f 90       	pop	r0
    19f6:	0f 90       	pop	r0
    19f8:	0f 90       	pop	r0
    19fa:	cf 91       	pop	r28
    19fc:	df 91       	pop	r29
    19fe:	08 95       	ret

00001a00 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{ if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a00:	df 93       	push	r29
    1a02:	cf 93       	push	r28
    1a04:	00 d0       	rcall	.+0      	; 0x1a06 <GPIO_readPin+0x6>
    1a06:	00 d0       	rcall	.+0      	; 0x1a08 <GPIO_readPin+0x8>
    1a08:	00 d0       	rcall	.+0      	; 0x1a0a <GPIO_readPin+0xa>
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
    1a0e:	89 83       	std	Y+1, r24	; 0x01
    1a10:	6a 83       	std	Y+2, r22	; 0x02
    1a12:	8a 81       	ldd	r24, Y+2	; 0x02
    1a14:	88 30       	cpi	r24, 0x08	; 8
    1a16:	08 f0       	brcs	.+2      	; 0x1a1a <GPIO_readPin+0x1a>
    1a18:	85 c0       	rjmp	.+266    	; 0x1b24 <GPIO_readPin+0x124>
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	84 30       	cpi	r24, 0x04	; 4
    1a1e:	08 f0       	brcs	.+2      	; 0x1a22 <GPIO_readPin+0x22>
    1a20:	81 c0       	rjmp	.+258    	; 0x1b24 <GPIO_readPin+0x124>
{
	/* Do Nothing */
}
else
{
	switch ( port_num ){
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
    1a24:	28 2f       	mov	r18, r24
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	3d 83       	std	Y+5, r19	; 0x05
    1a2a:	2c 83       	std	Y+4, r18	; 0x04
    1a2c:	4c 81       	ldd	r20, Y+4	; 0x04
    1a2e:	5d 81       	ldd	r21, Y+5	; 0x05
    1a30:	41 30       	cpi	r20, 0x01	; 1
    1a32:	51 05       	cpc	r21, r1
    1a34:	79 f1       	breq	.+94     	; 0x1a94 <GPIO_readPin+0x94>
    1a36:	8c 81       	ldd	r24, Y+4	; 0x04
    1a38:	9d 81       	ldd	r25, Y+5	; 0x05
    1a3a:	82 30       	cpi	r24, 0x02	; 2
    1a3c:	91 05       	cpc	r25, r1
    1a3e:	34 f4       	brge	.+12     	; 0x1a4c <GPIO_readPin+0x4c>
    1a40:	2c 81       	ldd	r18, Y+4	; 0x04
    1a42:	3d 81       	ldd	r19, Y+5	; 0x05
    1a44:	21 15       	cp	r18, r1
    1a46:	31 05       	cpc	r19, r1
    1a48:	69 f0       	breq	.+26     	; 0x1a64 <GPIO_readPin+0x64>
    1a4a:	6c c0       	rjmp	.+216    	; 0x1b24 <GPIO_readPin+0x124>
    1a4c:	4c 81       	ldd	r20, Y+4	; 0x04
    1a4e:	5d 81       	ldd	r21, Y+5	; 0x05
    1a50:	42 30       	cpi	r20, 0x02	; 2
    1a52:	51 05       	cpc	r21, r1
    1a54:	b9 f1       	breq	.+110    	; 0x1ac4 <GPIO_readPin+0xc4>
    1a56:	8c 81       	ldd	r24, Y+4	; 0x04
    1a58:	9d 81       	ldd	r25, Y+5	; 0x05
    1a5a:	83 30       	cpi	r24, 0x03	; 3
    1a5c:	91 05       	cpc	r25, r1
    1a5e:	09 f4       	brne	.+2      	; 0x1a62 <GPIO_readPin+0x62>
    1a60:	49 c0       	rjmp	.+146    	; 0x1af4 <GPIO_readPin+0xf4>
    1a62:	60 c0       	rjmp	.+192    	; 0x1b24 <GPIO_readPin+0x124>
	case PORTA_ID :


		if(BIT_IS_SET(PINA,pin_num)){
    1a64:	e9 e3       	ldi	r30, 0x39	; 57
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	28 2f       	mov	r18, r24
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a70:	88 2f       	mov	r24, r24
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	a9 01       	movw	r20, r18
    1a76:	02 c0       	rjmp	.+4      	; 0x1a7c <GPIO_readPin+0x7c>
    1a78:	55 95       	asr	r21
    1a7a:	47 95       	ror	r20
    1a7c:	8a 95       	dec	r24
    1a7e:	e2 f7       	brpl	.-8      	; 0x1a78 <GPIO_readPin+0x78>
    1a80:	ca 01       	movw	r24, r20
    1a82:	81 70       	andi	r24, 0x01	; 1
    1a84:	90 70       	andi	r25, 0x00	; 0
    1a86:	88 23       	and	r24, r24
    1a88:	19 f0       	breq	.+6      	; 0x1a90 <GPIO_readPin+0x90>
			return 1;
    1a8a:	51 e0       	ldi	r21, 0x01	; 1
    1a8c:	5b 83       	std	Y+3, r21	; 0x03
    1a8e:	4b c0       	rjmp	.+150    	; 0x1b26 <GPIO_readPin+0x126>
		}
		else{
			return 0;
    1a90:	1b 82       	std	Y+3, r1	; 0x03
    1a92:	49 c0       	rjmp	.+146    	; 0x1b26 <GPIO_readPin+0x126>
		break;

	case PORTB_ID :


		if(BIT_IS_SET(PINB,pin_num)){
    1a94:	e6 e3       	ldi	r30, 0x36	; 54
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	28 2f       	mov	r18, r24
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa0:	88 2f       	mov	r24, r24
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	a9 01       	movw	r20, r18
    1aa6:	02 c0       	rjmp	.+4      	; 0x1aac <GPIO_readPin+0xac>
    1aa8:	55 95       	asr	r21
    1aaa:	47 95       	ror	r20
    1aac:	8a 95       	dec	r24
    1aae:	e2 f7       	brpl	.-8      	; 0x1aa8 <GPIO_readPin+0xa8>
    1ab0:	ca 01       	movw	r24, r20
    1ab2:	81 70       	andi	r24, 0x01	; 1
    1ab4:	90 70       	andi	r25, 0x00	; 0
    1ab6:	88 23       	and	r24, r24
    1ab8:	19 f0       	breq	.+6      	; 0x1ac0 <GPIO_readPin+0xc0>
			return 1;
    1aba:	51 e0       	ldi	r21, 0x01	; 1
    1abc:	5b 83       	std	Y+3, r21	; 0x03
    1abe:	33 c0       	rjmp	.+102    	; 0x1b26 <GPIO_readPin+0x126>
		}
		else{
			return 0;
    1ac0:	1b 82       	std	Y+3, r1	; 0x03
    1ac2:	31 c0       	rjmp	.+98     	; 0x1b26 <GPIO_readPin+0x126>
		break;

	case PORTC_ID :


		if(BIT_IS_SET(PINC,pin_num)){
    1ac4:	e3 e3       	ldi	r30, 0x33	; 51
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	28 2f       	mov	r18, r24
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad0:	88 2f       	mov	r24, r24
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	a9 01       	movw	r20, r18
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <GPIO_readPin+0xdc>
    1ad8:	55 95       	asr	r21
    1ada:	47 95       	ror	r20
    1adc:	8a 95       	dec	r24
    1ade:	e2 f7       	brpl	.-8      	; 0x1ad8 <GPIO_readPin+0xd8>
    1ae0:	ca 01       	movw	r24, r20
    1ae2:	81 70       	andi	r24, 0x01	; 1
    1ae4:	90 70       	andi	r25, 0x00	; 0
    1ae6:	88 23       	and	r24, r24
    1ae8:	19 f0       	breq	.+6      	; 0x1af0 <GPIO_readPin+0xf0>
			return 1;
    1aea:	51 e0       	ldi	r21, 0x01	; 1
    1aec:	5b 83       	std	Y+3, r21	; 0x03
    1aee:	1b c0       	rjmp	.+54     	; 0x1b26 <GPIO_readPin+0x126>
		}
		else{
			return 0;
    1af0:	1b 82       	std	Y+3, r1	; 0x03
    1af2:	19 c0       	rjmp	.+50     	; 0x1b26 <GPIO_readPin+0x126>
		break;

	case PORTD_ID :


		if(BIT_IS_SET(PIND,pin_num)){
    1af4:	e0 e3       	ldi	r30, 0x30	; 48
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	28 2f       	mov	r18, r24
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	8a 81       	ldd	r24, Y+2	; 0x02
    1b00:	88 2f       	mov	r24, r24
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	a9 01       	movw	r20, r18
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <GPIO_readPin+0x10c>
    1b08:	55 95       	asr	r21
    1b0a:	47 95       	ror	r20
    1b0c:	8a 95       	dec	r24
    1b0e:	e2 f7       	brpl	.-8      	; 0x1b08 <GPIO_readPin+0x108>
    1b10:	ca 01       	movw	r24, r20
    1b12:	81 70       	andi	r24, 0x01	; 1
    1b14:	90 70       	andi	r25, 0x00	; 0
    1b16:	88 23       	and	r24, r24
    1b18:	19 f0       	breq	.+6      	; 0x1b20 <GPIO_readPin+0x120>
			return 1;
    1b1a:	51 e0       	ldi	r21, 0x01	; 1
    1b1c:	5b 83       	std	Y+3, r21	; 0x03
    1b1e:	03 c0       	rjmp	.+6      	; 0x1b26 <GPIO_readPin+0x126>
		}
		else{
			return 0;
    1b20:	1b 82       	std	Y+3, r1	; 0x03
    1b22:	01 c0       	rjmp	.+2      	; 0x1b26 <GPIO_readPin+0x126>
    1b24:	02 c0       	rjmp	.+4      	; 0x1b2a <GPIO_readPin+0x12a>
		}
		break;

	}
}
}
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	8e 83       	std	Y+6, r24	; 0x06
    1b2a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b2c:	26 96       	adiw	r28, 0x06	; 6
    1b2e:	0f b6       	in	r0, 0x3f	; 63
    1b30:	f8 94       	cli
    1b32:	de bf       	out	0x3e, r29	; 62
    1b34:	0f be       	out	0x3f, r0	; 63
    1b36:	cd bf       	out	0x3d, r28	; 61
    1b38:	cf 91       	pop	r28
    1b3a:	df 91       	pop	r29
    1b3c:	08 95       	ret

00001b3e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1b3e:	df 93       	push	r29
    1b40:	cf 93       	push	r28
    1b42:	00 d0       	rcall	.+0      	; 0x1b44 <GPIO_setupPortDirection+0x6>
    1b44:	00 d0       	rcall	.+0      	; 0x1b46 <GPIO_setupPortDirection+0x8>
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
    1b4a:	89 83       	std	Y+1, r24	; 0x01
    1b4c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	84 30       	cpi	r24, 0x04	; 4
    1b52:	90 f5       	brcc	.+100    	; 0x1bb8 <GPIO_setupPortDirection+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch ( port_num ){
    1b54:	89 81       	ldd	r24, Y+1	; 0x01
    1b56:	28 2f       	mov	r18, r24
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	3c 83       	std	Y+4, r19	; 0x04
    1b5c:	2b 83       	std	Y+3, r18	; 0x03
    1b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b60:	9c 81       	ldd	r25, Y+4	; 0x04
    1b62:	81 30       	cpi	r24, 0x01	; 1
    1b64:	91 05       	cpc	r25, r1
    1b66:	d1 f0       	breq	.+52     	; 0x1b9c <GPIO_setupPortDirection+0x5e>
    1b68:	2b 81       	ldd	r18, Y+3	; 0x03
    1b6a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b6c:	22 30       	cpi	r18, 0x02	; 2
    1b6e:	31 05       	cpc	r19, r1
    1b70:	2c f4       	brge	.+10     	; 0x1b7c <GPIO_setupPortDirection+0x3e>
    1b72:	8b 81       	ldd	r24, Y+3	; 0x03
    1b74:	9c 81       	ldd	r25, Y+4	; 0x04
    1b76:	00 97       	sbiw	r24, 0x00	; 0
    1b78:	61 f0       	breq	.+24     	; 0x1b92 <GPIO_setupPortDirection+0x54>
    1b7a:	1e c0       	rjmp	.+60     	; 0x1bb8 <GPIO_setupPortDirection+0x7a>
    1b7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b80:	22 30       	cpi	r18, 0x02	; 2
    1b82:	31 05       	cpc	r19, r1
    1b84:	81 f0       	breq	.+32     	; 0x1ba6 <GPIO_setupPortDirection+0x68>
    1b86:	8b 81       	ldd	r24, Y+3	; 0x03
    1b88:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8a:	83 30       	cpi	r24, 0x03	; 3
    1b8c:	91 05       	cpc	r25, r1
    1b8e:	81 f0       	breq	.+32     	; 0x1bb0 <GPIO_setupPortDirection+0x72>
    1b90:	13 c0       	rjmp	.+38     	; 0x1bb8 <GPIO_setupPortDirection+0x7a>
		case PORTA_ID :


			DDRA=direction;
    1b92:	ea e3       	ldi	r30, 0x3A	; 58
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	80 83       	st	Z, r24
    1b9a:	0e c0       	rjmp	.+28     	; 0x1bb8 <GPIO_setupPortDirection+0x7a>
			break;

		case PORTB_ID :


			DDRB=direction;
    1b9c:	e7 e3       	ldi	r30, 0x37	; 55
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba2:	80 83       	st	Z, r24
    1ba4:	09 c0       	rjmp	.+18     	; 0x1bb8 <GPIO_setupPortDirection+0x7a>
			break;

		case PORTC_ID :


			DDRC=direction;
    1ba6:	e4 e3       	ldi	r30, 0x34	; 52
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	80 83       	st	Z, r24
    1bae:	04 c0       	rjmp	.+8      	; 0x1bb8 <GPIO_setupPortDirection+0x7a>
			break;

		case PORTD_ID :


			DDRD=direction;
    1bb0:	e1 e3       	ldi	r30, 0x31	; 49
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb6:	80 83       	st	Z, r24
			break;

		}
	}
}
    1bb8:	0f 90       	pop	r0
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
    1bbe:	0f 90       	pop	r0
    1bc0:	cf 91       	pop	r28
    1bc2:	df 91       	pop	r29
    1bc4:	08 95       	ret

00001bc6 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1bc6:	df 93       	push	r29
    1bc8:	cf 93       	push	r28
    1bca:	00 d0       	rcall	.+0      	; 0x1bcc <GPIO_writePort+0x6>
    1bcc:	00 d0       	rcall	.+0      	; 0x1bce <GPIO_writePort+0x8>
    1bce:	cd b7       	in	r28, 0x3d	; 61
    1bd0:	de b7       	in	r29, 0x3e	; 62
    1bd2:	89 83       	std	Y+1, r24	; 0x01
    1bd4:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
    1bd8:	84 30       	cpi	r24, 0x04	; 4
    1bda:	90 f5       	brcc	.+100    	; 0x1c40 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch ( port_num ){
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	28 2f       	mov	r18, r24
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	3c 83       	std	Y+4, r19	; 0x04
    1be4:	2b 83       	std	Y+3, r18	; 0x03
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bea:	81 30       	cpi	r24, 0x01	; 1
    1bec:	91 05       	cpc	r25, r1
    1bee:	d1 f0       	breq	.+52     	; 0x1c24 <GPIO_writePort+0x5e>
    1bf0:	2b 81       	ldd	r18, Y+3	; 0x03
    1bf2:	3c 81       	ldd	r19, Y+4	; 0x04
    1bf4:	22 30       	cpi	r18, 0x02	; 2
    1bf6:	31 05       	cpc	r19, r1
    1bf8:	2c f4       	brge	.+10     	; 0x1c04 <GPIO_writePort+0x3e>
    1bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfe:	00 97       	sbiw	r24, 0x00	; 0
    1c00:	61 f0       	breq	.+24     	; 0x1c1a <GPIO_writePort+0x54>
    1c02:	1e c0       	rjmp	.+60     	; 0x1c40 <GPIO_writePort+0x7a>
    1c04:	2b 81       	ldd	r18, Y+3	; 0x03
    1c06:	3c 81       	ldd	r19, Y+4	; 0x04
    1c08:	22 30       	cpi	r18, 0x02	; 2
    1c0a:	31 05       	cpc	r19, r1
    1c0c:	81 f0       	breq	.+32     	; 0x1c2e <GPIO_writePort+0x68>
    1c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c10:	9c 81       	ldd	r25, Y+4	; 0x04
    1c12:	83 30       	cpi	r24, 0x03	; 3
    1c14:	91 05       	cpc	r25, r1
    1c16:	81 f0       	breq	.+32     	; 0x1c38 <GPIO_writePort+0x72>
    1c18:	13 c0       	rjmp	.+38     	; 0x1c40 <GPIO_writePort+0x7a>
		case PORTA_ID :


			PORTA=value;
    1c1a:	eb e3       	ldi	r30, 0x3B	; 59
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c20:	80 83       	st	Z, r24
    1c22:	0e c0       	rjmp	.+28     	; 0x1c40 <GPIO_writePort+0x7a>
			break;

		case PORTB_ID :


			PORTB=value;
    1c24:	e8 e3       	ldi	r30, 0x38	; 56
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	80 83       	st	Z, r24
    1c2c:	09 c0       	rjmp	.+18     	; 0x1c40 <GPIO_writePort+0x7a>
			break;

		case PORTC_ID :


			PORTC=value;
    1c2e:	e5 e3       	ldi	r30, 0x35	; 53
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	8a 81       	ldd	r24, Y+2	; 0x02
    1c34:	80 83       	st	Z, r24
    1c36:	04 c0       	rjmp	.+8      	; 0x1c40 <GPIO_writePort+0x7a>
			break;

		case PORTD_ID :


			PORTD=value;
    1c38:	e2 e3       	ldi	r30, 0x32	; 50
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	80 83       	st	Z, r24
			break;

		}
	}
}
    1c40:	0f 90       	pop	r0
    1c42:	0f 90       	pop	r0
    1c44:	0f 90       	pop	r0
    1c46:	0f 90       	pop	r0
    1c48:	cf 91       	pop	r28
    1c4a:	df 91       	pop	r29
    1c4c:	08 95       	ret

00001c4e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1c4e:	df 93       	push	r29
    1c50:	cf 93       	push	r28
    1c52:	00 d0       	rcall	.+0      	; 0x1c54 <GPIO_readPort+0x6>
    1c54:	00 d0       	rcall	.+0      	; 0x1c56 <GPIO_readPort+0x8>
    1c56:	0f 92       	push	r0
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
    1c5c:	89 83       	std	Y+1, r24	; 0x01
	if(port_num >= NUM_OF_PORTS)
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	84 30       	cpi	r24, 0x04	; 4
    1c62:	98 f5       	brcc	.+102    	; 0x1cca <GPIO_readPort+0x7c>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
    1c66:	28 2f       	mov	r18, r24
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	3c 83       	std	Y+4, r19	; 0x04
    1c6c:	2b 83       	std	Y+3, r18	; 0x03
    1c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c70:	9c 81       	ldd	r25, Y+4	; 0x04
    1c72:	81 30       	cpi	r24, 0x01	; 1
    1c74:	91 05       	cpc	r25, r1
    1c76:	d1 f0       	breq	.+52     	; 0x1cac <GPIO_readPort+0x5e>
    1c78:	2b 81       	ldd	r18, Y+3	; 0x03
    1c7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c7c:	22 30       	cpi	r18, 0x02	; 2
    1c7e:	31 05       	cpc	r19, r1
    1c80:	2c f4       	brge	.+10     	; 0x1c8c <GPIO_readPort+0x3e>
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	9c 81       	ldd	r25, Y+4	; 0x04
    1c86:	00 97       	sbiw	r24, 0x00	; 0
    1c88:	61 f0       	breq	.+24     	; 0x1ca2 <GPIO_readPort+0x54>
    1c8a:	1f c0       	rjmp	.+62     	; 0x1cca <GPIO_readPort+0x7c>
    1c8c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c8e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c90:	22 30       	cpi	r18, 0x02	; 2
    1c92:	31 05       	cpc	r19, r1
    1c94:	81 f0       	breq	.+32     	; 0x1cb6 <GPIO_readPort+0x68>
    1c96:	8b 81       	ldd	r24, Y+3	; 0x03
    1c98:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9a:	83 30       	cpi	r24, 0x03	; 3
    1c9c:	91 05       	cpc	r25, r1
    1c9e:	81 f0       	breq	.+32     	; 0x1cc0 <GPIO_readPort+0x72>
    1ca0:	14 c0       	rjmp	.+40     	; 0x1cca <GPIO_readPort+0x7c>
		{
		case PORTA_ID:
			return PINA;
    1ca2:	e9 e3       	ldi	r30, 0x39	; 57
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	90 81       	ld	r25, Z
    1ca8:	9a 83       	std	Y+2, r25	; 0x02
    1caa:	10 c0       	rjmp	.+32     	; 0x1ccc <GPIO_readPort+0x7e>
			break;
		case PORTB_ID:
			return PINB;
    1cac:	e6 e3       	ldi	r30, 0x36	; 54
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	20 81       	ld	r18, Z
    1cb2:	2a 83       	std	Y+2, r18	; 0x02
    1cb4:	0b c0       	rjmp	.+22     	; 0x1ccc <GPIO_readPort+0x7e>
			break;
		case PORTC_ID:
			return PINC;
    1cb6:	e3 e3       	ldi	r30, 0x33	; 51
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	30 81       	ld	r19, Z
    1cbc:	3a 83       	std	Y+2, r19	; 0x02
    1cbe:	06 c0       	rjmp	.+12     	; 0x1ccc <GPIO_readPort+0x7e>
			break;
		case PORTD_ID:
			return PIND;
    1cc0:	e0 e3       	ldi	r30, 0x30	; 48
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	8a 83       	std	Y+2, r24	; 0x02
    1cc8:	01 c0       	rjmp	.+2      	; 0x1ccc <GPIO_readPort+0x7e>
    1cca:	02 c0       	rjmp	.+4      	; 0x1cd0 <GPIO_readPort+0x82>
			break;
		}
	}


}
    1ccc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cce:	9d 83       	std	Y+5, r25	; 0x05
    1cd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd2:	0f 90       	pop	r0
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	08 95       	ret

00001ce2 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1ce2:	df 93       	push	r29
    1ce4:	cf 93       	push	r28
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62
    1cea:	2e 97       	sbiw	r28, 0x0e	; 14
    1cec:	0f b6       	in	r0, 0x3f	; 63
    1cee:	f8 94       	cli
    1cf0:	de bf       	out	0x3e, r29	; 62
    1cf2:	0f be       	out	0x3f, r0	; 63
    1cf4:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	66 e0       	ldi	r22, 0x06	; 6
    1cfa:	41 e0       	ldi	r20, 0x01	; 1
    1cfc:	0e 94 2a 0b 	call	0x1654	; 0x1654 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	67 e0       	ldi	r22, 0x07	; 7
    1d04:	41 e0       	ldi	r20, 0x01	; 1
    1d06:	0e 94 2a 0b 	call	0x1654	; 0x1654 <GPIO_setupPinDirection>
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	a0 ea       	ldi	r26, 0xA0	; 160
    1d10:	b1 e4       	ldi	r27, 0x41	; 65
    1d12:	8b 87       	std	Y+11, r24	; 0x0b
    1d14:	9c 87       	std	Y+12, r25	; 0x0c
    1d16:	ad 87       	std	Y+13, r26	; 0x0d
    1d18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d20:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	4a ef       	ldi	r20, 0xFA	; 250
    1d28:	54 e4       	ldi	r21, 0x44	; 68
    1d2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	8f 83       	std	Y+7, r24	; 0x07
    1d34:	98 87       	std	Y+8, r25	; 0x08
    1d36:	a9 87       	std	Y+9, r26	; 0x09
    1d38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d3c:	78 85       	ldd	r23, Y+8	; 0x08
    1d3e:	89 85       	ldd	r24, Y+9	; 0x09
    1d40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	40 e8       	ldi	r20, 0x80	; 128
    1d48:	5f e3       	ldi	r21, 0x3F	; 63
    1d4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d4e:	88 23       	and	r24, r24
    1d50:	2c f4       	brge	.+10     	; 0x1d5c <LCD_init+0x7a>
		__ticks = 1;
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	9e 83       	std	Y+6, r25	; 0x06
    1d58:	8d 83       	std	Y+5, r24	; 0x05
    1d5a:	3f c0       	rjmp	.+126    	; 0x1dda <LCD_init+0xf8>
	else if (__tmp > 65535)
    1d5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d5e:	78 85       	ldd	r23, Y+8	; 0x08
    1d60:	89 85       	ldd	r24, Y+9	; 0x09
    1d62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	3f ef       	ldi	r19, 0xFF	; 255
    1d68:	4f e7       	ldi	r20, 0x7F	; 127
    1d6a:	57 e4       	ldi	r21, 0x47	; 71
    1d6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d70:	18 16       	cp	r1, r24
    1d72:	4c f5       	brge	.+82     	; 0x1dc6 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d74:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d76:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d78:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	40 e2       	ldi	r20, 0x20	; 32
    1d82:	51 e4       	ldi	r21, 0x41	; 65
    1d84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	bc 01       	movw	r22, r24
    1d8e:	cd 01       	movw	r24, r26
    1d90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	9e 83       	std	Y+6, r25	; 0x06
    1d9a:	8d 83       	std	Y+5, r24	; 0x05
    1d9c:	0f c0       	rjmp	.+30     	; 0x1dbc <LCD_init+0xda>
    1d9e:	88 ec       	ldi	r24, 0xC8	; 200
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	9c 83       	std	Y+4, r25	; 0x04
    1da4:	8b 83       	std	Y+3, r24	; 0x03
    1da6:	8b 81       	ldd	r24, Y+3	; 0x03
    1da8:	9c 81       	ldd	r25, Y+4	; 0x04
    1daa:	01 97       	sbiw	r24, 0x01	; 1
    1dac:	f1 f7       	brne	.-4      	; 0x1daa <LCD_init+0xc8>
    1dae:	9c 83       	std	Y+4, r25	; 0x04
    1db0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db2:	8d 81       	ldd	r24, Y+5	; 0x05
    1db4:	9e 81       	ldd	r25, Y+6	; 0x06
    1db6:	01 97       	sbiw	r24, 0x01	; 1
    1db8:	9e 83       	std	Y+6, r25	; 0x06
    1dba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc0:	00 97       	sbiw	r24, 0x00	; 0
    1dc2:	69 f7       	brne	.-38     	; 0x1d9e <LCD_init+0xbc>
    1dc4:	14 c0       	rjmp	.+40     	; 0x1dee <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc6:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc8:	78 85       	ldd	r23, Y+8	; 0x08
    1dca:	89 85       	ldd	r24, Y+9	; 0x09
    1dcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	9e 83       	std	Y+6, r25	; 0x06
    1dd8:	8d 83       	std	Y+5, r24	; 0x05
    1dda:	8d 81       	ldd	r24, Y+5	; 0x05
    1ddc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dde:	9a 83       	std	Y+2, r25	; 0x02
    1de0:	89 83       	std	Y+1, r24	; 0x01
    1de2:	89 81       	ldd	r24, Y+1	; 0x01
    1de4:	9a 81       	ldd	r25, Y+2	; 0x02
    1de6:	01 97       	sbiw	r24, 0x01	; 1
    1de8:	f1 f7       	brne	.-4      	; 0x1de6 <LCD_init+0x104>
    1dea:	9a 83       	std	Y+2, r25	; 0x02
    1dec:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	6f ef       	ldi	r22, 0xFF	; 255
    1df2:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1df6:	88 e3       	ldi	r24, 0x38	; 56
    1df8:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1dfc:	8c e0       	ldi	r24, 0x0C	; 12
    1dfe:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <LCD_sendCommand>
}
    1e08:	2e 96       	adiw	r28, 0x0e	; 14
    1e0a:	0f b6       	in	r0, 0x3f	; 63
    1e0c:	f8 94       	cli
    1e0e:	de bf       	out	0x3e, r29	; 62
    1e10:	0f be       	out	0x3f, r0	; 63
    1e12:	cd bf       	out	0x3d, r28	; 61
    1e14:	cf 91       	pop	r28
    1e16:	df 91       	pop	r29
    1e18:	08 95       	ret

00001e1a <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1e1a:	df 93       	push	r29
    1e1c:	cf 93       	push	r28
    1e1e:	cd b7       	in	r28, 0x3d	; 61
    1e20:	de b7       	in	r29, 0x3e	; 62
    1e22:	e9 97       	sbiw	r28, 0x39	; 57
    1e24:	0f b6       	in	r0, 0x3f	; 63
    1e26:	f8 94       	cli
    1e28:	de bf       	out	0x3e, r29	; 62
    1e2a:	0f be       	out	0x3f, r0	; 63
    1e2c:	cd bf       	out	0x3d, r28	; 61
    1e2e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	66 e0       	ldi	r22, 0x06	; 6
    1e34:	40 e0       	ldi	r20, 0x00	; 0
    1e36:	0e 94 15 0c 	call	0x182a	; 0x182a <GPIO_writePin>
    1e3a:	80 e0       	ldi	r24, 0x00	; 0
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	a0 e8       	ldi	r26, 0x80	; 128
    1e40:	bf e3       	ldi	r27, 0x3F	; 63
    1e42:	8d ab       	std	Y+53, r24	; 0x35
    1e44:	9e ab       	std	Y+54, r25	; 0x36
    1e46:	af ab       	std	Y+55, r26	; 0x37
    1e48:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e4a:	6d a9       	ldd	r22, Y+53	; 0x35
    1e4c:	7e a9       	ldd	r23, Y+54	; 0x36
    1e4e:	8f a9       	ldd	r24, Y+55	; 0x37
    1e50:	98 ad       	ldd	r25, Y+56	; 0x38
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	4a ef       	ldi	r20, 0xFA	; 250
    1e58:	54 e4       	ldi	r21, 0x44	; 68
    1e5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	89 ab       	std	Y+49, r24	; 0x31
    1e64:	9a ab       	std	Y+50, r25	; 0x32
    1e66:	ab ab       	std	Y+51, r26	; 0x33
    1e68:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e6a:	69 a9       	ldd	r22, Y+49	; 0x31
    1e6c:	7a a9       	ldd	r23, Y+50	; 0x32
    1e6e:	8b a9       	ldd	r24, Y+51	; 0x33
    1e70:	9c a9       	ldd	r25, Y+52	; 0x34
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	40 e8       	ldi	r20, 0x80	; 128
    1e78:	5f e3       	ldi	r21, 0x3F	; 63
    1e7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e7e:	88 23       	and	r24, r24
    1e80:	2c f4       	brge	.+10     	; 0x1e8c <LCD_sendCommand+0x72>
		__ticks = 1;
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	98 ab       	std	Y+48, r25	; 0x30
    1e88:	8f a7       	std	Y+47, r24	; 0x2f
    1e8a:	3f c0       	rjmp	.+126    	; 0x1f0a <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1e8c:	69 a9       	ldd	r22, Y+49	; 0x31
    1e8e:	7a a9       	ldd	r23, Y+50	; 0x32
    1e90:	8b a9       	ldd	r24, Y+51	; 0x33
    1e92:	9c a9       	ldd	r25, Y+52	; 0x34
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	3f ef       	ldi	r19, 0xFF	; 255
    1e98:	4f e7       	ldi	r20, 0x7F	; 127
    1e9a:	57 e4       	ldi	r21, 0x47	; 71
    1e9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ea0:	18 16       	cp	r1, r24
    1ea2:	4c f5       	brge	.+82     	; 0x1ef6 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea4:	6d a9       	ldd	r22, Y+53	; 0x35
    1ea6:	7e a9       	ldd	r23, Y+54	; 0x36
    1ea8:	8f a9       	ldd	r24, Y+55	; 0x37
    1eaa:	98 ad       	ldd	r25, Y+56	; 0x38
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	40 e2       	ldi	r20, 0x20	; 32
    1eb2:	51 e4       	ldi	r21, 0x41	; 65
    1eb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	bc 01       	movw	r22, r24
    1ebe:	cd 01       	movw	r24, r26
    1ec0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	98 ab       	std	Y+48, r25	; 0x30
    1eca:	8f a7       	std	Y+47, r24	; 0x2f
    1ecc:	0f c0       	rjmp	.+30     	; 0x1eec <LCD_sendCommand+0xd2>
    1ece:	88 ec       	ldi	r24, 0xC8	; 200
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	9e a7       	std	Y+46, r25	; 0x2e
    1ed4:	8d a7       	std	Y+45, r24	; 0x2d
    1ed6:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ed8:	9e a5       	ldd	r25, Y+46	; 0x2e
    1eda:	01 97       	sbiw	r24, 0x01	; 1
    1edc:	f1 f7       	brne	.-4      	; 0x1eda <LCD_sendCommand+0xc0>
    1ede:	9e a7       	std	Y+46, r25	; 0x2e
    1ee0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ee4:	98 a9       	ldd	r25, Y+48	; 0x30
    1ee6:	01 97       	sbiw	r24, 0x01	; 1
    1ee8:	98 ab       	std	Y+48, r25	; 0x30
    1eea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eec:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eee:	98 a9       	ldd	r25, Y+48	; 0x30
    1ef0:	00 97       	sbiw	r24, 0x00	; 0
    1ef2:	69 f7       	brne	.-38     	; 0x1ece <LCD_sendCommand+0xb4>
    1ef4:	14 c0       	rjmp	.+40     	; 0x1f1e <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ef8:	7a a9       	ldd	r23, Y+50	; 0x32
    1efa:	8b a9       	ldd	r24, Y+51	; 0x33
    1efc:	9c a9       	ldd	r25, Y+52	; 0x34
    1efe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	98 ab       	std	Y+48, r25	; 0x30
    1f08:	8f a7       	std	Y+47, r24	; 0x2f
    1f0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f0c:	98 a9       	ldd	r25, Y+48	; 0x30
    1f0e:	9c a7       	std	Y+44, r25	; 0x2c
    1f10:	8b a7       	std	Y+43, r24	; 0x2b
    1f12:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f14:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f16:	01 97       	sbiw	r24, 0x01	; 1
    1f18:	f1 f7       	brne	.-4      	; 0x1f16 <LCD_sendCommand+0xfc>
    1f1a:	9c a7       	std	Y+44, r25	; 0x2c
    1f1c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	67 e0       	ldi	r22, 0x07	; 7
    1f22:	41 e0       	ldi	r20, 0x01	; 1
    1f24:	0e 94 15 0c 	call	0x182a	; 0x182a <GPIO_writePin>
    1f28:	80 e0       	ldi	r24, 0x00	; 0
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	a0 e8       	ldi	r26, 0x80	; 128
    1f2e:	bf e3       	ldi	r27, 0x3F	; 63
    1f30:	8f a3       	std	Y+39, r24	; 0x27
    1f32:	98 a7       	std	Y+40, r25	; 0x28
    1f34:	a9 a7       	std	Y+41, r26	; 0x29
    1f36:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f38:	6f a1       	ldd	r22, Y+39	; 0x27
    1f3a:	78 a5       	ldd	r23, Y+40	; 0x28
    1f3c:	89 a5       	ldd	r24, Y+41	; 0x29
    1f3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	4a ef       	ldi	r20, 0xFA	; 250
    1f46:	54 e4       	ldi	r21, 0x44	; 68
    1f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	8b a3       	std	Y+35, r24	; 0x23
    1f52:	9c a3       	std	Y+36, r25	; 0x24
    1f54:	ad a3       	std	Y+37, r26	; 0x25
    1f56:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f58:	6b a1       	ldd	r22, Y+35	; 0x23
    1f5a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f5c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f5e:	9e a1       	ldd	r25, Y+38	; 0x26
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	40 e8       	ldi	r20, 0x80	; 128
    1f66:	5f e3       	ldi	r21, 0x3F	; 63
    1f68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f6c:	88 23       	and	r24, r24
    1f6e:	2c f4       	brge	.+10     	; 0x1f7a <LCD_sendCommand+0x160>
		__ticks = 1;
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	9a a3       	std	Y+34, r25	; 0x22
    1f76:	89 a3       	std	Y+33, r24	; 0x21
    1f78:	3f c0       	rjmp	.+126    	; 0x1ff8 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1f7a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f7c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f7e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f80:	9e a1       	ldd	r25, Y+38	; 0x26
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	3f ef       	ldi	r19, 0xFF	; 255
    1f86:	4f e7       	ldi	r20, 0x7F	; 127
    1f88:	57 e4       	ldi	r21, 0x47	; 71
    1f8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f8e:	18 16       	cp	r1, r24
    1f90:	4c f5       	brge	.+82     	; 0x1fe4 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f92:	6f a1       	ldd	r22, Y+39	; 0x27
    1f94:	78 a5       	ldd	r23, Y+40	; 0x28
    1f96:	89 a5       	ldd	r24, Y+41	; 0x29
    1f98:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	40 e2       	ldi	r20, 0x20	; 32
    1fa0:	51 e4       	ldi	r21, 0x41	; 65
    1fa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	bc 01       	movw	r22, r24
    1fac:	cd 01       	movw	r24, r26
    1fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	9a a3       	std	Y+34, r25	; 0x22
    1fb8:	89 a3       	std	Y+33, r24	; 0x21
    1fba:	0f c0       	rjmp	.+30     	; 0x1fda <LCD_sendCommand+0x1c0>
    1fbc:	88 ec       	ldi	r24, 0xC8	; 200
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	98 a3       	std	Y+32, r25	; 0x20
    1fc2:	8f 8f       	std	Y+31, r24	; 0x1f
    1fc4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fc6:	98 a1       	ldd	r25, Y+32	; 0x20
    1fc8:	01 97       	sbiw	r24, 0x01	; 1
    1fca:	f1 f7       	brne	.-4      	; 0x1fc8 <LCD_sendCommand+0x1ae>
    1fcc:	98 a3       	std	Y+32, r25	; 0x20
    1fce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd0:	89 a1       	ldd	r24, Y+33	; 0x21
    1fd2:	9a a1       	ldd	r25, Y+34	; 0x22
    1fd4:	01 97       	sbiw	r24, 0x01	; 1
    1fd6:	9a a3       	std	Y+34, r25	; 0x22
    1fd8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fda:	89 a1       	ldd	r24, Y+33	; 0x21
    1fdc:	9a a1       	ldd	r25, Y+34	; 0x22
    1fde:	00 97       	sbiw	r24, 0x00	; 0
    1fe0:	69 f7       	brne	.-38     	; 0x1fbc <LCD_sendCommand+0x1a2>
    1fe2:	14 c0       	rjmp	.+40     	; 0x200c <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe4:	6b a1       	ldd	r22, Y+35	; 0x23
    1fe6:	7c a1       	ldd	r23, Y+36	; 0x24
    1fe8:	8d a1       	ldd	r24, Y+37	; 0x25
    1fea:	9e a1       	ldd	r25, Y+38	; 0x26
    1fec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	9a a3       	std	Y+34, r25	; 0x22
    1ff6:	89 a3       	std	Y+33, r24	; 0x21
    1ff8:	89 a1       	ldd	r24, Y+33	; 0x21
    1ffa:	9a a1       	ldd	r25, Y+34	; 0x22
    1ffc:	9e 8f       	std	Y+30, r25	; 0x1e
    1ffe:	8d 8f       	std	Y+29, r24	; 0x1d
    2000:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2002:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2004:	01 97       	sbiw	r24, 0x01	; 1
    2006:	f1 f7       	brne	.-4      	; 0x2004 <LCD_sendCommand+0x1ea>
    2008:	9e 8f       	std	Y+30, r25	; 0x1e
    200a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	69 ad       	ldd	r22, Y+57	; 0x39
    2010:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <GPIO_writePort>
    2014:	80 e0       	ldi	r24, 0x00	; 0
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	a0 e8       	ldi	r26, 0x80	; 128
    201a:	bf e3       	ldi	r27, 0x3F	; 63
    201c:	89 8f       	std	Y+25, r24	; 0x19
    201e:	9a 8f       	std	Y+26, r25	; 0x1a
    2020:	ab 8f       	std	Y+27, r26	; 0x1b
    2022:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2024:	69 8d       	ldd	r22, Y+25	; 0x19
    2026:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2028:	8b 8d       	ldd	r24, Y+27	; 0x1b
    202a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	4a ef       	ldi	r20, 0xFA	; 250
    2032:	54 e4       	ldi	r21, 0x44	; 68
    2034:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	8d 8b       	std	Y+21, r24	; 0x15
    203e:	9e 8b       	std	Y+22, r25	; 0x16
    2040:	af 8b       	std	Y+23, r26	; 0x17
    2042:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2044:	6d 89       	ldd	r22, Y+21	; 0x15
    2046:	7e 89       	ldd	r23, Y+22	; 0x16
    2048:	8f 89       	ldd	r24, Y+23	; 0x17
    204a:	98 8d       	ldd	r25, Y+24	; 0x18
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	40 e8       	ldi	r20, 0x80	; 128
    2052:	5f e3       	ldi	r21, 0x3F	; 63
    2054:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2058:	88 23       	and	r24, r24
    205a:	2c f4       	brge	.+10     	; 0x2066 <LCD_sendCommand+0x24c>
		__ticks = 1;
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	9c 8b       	std	Y+20, r25	; 0x14
    2062:	8b 8b       	std	Y+19, r24	; 0x13
    2064:	3f c0       	rjmp	.+126    	; 0x20e4 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2066:	6d 89       	ldd	r22, Y+21	; 0x15
    2068:	7e 89       	ldd	r23, Y+22	; 0x16
    206a:	8f 89       	ldd	r24, Y+23	; 0x17
    206c:	98 8d       	ldd	r25, Y+24	; 0x18
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	3f ef       	ldi	r19, 0xFF	; 255
    2072:	4f e7       	ldi	r20, 0x7F	; 127
    2074:	57 e4       	ldi	r21, 0x47	; 71
    2076:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    207a:	18 16       	cp	r1, r24
    207c:	4c f5       	brge	.+82     	; 0x20d0 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    207e:	69 8d       	ldd	r22, Y+25	; 0x19
    2080:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2082:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2084:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	40 e2       	ldi	r20, 0x20	; 32
    208c:	51 e4       	ldi	r21, 0x41	; 65
    208e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	bc 01       	movw	r22, r24
    2098:	cd 01       	movw	r24, r26
    209a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	9c 8b       	std	Y+20, r25	; 0x14
    20a4:	8b 8b       	std	Y+19, r24	; 0x13
    20a6:	0f c0       	rjmp	.+30     	; 0x20c6 <LCD_sendCommand+0x2ac>
    20a8:	88 ec       	ldi	r24, 0xC8	; 200
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	9a 8b       	std	Y+18, r25	; 0x12
    20ae:	89 8b       	std	Y+17, r24	; 0x11
    20b0:	89 89       	ldd	r24, Y+17	; 0x11
    20b2:	9a 89       	ldd	r25, Y+18	; 0x12
    20b4:	01 97       	sbiw	r24, 0x01	; 1
    20b6:	f1 f7       	brne	.-4      	; 0x20b4 <LCD_sendCommand+0x29a>
    20b8:	9a 8b       	std	Y+18, r25	; 0x12
    20ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20bc:	8b 89       	ldd	r24, Y+19	; 0x13
    20be:	9c 89       	ldd	r25, Y+20	; 0x14
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	9c 8b       	std	Y+20, r25	; 0x14
    20c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c6:	8b 89       	ldd	r24, Y+19	; 0x13
    20c8:	9c 89       	ldd	r25, Y+20	; 0x14
    20ca:	00 97       	sbiw	r24, 0x00	; 0
    20cc:	69 f7       	brne	.-38     	; 0x20a8 <LCD_sendCommand+0x28e>
    20ce:	14 c0       	rjmp	.+40     	; 0x20f8 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d0:	6d 89       	ldd	r22, Y+21	; 0x15
    20d2:	7e 89       	ldd	r23, Y+22	; 0x16
    20d4:	8f 89       	ldd	r24, Y+23	; 0x17
    20d6:	98 8d       	ldd	r25, Y+24	; 0x18
    20d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	9c 8b       	std	Y+20, r25	; 0x14
    20e2:	8b 8b       	std	Y+19, r24	; 0x13
    20e4:	8b 89       	ldd	r24, Y+19	; 0x13
    20e6:	9c 89       	ldd	r25, Y+20	; 0x14
    20e8:	98 8b       	std	Y+16, r25	; 0x10
    20ea:	8f 87       	std	Y+15, r24	; 0x0f
    20ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ee:	98 89       	ldd	r25, Y+16	; 0x10
    20f0:	01 97       	sbiw	r24, 0x01	; 1
    20f2:	f1 f7       	brne	.-4      	; 0x20f0 <LCD_sendCommand+0x2d6>
    20f4:	98 8b       	std	Y+16, r25	; 0x10
    20f6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	67 e0       	ldi	r22, 0x07	; 7
    20fc:	40 e0       	ldi	r20, 0x00	; 0
    20fe:	0e 94 15 0c 	call	0x182a	; 0x182a <GPIO_writePin>
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	a0 e8       	ldi	r26, 0x80	; 128
    2108:	bf e3       	ldi	r27, 0x3F	; 63
    210a:	8b 87       	std	Y+11, r24	; 0x0b
    210c:	9c 87       	std	Y+12, r25	; 0x0c
    210e:	ad 87       	std	Y+13, r26	; 0x0d
    2110:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2112:	6b 85       	ldd	r22, Y+11	; 0x0b
    2114:	7c 85       	ldd	r23, Y+12	; 0x0c
    2116:	8d 85       	ldd	r24, Y+13	; 0x0d
    2118:	9e 85       	ldd	r25, Y+14	; 0x0e
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	4a ef       	ldi	r20, 0xFA	; 250
    2120:	54 e4       	ldi	r21, 0x44	; 68
    2122:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	8f 83       	std	Y+7, r24	; 0x07
    212c:	98 87       	std	Y+8, r25	; 0x08
    212e:	a9 87       	std	Y+9, r26	; 0x09
    2130:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2132:	6f 81       	ldd	r22, Y+7	; 0x07
    2134:	78 85       	ldd	r23, Y+8	; 0x08
    2136:	89 85       	ldd	r24, Y+9	; 0x09
    2138:	9a 85       	ldd	r25, Y+10	; 0x0a
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	40 e8       	ldi	r20, 0x80	; 128
    2140:	5f e3       	ldi	r21, 0x3F	; 63
    2142:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2146:	88 23       	and	r24, r24
    2148:	2c f4       	brge	.+10     	; 0x2154 <LCD_sendCommand+0x33a>
		__ticks = 1;
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	9e 83       	std	Y+6, r25	; 0x06
    2150:	8d 83       	std	Y+5, r24	; 0x05
    2152:	3f c0       	rjmp	.+126    	; 0x21d2 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2154:	6f 81       	ldd	r22, Y+7	; 0x07
    2156:	78 85       	ldd	r23, Y+8	; 0x08
    2158:	89 85       	ldd	r24, Y+9	; 0x09
    215a:	9a 85       	ldd	r25, Y+10	; 0x0a
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	3f ef       	ldi	r19, 0xFF	; 255
    2160:	4f e7       	ldi	r20, 0x7F	; 127
    2162:	57 e4       	ldi	r21, 0x47	; 71
    2164:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2168:	18 16       	cp	r1, r24
    216a:	4c f5       	brge	.+82     	; 0x21be <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    216c:	6b 85       	ldd	r22, Y+11	; 0x0b
    216e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2170:	8d 85       	ldd	r24, Y+13	; 0x0d
    2172:	9e 85       	ldd	r25, Y+14	; 0x0e
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	40 e2       	ldi	r20, 0x20	; 32
    217a:	51 e4       	ldi	r21, 0x41	; 65
    217c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	bc 01       	movw	r22, r24
    2186:	cd 01       	movw	r24, r26
    2188:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	9e 83       	std	Y+6, r25	; 0x06
    2192:	8d 83       	std	Y+5, r24	; 0x05
    2194:	0f c0       	rjmp	.+30     	; 0x21b4 <LCD_sendCommand+0x39a>
    2196:	88 ec       	ldi	r24, 0xC8	; 200
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	9c 83       	std	Y+4, r25	; 0x04
    219c:	8b 83       	std	Y+3, r24	; 0x03
    219e:	8b 81       	ldd	r24, Y+3	; 0x03
    21a0:	9c 81       	ldd	r25, Y+4	; 0x04
    21a2:	01 97       	sbiw	r24, 0x01	; 1
    21a4:	f1 f7       	brne	.-4      	; 0x21a2 <LCD_sendCommand+0x388>
    21a6:	9c 83       	std	Y+4, r25	; 0x04
    21a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21aa:	8d 81       	ldd	r24, Y+5	; 0x05
    21ac:	9e 81       	ldd	r25, Y+6	; 0x06
    21ae:	01 97       	sbiw	r24, 0x01	; 1
    21b0:	9e 83       	std	Y+6, r25	; 0x06
    21b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b4:	8d 81       	ldd	r24, Y+5	; 0x05
    21b6:	9e 81       	ldd	r25, Y+6	; 0x06
    21b8:	00 97       	sbiw	r24, 0x00	; 0
    21ba:	69 f7       	brne	.-38     	; 0x2196 <LCD_sendCommand+0x37c>
    21bc:	14 c0       	rjmp	.+40     	; 0x21e6 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21be:	6f 81       	ldd	r22, Y+7	; 0x07
    21c0:	78 85       	ldd	r23, Y+8	; 0x08
    21c2:	89 85       	ldd	r24, Y+9	; 0x09
    21c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	9e 83       	std	Y+6, r25	; 0x06
    21d0:	8d 83       	std	Y+5, r24	; 0x05
    21d2:	8d 81       	ldd	r24, Y+5	; 0x05
    21d4:	9e 81       	ldd	r25, Y+6	; 0x06
    21d6:	9a 83       	std	Y+2, r25	; 0x02
    21d8:	89 83       	std	Y+1, r24	; 0x01
    21da:	89 81       	ldd	r24, Y+1	; 0x01
    21dc:	9a 81       	ldd	r25, Y+2	; 0x02
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	f1 f7       	brne	.-4      	; 0x21de <LCD_sendCommand+0x3c4>
    21e2:	9a 83       	std	Y+2, r25	; 0x02
    21e4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    21e6:	e9 96       	adiw	r28, 0x39	; 57
    21e8:	0f b6       	in	r0, 0x3f	; 63
    21ea:	f8 94       	cli
    21ec:	de bf       	out	0x3e, r29	; 62
    21ee:	0f be       	out	0x3f, r0	; 63
    21f0:	cd bf       	out	0x3d, r28	; 61
    21f2:	cf 91       	pop	r28
    21f4:	df 91       	pop	r29
    21f6:	08 95       	ret

000021f8 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    21f8:	df 93       	push	r29
    21fa:	cf 93       	push	r28
    21fc:	cd b7       	in	r28, 0x3d	; 61
    21fe:	de b7       	in	r29, 0x3e	; 62
    2200:	e9 97       	sbiw	r28, 0x39	; 57
    2202:	0f b6       	in	r0, 0x3f	; 63
    2204:	f8 94       	cli
    2206:	de bf       	out	0x3e, r29	; 62
    2208:	0f be       	out	0x3f, r0	; 63
    220a:	cd bf       	out	0x3d, r28	; 61
    220c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	66 e0       	ldi	r22, 0x06	; 6
    2212:	41 e0       	ldi	r20, 0x01	; 1
    2214:	0e 94 15 0c 	call	0x182a	; 0x182a <GPIO_writePin>
    2218:	80 e0       	ldi	r24, 0x00	; 0
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	a0 e8       	ldi	r26, 0x80	; 128
    221e:	bf e3       	ldi	r27, 0x3F	; 63
    2220:	8d ab       	std	Y+53, r24	; 0x35
    2222:	9e ab       	std	Y+54, r25	; 0x36
    2224:	af ab       	std	Y+55, r26	; 0x37
    2226:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2228:	6d a9       	ldd	r22, Y+53	; 0x35
    222a:	7e a9       	ldd	r23, Y+54	; 0x36
    222c:	8f a9       	ldd	r24, Y+55	; 0x37
    222e:	98 ad       	ldd	r25, Y+56	; 0x38
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	4a ef       	ldi	r20, 0xFA	; 250
    2236:	54 e4       	ldi	r21, 0x44	; 68
    2238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	89 ab       	std	Y+49, r24	; 0x31
    2242:	9a ab       	std	Y+50, r25	; 0x32
    2244:	ab ab       	std	Y+51, r26	; 0x33
    2246:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2248:	69 a9       	ldd	r22, Y+49	; 0x31
    224a:	7a a9       	ldd	r23, Y+50	; 0x32
    224c:	8b a9       	ldd	r24, Y+51	; 0x33
    224e:	9c a9       	ldd	r25, Y+52	; 0x34
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	40 e8       	ldi	r20, 0x80	; 128
    2256:	5f e3       	ldi	r21, 0x3F	; 63
    2258:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    225c:	88 23       	and	r24, r24
    225e:	2c f4       	brge	.+10     	; 0x226a <LCD_displayCharacter+0x72>
		__ticks = 1;
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	98 ab       	std	Y+48, r25	; 0x30
    2266:	8f a7       	std	Y+47, r24	; 0x2f
    2268:	3f c0       	rjmp	.+126    	; 0x22e8 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    226a:	69 a9       	ldd	r22, Y+49	; 0x31
    226c:	7a a9       	ldd	r23, Y+50	; 0x32
    226e:	8b a9       	ldd	r24, Y+51	; 0x33
    2270:	9c a9       	ldd	r25, Y+52	; 0x34
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	3f ef       	ldi	r19, 0xFF	; 255
    2276:	4f e7       	ldi	r20, 0x7F	; 127
    2278:	57 e4       	ldi	r21, 0x47	; 71
    227a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    227e:	18 16       	cp	r1, r24
    2280:	4c f5       	brge	.+82     	; 0x22d4 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2282:	6d a9       	ldd	r22, Y+53	; 0x35
    2284:	7e a9       	ldd	r23, Y+54	; 0x36
    2286:	8f a9       	ldd	r24, Y+55	; 0x37
    2288:	98 ad       	ldd	r25, Y+56	; 0x38
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	40 e2       	ldi	r20, 0x20	; 32
    2290:	51 e4       	ldi	r21, 0x41	; 65
    2292:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	bc 01       	movw	r22, r24
    229c:	cd 01       	movw	r24, r26
    229e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	98 ab       	std	Y+48, r25	; 0x30
    22a8:	8f a7       	std	Y+47, r24	; 0x2f
    22aa:	0f c0       	rjmp	.+30     	; 0x22ca <LCD_displayCharacter+0xd2>
    22ac:	88 ec       	ldi	r24, 0xC8	; 200
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	9e a7       	std	Y+46, r25	; 0x2e
    22b2:	8d a7       	std	Y+45, r24	; 0x2d
    22b4:	8d a5       	ldd	r24, Y+45	; 0x2d
    22b6:	9e a5       	ldd	r25, Y+46	; 0x2e
    22b8:	01 97       	sbiw	r24, 0x01	; 1
    22ba:	f1 f7       	brne	.-4      	; 0x22b8 <LCD_displayCharacter+0xc0>
    22bc:	9e a7       	std	Y+46, r25	; 0x2e
    22be:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    22c2:	98 a9       	ldd	r25, Y+48	; 0x30
    22c4:	01 97       	sbiw	r24, 0x01	; 1
    22c6:	98 ab       	std	Y+48, r25	; 0x30
    22c8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    22cc:	98 a9       	ldd	r25, Y+48	; 0x30
    22ce:	00 97       	sbiw	r24, 0x00	; 0
    22d0:	69 f7       	brne	.-38     	; 0x22ac <LCD_displayCharacter+0xb4>
    22d2:	14 c0       	rjmp	.+40     	; 0x22fc <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d4:	69 a9       	ldd	r22, Y+49	; 0x31
    22d6:	7a a9       	ldd	r23, Y+50	; 0x32
    22d8:	8b a9       	ldd	r24, Y+51	; 0x33
    22da:	9c a9       	ldd	r25, Y+52	; 0x34
    22dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	98 ab       	std	Y+48, r25	; 0x30
    22e6:	8f a7       	std	Y+47, r24	; 0x2f
    22e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    22ea:	98 a9       	ldd	r25, Y+48	; 0x30
    22ec:	9c a7       	std	Y+44, r25	; 0x2c
    22ee:	8b a7       	std	Y+43, r24	; 0x2b
    22f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    22f2:	9c a5       	ldd	r25, Y+44	; 0x2c
    22f4:	01 97       	sbiw	r24, 0x01	; 1
    22f6:	f1 f7       	brne	.-4      	; 0x22f4 <LCD_displayCharacter+0xfc>
    22f8:	9c a7       	std	Y+44, r25	; 0x2c
    22fa:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	67 e0       	ldi	r22, 0x07	; 7
    2300:	41 e0       	ldi	r20, 0x01	; 1
    2302:	0e 94 15 0c 	call	0x182a	; 0x182a <GPIO_writePin>
    2306:	80 e0       	ldi	r24, 0x00	; 0
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	a0 e8       	ldi	r26, 0x80	; 128
    230c:	bf e3       	ldi	r27, 0x3F	; 63
    230e:	8f a3       	std	Y+39, r24	; 0x27
    2310:	98 a7       	std	Y+40, r25	; 0x28
    2312:	a9 a7       	std	Y+41, r26	; 0x29
    2314:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2316:	6f a1       	ldd	r22, Y+39	; 0x27
    2318:	78 a5       	ldd	r23, Y+40	; 0x28
    231a:	89 a5       	ldd	r24, Y+41	; 0x29
    231c:	9a a5       	ldd	r25, Y+42	; 0x2a
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	4a ef       	ldi	r20, 0xFA	; 250
    2324:	54 e4       	ldi	r21, 0x44	; 68
    2326:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	8b a3       	std	Y+35, r24	; 0x23
    2330:	9c a3       	std	Y+36, r25	; 0x24
    2332:	ad a3       	std	Y+37, r26	; 0x25
    2334:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2336:	6b a1       	ldd	r22, Y+35	; 0x23
    2338:	7c a1       	ldd	r23, Y+36	; 0x24
    233a:	8d a1       	ldd	r24, Y+37	; 0x25
    233c:	9e a1       	ldd	r25, Y+38	; 0x26
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	40 e8       	ldi	r20, 0x80	; 128
    2344:	5f e3       	ldi	r21, 0x3F	; 63
    2346:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    234a:	88 23       	and	r24, r24
    234c:	2c f4       	brge	.+10     	; 0x2358 <LCD_displayCharacter+0x160>
		__ticks = 1;
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	9a a3       	std	Y+34, r25	; 0x22
    2354:	89 a3       	std	Y+33, r24	; 0x21
    2356:	3f c0       	rjmp	.+126    	; 0x23d6 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2358:	6b a1       	ldd	r22, Y+35	; 0x23
    235a:	7c a1       	ldd	r23, Y+36	; 0x24
    235c:	8d a1       	ldd	r24, Y+37	; 0x25
    235e:	9e a1       	ldd	r25, Y+38	; 0x26
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	3f ef       	ldi	r19, 0xFF	; 255
    2364:	4f e7       	ldi	r20, 0x7F	; 127
    2366:	57 e4       	ldi	r21, 0x47	; 71
    2368:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    236c:	18 16       	cp	r1, r24
    236e:	4c f5       	brge	.+82     	; 0x23c2 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2370:	6f a1       	ldd	r22, Y+39	; 0x27
    2372:	78 a5       	ldd	r23, Y+40	; 0x28
    2374:	89 a5       	ldd	r24, Y+41	; 0x29
    2376:	9a a5       	ldd	r25, Y+42	; 0x2a
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	40 e2       	ldi	r20, 0x20	; 32
    237e:	51 e4       	ldi	r21, 0x41	; 65
    2380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	bc 01       	movw	r22, r24
    238a:	cd 01       	movw	r24, r26
    238c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	9a a3       	std	Y+34, r25	; 0x22
    2396:	89 a3       	std	Y+33, r24	; 0x21
    2398:	0f c0       	rjmp	.+30     	; 0x23b8 <LCD_displayCharacter+0x1c0>
    239a:	88 ec       	ldi	r24, 0xC8	; 200
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	98 a3       	std	Y+32, r25	; 0x20
    23a0:	8f 8f       	std	Y+31, r24	; 0x1f
    23a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23a4:	98 a1       	ldd	r25, Y+32	; 0x20
    23a6:	01 97       	sbiw	r24, 0x01	; 1
    23a8:	f1 f7       	brne	.-4      	; 0x23a6 <LCD_displayCharacter+0x1ae>
    23aa:	98 a3       	std	Y+32, r25	; 0x20
    23ac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ae:	89 a1       	ldd	r24, Y+33	; 0x21
    23b0:	9a a1       	ldd	r25, Y+34	; 0x22
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	9a a3       	std	Y+34, r25	; 0x22
    23b6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b8:	89 a1       	ldd	r24, Y+33	; 0x21
    23ba:	9a a1       	ldd	r25, Y+34	; 0x22
    23bc:	00 97       	sbiw	r24, 0x00	; 0
    23be:	69 f7       	brne	.-38     	; 0x239a <LCD_displayCharacter+0x1a2>
    23c0:	14 c0       	rjmp	.+40     	; 0x23ea <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c2:	6b a1       	ldd	r22, Y+35	; 0x23
    23c4:	7c a1       	ldd	r23, Y+36	; 0x24
    23c6:	8d a1       	ldd	r24, Y+37	; 0x25
    23c8:	9e a1       	ldd	r25, Y+38	; 0x26
    23ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	9a a3       	std	Y+34, r25	; 0x22
    23d4:	89 a3       	std	Y+33, r24	; 0x21
    23d6:	89 a1       	ldd	r24, Y+33	; 0x21
    23d8:	9a a1       	ldd	r25, Y+34	; 0x22
    23da:	9e 8f       	std	Y+30, r25	; 0x1e
    23dc:	8d 8f       	std	Y+29, r24	; 0x1d
    23de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23e2:	01 97       	sbiw	r24, 0x01	; 1
    23e4:	f1 f7       	brne	.-4      	; 0x23e2 <LCD_displayCharacter+0x1ea>
    23e6:	9e 8f       	std	Y+30, r25	; 0x1e
    23e8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	69 ad       	ldd	r22, Y+57	; 0x39
    23ee:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <GPIO_writePort>
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	a0 e8       	ldi	r26, 0x80	; 128
    23f8:	bf e3       	ldi	r27, 0x3F	; 63
    23fa:	89 8f       	std	Y+25, r24	; 0x19
    23fc:	9a 8f       	std	Y+26, r25	; 0x1a
    23fe:	ab 8f       	std	Y+27, r26	; 0x1b
    2400:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2402:	69 8d       	ldd	r22, Y+25	; 0x19
    2404:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2406:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2408:	9c 8d       	ldd	r25, Y+28	; 0x1c
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	4a ef       	ldi	r20, 0xFA	; 250
    2410:	54 e4       	ldi	r21, 0x44	; 68
    2412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	8d 8b       	std	Y+21, r24	; 0x15
    241c:	9e 8b       	std	Y+22, r25	; 0x16
    241e:	af 8b       	std	Y+23, r26	; 0x17
    2420:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2422:	6d 89       	ldd	r22, Y+21	; 0x15
    2424:	7e 89       	ldd	r23, Y+22	; 0x16
    2426:	8f 89       	ldd	r24, Y+23	; 0x17
    2428:	98 8d       	ldd	r25, Y+24	; 0x18
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	40 e8       	ldi	r20, 0x80	; 128
    2430:	5f e3       	ldi	r21, 0x3F	; 63
    2432:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2436:	88 23       	and	r24, r24
    2438:	2c f4       	brge	.+10     	; 0x2444 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	9c 8b       	std	Y+20, r25	; 0x14
    2440:	8b 8b       	std	Y+19, r24	; 0x13
    2442:	3f c0       	rjmp	.+126    	; 0x24c2 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2444:	6d 89       	ldd	r22, Y+21	; 0x15
    2446:	7e 89       	ldd	r23, Y+22	; 0x16
    2448:	8f 89       	ldd	r24, Y+23	; 0x17
    244a:	98 8d       	ldd	r25, Y+24	; 0x18
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	3f ef       	ldi	r19, 0xFF	; 255
    2450:	4f e7       	ldi	r20, 0x7F	; 127
    2452:	57 e4       	ldi	r21, 0x47	; 71
    2454:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2458:	18 16       	cp	r1, r24
    245a:	4c f5       	brge	.+82     	; 0x24ae <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    245c:	69 8d       	ldd	r22, Y+25	; 0x19
    245e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2460:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2462:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	40 e2       	ldi	r20, 0x20	; 32
    246a:	51 e4       	ldi	r21, 0x41	; 65
    246c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	bc 01       	movw	r22, r24
    2476:	cd 01       	movw	r24, r26
    2478:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	9c 8b       	std	Y+20, r25	; 0x14
    2482:	8b 8b       	std	Y+19, r24	; 0x13
    2484:	0f c0       	rjmp	.+30     	; 0x24a4 <LCD_displayCharacter+0x2ac>
    2486:	88 ec       	ldi	r24, 0xC8	; 200
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	9a 8b       	std	Y+18, r25	; 0x12
    248c:	89 8b       	std	Y+17, r24	; 0x11
    248e:	89 89       	ldd	r24, Y+17	; 0x11
    2490:	9a 89       	ldd	r25, Y+18	; 0x12
    2492:	01 97       	sbiw	r24, 0x01	; 1
    2494:	f1 f7       	brne	.-4      	; 0x2492 <LCD_displayCharacter+0x29a>
    2496:	9a 8b       	std	Y+18, r25	; 0x12
    2498:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    249a:	8b 89       	ldd	r24, Y+19	; 0x13
    249c:	9c 89       	ldd	r25, Y+20	; 0x14
    249e:	01 97       	sbiw	r24, 0x01	; 1
    24a0:	9c 8b       	std	Y+20, r25	; 0x14
    24a2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a4:	8b 89       	ldd	r24, Y+19	; 0x13
    24a6:	9c 89       	ldd	r25, Y+20	; 0x14
    24a8:	00 97       	sbiw	r24, 0x00	; 0
    24aa:	69 f7       	brne	.-38     	; 0x2486 <LCD_displayCharacter+0x28e>
    24ac:	14 c0       	rjmp	.+40     	; 0x24d6 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ae:	6d 89       	ldd	r22, Y+21	; 0x15
    24b0:	7e 89       	ldd	r23, Y+22	; 0x16
    24b2:	8f 89       	ldd	r24, Y+23	; 0x17
    24b4:	98 8d       	ldd	r25, Y+24	; 0x18
    24b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	9c 8b       	std	Y+20, r25	; 0x14
    24c0:	8b 8b       	std	Y+19, r24	; 0x13
    24c2:	8b 89       	ldd	r24, Y+19	; 0x13
    24c4:	9c 89       	ldd	r25, Y+20	; 0x14
    24c6:	98 8b       	std	Y+16, r25	; 0x10
    24c8:	8f 87       	std	Y+15, r24	; 0x0f
    24ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    24cc:	98 89       	ldd	r25, Y+16	; 0x10
    24ce:	01 97       	sbiw	r24, 0x01	; 1
    24d0:	f1 f7       	brne	.-4      	; 0x24ce <LCD_displayCharacter+0x2d6>
    24d2:	98 8b       	std	Y+16, r25	; 0x10
    24d4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	67 e0       	ldi	r22, 0x07	; 7
    24da:	40 e0       	ldi	r20, 0x00	; 0
    24dc:	0e 94 15 0c 	call	0x182a	; 0x182a <GPIO_writePin>
    24e0:	80 e0       	ldi	r24, 0x00	; 0
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	a0 e8       	ldi	r26, 0x80	; 128
    24e6:	bf e3       	ldi	r27, 0x3F	; 63
    24e8:	8b 87       	std	Y+11, r24	; 0x0b
    24ea:	9c 87       	std	Y+12, r25	; 0x0c
    24ec:	ad 87       	std	Y+13, r26	; 0x0d
    24ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    24f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    24f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	4a ef       	ldi	r20, 0xFA	; 250
    24fe:	54 e4       	ldi	r21, 0x44	; 68
    2500:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2504:	dc 01       	movw	r26, r24
    2506:	cb 01       	movw	r24, r22
    2508:	8f 83       	std	Y+7, r24	; 0x07
    250a:	98 87       	std	Y+8, r25	; 0x08
    250c:	a9 87       	std	Y+9, r26	; 0x09
    250e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2510:	6f 81       	ldd	r22, Y+7	; 0x07
    2512:	78 85       	ldd	r23, Y+8	; 0x08
    2514:	89 85       	ldd	r24, Y+9	; 0x09
    2516:	9a 85       	ldd	r25, Y+10	; 0x0a
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	40 e8       	ldi	r20, 0x80	; 128
    251e:	5f e3       	ldi	r21, 0x3F	; 63
    2520:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2524:	88 23       	and	r24, r24
    2526:	2c f4       	brge	.+10     	; 0x2532 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	9e 83       	std	Y+6, r25	; 0x06
    252e:	8d 83       	std	Y+5, r24	; 0x05
    2530:	3f c0       	rjmp	.+126    	; 0x25b0 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2532:	6f 81       	ldd	r22, Y+7	; 0x07
    2534:	78 85       	ldd	r23, Y+8	; 0x08
    2536:	89 85       	ldd	r24, Y+9	; 0x09
    2538:	9a 85       	ldd	r25, Y+10	; 0x0a
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	3f ef       	ldi	r19, 0xFF	; 255
    253e:	4f e7       	ldi	r20, 0x7F	; 127
    2540:	57 e4       	ldi	r21, 0x47	; 71
    2542:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2546:	18 16       	cp	r1, r24
    2548:	4c f5       	brge	.+82     	; 0x259c <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    254a:	6b 85       	ldd	r22, Y+11	; 0x0b
    254c:	7c 85       	ldd	r23, Y+12	; 0x0c
    254e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2550:	9e 85       	ldd	r25, Y+14	; 0x0e
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	40 e2       	ldi	r20, 0x20	; 32
    2558:	51 e4       	ldi	r21, 0x41	; 65
    255a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	bc 01       	movw	r22, r24
    2564:	cd 01       	movw	r24, r26
    2566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	9e 83       	std	Y+6, r25	; 0x06
    2570:	8d 83       	std	Y+5, r24	; 0x05
    2572:	0f c0       	rjmp	.+30     	; 0x2592 <LCD_displayCharacter+0x39a>
    2574:	88 ec       	ldi	r24, 0xC8	; 200
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	9c 83       	std	Y+4, r25	; 0x04
    257a:	8b 83       	std	Y+3, r24	; 0x03
    257c:	8b 81       	ldd	r24, Y+3	; 0x03
    257e:	9c 81       	ldd	r25, Y+4	; 0x04
    2580:	01 97       	sbiw	r24, 0x01	; 1
    2582:	f1 f7       	brne	.-4      	; 0x2580 <LCD_displayCharacter+0x388>
    2584:	9c 83       	std	Y+4, r25	; 0x04
    2586:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2588:	8d 81       	ldd	r24, Y+5	; 0x05
    258a:	9e 81       	ldd	r25, Y+6	; 0x06
    258c:	01 97       	sbiw	r24, 0x01	; 1
    258e:	9e 83       	std	Y+6, r25	; 0x06
    2590:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2592:	8d 81       	ldd	r24, Y+5	; 0x05
    2594:	9e 81       	ldd	r25, Y+6	; 0x06
    2596:	00 97       	sbiw	r24, 0x00	; 0
    2598:	69 f7       	brne	.-38     	; 0x2574 <LCD_displayCharacter+0x37c>
    259a:	14 c0       	rjmp	.+40     	; 0x25c4 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    259c:	6f 81       	ldd	r22, Y+7	; 0x07
    259e:	78 85       	ldd	r23, Y+8	; 0x08
    25a0:	89 85       	ldd	r24, Y+9	; 0x09
    25a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	9e 83       	std	Y+6, r25	; 0x06
    25ae:	8d 83       	std	Y+5, r24	; 0x05
    25b0:	8d 81       	ldd	r24, Y+5	; 0x05
    25b2:	9e 81       	ldd	r25, Y+6	; 0x06
    25b4:	9a 83       	std	Y+2, r25	; 0x02
    25b6:	89 83       	std	Y+1, r24	; 0x01
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	9a 81       	ldd	r25, Y+2	; 0x02
    25bc:	01 97       	sbiw	r24, 0x01	; 1
    25be:	f1 f7       	brne	.-4      	; 0x25bc <LCD_displayCharacter+0x3c4>
    25c0:	9a 83       	std	Y+2, r25	; 0x02
    25c2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    25c4:	e9 96       	adiw	r28, 0x39	; 57
    25c6:	0f b6       	in	r0, 0x3f	; 63
    25c8:	f8 94       	cli
    25ca:	de bf       	out	0x3e, r29	; 62
    25cc:	0f be       	out	0x3f, r0	; 63
    25ce:	cd bf       	out	0x3d, r28	; 61
    25d0:	cf 91       	pop	r28
    25d2:	df 91       	pop	r29
    25d4:	08 95       	ret

000025d6 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    25d6:	df 93       	push	r29
    25d8:	cf 93       	push	r28
    25da:	00 d0       	rcall	.+0      	; 0x25dc <LCD_displayString+0x6>
    25dc:	0f 92       	push	r0
    25de:	cd b7       	in	r28, 0x3d	; 61
    25e0:	de b7       	in	r29, 0x3e	; 62
    25e2:	9b 83       	std	Y+3, r25	; 0x03
    25e4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    25e6:	19 82       	std	Y+1, r1	; 0x01
    25e8:	0e c0       	rjmp	.+28     	; 0x2606 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    25ea:	89 81       	ldd	r24, Y+1	; 0x01
    25ec:	28 2f       	mov	r18, r24
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	8a 81       	ldd	r24, Y+2	; 0x02
    25f2:	9b 81       	ldd	r25, Y+3	; 0x03
    25f4:	fc 01       	movw	r30, r24
    25f6:	e2 0f       	add	r30, r18
    25f8:	f3 1f       	adc	r31, r19
    25fa:	80 81       	ld	r24, Z
    25fc:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <LCD_displayCharacter>
		i++;
    2600:	89 81       	ldd	r24, Y+1	; 0x01
    2602:	8f 5f       	subi	r24, 0xFF	; 255
    2604:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2606:	89 81       	ldd	r24, Y+1	; 0x01
    2608:	28 2f       	mov	r18, r24
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	8a 81       	ldd	r24, Y+2	; 0x02
    260e:	9b 81       	ldd	r25, Y+3	; 0x03
    2610:	fc 01       	movw	r30, r24
    2612:	e2 0f       	add	r30, r18
    2614:	f3 1f       	adc	r31, r19
    2616:	80 81       	ld	r24, Z
    2618:	88 23       	and	r24, r24
    261a:	39 f7       	brne	.-50     	; 0x25ea <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    261c:	0f 90       	pop	r0
    261e:	0f 90       	pop	r0
    2620:	0f 90       	pop	r0
    2622:	cf 91       	pop	r28
    2624:	df 91       	pop	r29
    2626:	08 95       	ret

00002628 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2628:	df 93       	push	r29
    262a:	cf 93       	push	r28
    262c:	00 d0       	rcall	.+0      	; 0x262e <LCD_moveCursor+0x6>
    262e:	00 d0       	rcall	.+0      	; 0x2630 <LCD_moveCursor+0x8>
    2630:	0f 92       	push	r0
    2632:	cd b7       	in	r28, 0x3d	; 61
    2634:	de b7       	in	r29, 0x3e	; 62
    2636:	8a 83       	std	Y+2, r24	; 0x02
    2638:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    263a:	8a 81       	ldd	r24, Y+2	; 0x02
    263c:	28 2f       	mov	r18, r24
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	3d 83       	std	Y+5, r19	; 0x05
    2642:	2c 83       	std	Y+4, r18	; 0x04
    2644:	8c 81       	ldd	r24, Y+4	; 0x04
    2646:	9d 81       	ldd	r25, Y+5	; 0x05
    2648:	81 30       	cpi	r24, 0x01	; 1
    264a:	91 05       	cpc	r25, r1
    264c:	c1 f0       	breq	.+48     	; 0x267e <LCD_moveCursor+0x56>
    264e:	2c 81       	ldd	r18, Y+4	; 0x04
    2650:	3d 81       	ldd	r19, Y+5	; 0x05
    2652:	22 30       	cpi	r18, 0x02	; 2
    2654:	31 05       	cpc	r19, r1
    2656:	2c f4       	brge	.+10     	; 0x2662 <LCD_moveCursor+0x3a>
    2658:	8c 81       	ldd	r24, Y+4	; 0x04
    265a:	9d 81       	ldd	r25, Y+5	; 0x05
    265c:	00 97       	sbiw	r24, 0x00	; 0
    265e:	61 f0       	breq	.+24     	; 0x2678 <LCD_moveCursor+0x50>
    2660:	19 c0       	rjmp	.+50     	; 0x2694 <LCD_moveCursor+0x6c>
    2662:	2c 81       	ldd	r18, Y+4	; 0x04
    2664:	3d 81       	ldd	r19, Y+5	; 0x05
    2666:	22 30       	cpi	r18, 0x02	; 2
    2668:	31 05       	cpc	r19, r1
    266a:	69 f0       	breq	.+26     	; 0x2686 <LCD_moveCursor+0x5e>
    266c:	8c 81       	ldd	r24, Y+4	; 0x04
    266e:	9d 81       	ldd	r25, Y+5	; 0x05
    2670:	83 30       	cpi	r24, 0x03	; 3
    2672:	91 05       	cpc	r25, r1
    2674:	61 f0       	breq	.+24     	; 0x268e <LCD_moveCursor+0x66>
    2676:	0e c0       	rjmp	.+28     	; 0x2694 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2678:	8b 81       	ldd	r24, Y+3	; 0x03
    267a:	89 83       	std	Y+1, r24	; 0x01
    267c:	0b c0       	rjmp	.+22     	; 0x2694 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    267e:	8b 81       	ldd	r24, Y+3	; 0x03
    2680:	80 5c       	subi	r24, 0xC0	; 192
    2682:	89 83       	std	Y+1, r24	; 0x01
    2684:	07 c0       	rjmp	.+14     	; 0x2694 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2686:	8b 81       	ldd	r24, Y+3	; 0x03
    2688:	80 5f       	subi	r24, 0xF0	; 240
    268a:	89 83       	std	Y+1, r24	; 0x01
    268c:	03 c0       	rjmp	.+6      	; 0x2694 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    268e:	8b 81       	ldd	r24, Y+3	; 0x03
    2690:	80 5b       	subi	r24, 0xB0	; 176
    2692:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2694:	89 81       	ldd	r24, Y+1	; 0x01
    2696:	80 68       	ori	r24, 0x80	; 128
    2698:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <LCD_sendCommand>
}
    269c:	0f 90       	pop	r0
    269e:	0f 90       	pop	r0
    26a0:	0f 90       	pop	r0
    26a2:	0f 90       	pop	r0
    26a4:	0f 90       	pop	r0
    26a6:	cf 91       	pop	r28
    26a8:	df 91       	pop	r29
    26aa:	08 95       	ret

000026ac <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    26ac:	df 93       	push	r29
    26ae:	cf 93       	push	r28
    26b0:	00 d0       	rcall	.+0      	; 0x26b2 <LCD_displayStringRowColumn+0x6>
    26b2:	00 d0       	rcall	.+0      	; 0x26b4 <LCD_displayStringRowColumn+0x8>
    26b4:	cd b7       	in	r28, 0x3d	; 61
    26b6:	de b7       	in	r29, 0x3e	; 62
    26b8:	89 83       	std	Y+1, r24	; 0x01
    26ba:	6a 83       	std	Y+2, r22	; 0x02
    26bc:	5c 83       	std	Y+4, r21	; 0x04
    26be:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    26c0:	89 81       	ldd	r24, Y+1	; 0x01
    26c2:	6a 81       	ldd	r22, Y+2	; 0x02
    26c4:	0e 94 14 13 	call	0x2628	; 0x2628 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    26c8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ca:	9c 81       	ldd	r25, Y+4	; 0x04
    26cc:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <LCD_displayString>
}
    26d0:	0f 90       	pop	r0
    26d2:	0f 90       	pop	r0
    26d4:	0f 90       	pop	r0
    26d6:	0f 90       	pop	r0
    26d8:	cf 91       	pop	r28
    26da:	df 91       	pop	r29
    26dc:	08 95       	ret

000026de <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    26de:	df 93       	push	r29
    26e0:	cf 93       	push	r28
    26e2:	cd b7       	in	r28, 0x3d	; 61
    26e4:	de b7       	in	r29, 0x3e	; 62
    26e6:	62 97       	sbiw	r28, 0x12	; 18
    26e8:	0f b6       	in	r0, 0x3f	; 63
    26ea:	f8 94       	cli
    26ec:	de bf       	out	0x3e, r29	; 62
    26ee:	0f be       	out	0x3f, r0	; 63
    26f0:	cd bf       	out	0x3d, r28	; 61
    26f2:	9a 8b       	std	Y+18, r25	; 0x12
    26f4:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    26f6:	89 89       	ldd	r24, Y+17	; 0x11
    26f8:	9a 89       	ldd	r25, Y+18	; 0x12
    26fa:	9e 01       	movw	r18, r28
    26fc:	2f 5f       	subi	r18, 0xFF	; 255
    26fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2700:	b9 01       	movw	r22, r18
    2702:	4a e0       	ldi	r20, 0x0A	; 10
    2704:	50 e0       	ldi	r21, 0x00	; 0
    2706:	0e 94 29 16 	call	0x2c52	; 0x2c52 <itoa>
   LCD_displayString(buff); /* Display the string */
    270a:	ce 01       	movw	r24, r28
    270c:	01 96       	adiw	r24, 0x01	; 1
    270e:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <LCD_displayString>
}
    2712:	62 96       	adiw	r28, 0x12	; 18
    2714:	0f b6       	in	r0, 0x3f	; 63
    2716:	f8 94       	cli
    2718:	de bf       	out	0x3e, r29	; 62
    271a:	0f be       	out	0x3f, r0	; 63
    271c:	cd bf       	out	0x3d, r28	; 61
    271e:	cf 91       	pop	r28
    2720:	df 91       	pop	r29
    2722:	08 95       	ret

00002724 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2724:	df 93       	push	r29
    2726:	cf 93       	push	r28
    2728:	cd b7       	in	r28, 0x3d	; 61
    272a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <LCD_sendCommand>
}
    2732:	cf 91       	pop	r28
    2734:	df 91       	pop	r29
    2736:	08 95       	ret

00002738 <TWI_init>:
#include <avr/io.h>



void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    2738:	df 93       	push	r29
    273a:	cf 93       	push	r28
    273c:	00 d0       	rcall	.+0      	; 0x273e <TWI_init+0x6>
    273e:	00 d0       	rcall	.+0      	; 0x2740 <TWI_init+0x8>
    2740:	0f 92       	push	r0
    2742:	cd b7       	in	r28, 0x3d	; 61
    2744:	de b7       	in	r29, 0x3e	; 62
    2746:	9d 83       	std	Y+5, r25	; 0x05
    2748:	8c 83       	std	Y+4, r24	; 0x04
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	uint8 Prescaler;
	sint8 Twbr_value=0;
    274a:	1a 82       	std	Y+2, r1	; 0x02
	uint8 four_pow_prescaler=1;
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	89 83       	std	Y+1, r24	; 0x01
	for(Prescaler=0;Prescaler<4;Prescaler++)
    2750:	1b 82       	std	Y+3, r1	; 0x03
    2752:	40 c0       	rjmp	.+128    	; 0x27d4 <TWI_init+0x9c>
	{
		Twbr_value = F_CPU/((Config_Ptr->bit_rate)*2*four_pow_prescaler)  - 16/(2*four_pow_prescaler);
    2754:	ec 81       	ldd	r30, Y+4	; 0x04
    2756:	fd 81       	ldd	r31, Y+5	; 0x05
    2758:	80 81       	ld	r24, Z
    275a:	91 81       	ldd	r25, Z+1	; 0x01
    275c:	a2 81       	ldd	r26, Z+2	; 0x02
    275e:	b3 81       	ldd	r27, Z+3	; 0x03
    2760:	29 81       	ldd	r18, Y+1	; 0x01
    2762:	22 2f       	mov	r18, r18
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	40 e0       	ldi	r20, 0x00	; 0
    2768:	50 e0       	ldi	r21, 0x00	; 0
    276a:	bc 01       	movw	r22, r24
    276c:	cd 01       	movw	r24, r26
    276e:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__mulsi3>
    2772:	dc 01       	movw	r26, r24
    2774:	cb 01       	movw	r24, r22
    2776:	9c 01       	movw	r18, r24
    2778:	ad 01       	movw	r20, r26
    277a:	22 0f       	add	r18, r18
    277c:	33 1f       	adc	r19, r19
    277e:	44 1f       	adc	r20, r20
    2780:	55 1f       	adc	r21, r21
    2782:	80 e0       	ldi	r24, 0x00	; 0
    2784:	92 e1       	ldi	r25, 0x12	; 18
    2786:	aa e7       	ldi	r26, 0x7A	; 122
    2788:	b0 e0       	ldi	r27, 0x00	; 0
    278a:	bc 01       	movw	r22, r24
    278c:	cd 01       	movw	r24, r26
    278e:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <__udivmodsi4>
    2792:	da 01       	movw	r26, r20
    2794:	c9 01       	movw	r24, r18
    2796:	48 2f       	mov	r20, r24
    2798:	89 81       	ldd	r24, Y+1	; 0x01
    279a:	88 2f       	mov	r24, r24
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	9c 01       	movw	r18, r24
    27a0:	22 0f       	add	r18, r18
    27a2:	33 1f       	adc	r19, r19
    27a4:	80 e1       	ldi	r24, 0x10	; 16
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	b9 01       	movw	r22, r18
    27aa:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <__divmodhi4>
    27ae:	cb 01       	movw	r24, r22
    27b0:	94 2f       	mov	r25, r20
    27b2:	98 1b       	sub	r25, r24
    27b4:	89 2f       	mov	r24, r25
    27b6:	8a 83       	std	Y+2, r24	; 0x02

		if(Twbr_value>0)	// if positive number, break and put that value in TWBR register
    27b8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ba:	18 16       	cp	r1, r24
    27bc:	7c f0       	brlt	.+30     	; 0x27dc <TWI_init+0xa4>
			break;

		four_pow_prescaler *= 4;
    27be:	89 81       	ldd	r24, Y+1	; 0x01
    27c0:	88 2f       	mov	r24, r24
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	88 0f       	add	r24, r24
    27c6:	99 1f       	adc	r25, r25
    27c8:	88 0f       	add	r24, r24
    27ca:	99 1f       	adc	r25, r25
    27cc:	89 83       	std	Y+1, r24	; 0x01
{
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	uint8 Prescaler;
	sint8 Twbr_value=0;
	uint8 four_pow_prescaler=1;
	for(Prescaler=0;Prescaler<4;Prescaler++)
    27ce:	8b 81       	ldd	r24, Y+3	; 0x03
    27d0:	8f 5f       	subi	r24, 0xFF	; 255
    27d2:	8b 83       	std	Y+3, r24	; 0x03
    27d4:	8b 81       	ldd	r24, Y+3	; 0x03
    27d6:	84 30       	cpi	r24, 0x04	; 4
    27d8:	08 f4       	brcc	.+2      	; 0x27dc <TWI_init+0xa4>
    27da:	bc cf       	rjmp	.-136    	; 0x2754 <TWI_init+0x1c>
			break;

		four_pow_prescaler *= 4;
	}

    TWBR = Twbr_value;
    27dc:	e0 e2       	ldi	r30, 0x20	; 32
    27de:	f0 e0       	ldi	r31, 0x00	; 0
    27e0:	8a 81       	ldd	r24, Y+2	; 0x02
    27e2:	80 83       	st	Z, r24
	TWSR = Prescaler;
    27e4:	e1 e2       	ldi	r30, 0x21	; 33
    27e6:	f0 e0       	ldi	r31, 0x00	; 0
    27e8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ea:	80 83       	st	Z, r24

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
  //  TWAR = 0b00000010; // my address = 0x01 :)

	TWAR = (Config_Ptr->address)<<1 ;
    27ec:	a2 e2       	ldi	r26, 0x22	; 34
    27ee:	b0 e0       	ldi	r27, 0x00	; 0
    27f0:	ec 81       	ldd	r30, Y+4	; 0x04
    27f2:	fd 81       	ldd	r31, Y+5	; 0x05
    27f4:	84 81       	ldd	r24, Z+4	; 0x04
    27f6:	88 0f       	add	r24, r24
    27f8:	8c 93       	st	X, r24

    TWCR = (1<<TWEN); /* enable TWI */
    27fa:	e6 e5       	ldi	r30, 0x56	; 86
    27fc:	f0 e0       	ldi	r31, 0x00	; 0
    27fe:	84 e0       	ldi	r24, 0x04	; 4
    2800:	80 83       	st	Z, r24
}
    2802:	0f 90       	pop	r0
    2804:	0f 90       	pop	r0
    2806:	0f 90       	pop	r0
    2808:	0f 90       	pop	r0
    280a:	0f 90       	pop	r0
    280c:	cf 91       	pop	r28
    280e:	df 91       	pop	r29
    2810:	08 95       	ret

00002812 <TWI_start>:

void TWI_start(void)
{
    2812:	df 93       	push	r29
    2814:	cf 93       	push	r28
    2816:	cd b7       	in	r28, 0x3d	; 61
    2818:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    281a:	e6 e5       	ldi	r30, 0x56	; 86
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	84 ea       	ldi	r24, 0xA4	; 164
    2820:	80 83       	st	Z, r24
    /*	Note, we did here 1<<TWEN since we makdeTWCR= ,  why not =|
     * -> because every time we need to reset flags of TWCR registers
     */

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2822:	e6 e5       	ldi	r30, 0x56	; 86
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	80 81       	ld	r24, Z
    2828:	88 23       	and	r24, r24
    282a:	dc f7       	brge	.-10     	; 0x2822 <TWI_start+0x10>
}
    282c:	cf 91       	pop	r28
    282e:	df 91       	pop	r29
    2830:	08 95       	ret

00002832 <TWI_stop>:

void TWI_stop(void)
{
    2832:	df 93       	push	r29
    2834:	cf 93       	push	r28
    2836:	cd b7       	in	r28, 0x3d	; 61
    2838:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    283a:	e6 e5       	ldi	r30, 0x56	; 86
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	84 e9       	ldi	r24, 0x94	; 148
    2840:	80 83       	st	Z, r24
}
    2842:	cf 91       	pop	r28
    2844:	df 91       	pop	r29
    2846:	08 95       	ret

00002848 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2848:	df 93       	push	r29
    284a:	cf 93       	push	r28
    284c:	0f 92       	push	r0
    284e:	cd b7       	in	r28, 0x3d	; 61
    2850:	de b7       	in	r29, 0x3e	; 62
    2852:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2854:	e3 e2       	ldi	r30, 0x23	; 35
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	89 81       	ldd	r24, Y+1	; 0x01
    285a:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    285c:	e6 e5       	ldi	r30, 0x56	; 86
    285e:	f0 e0       	ldi	r31, 0x00	; 0
    2860:	84 e8       	ldi	r24, 0x84	; 132
    2862:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2864:	e6 e5       	ldi	r30, 0x56	; 86
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	80 81       	ld	r24, Z
    286a:	88 23       	and	r24, r24
    286c:	dc f7       	brge	.-10     	; 0x2864 <TWI_writeByte+0x1c>
}
    286e:	0f 90       	pop	r0
    2870:	cf 91       	pop	r28
    2872:	df 91       	pop	r29
    2874:	08 95       	ret

00002876 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2876:	df 93       	push	r29
    2878:	cf 93       	push	r28
    287a:	cd b7       	in	r28, 0x3d	; 61
    287c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    287e:	e6 e5       	ldi	r30, 0x56	; 86
    2880:	f0 e0       	ldi	r31, 0x00	; 0
    2882:	84 ec       	ldi	r24, 0xC4	; 196
    2884:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2886:	e6 e5       	ldi	r30, 0x56	; 86
    2888:	f0 e0       	ldi	r31, 0x00	; 0
    288a:	80 81       	ld	r24, Z
    288c:	88 23       	and	r24, r24
    288e:	dc f7       	brge	.-10     	; 0x2886 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2890:	e3 e2       	ldi	r30, 0x23	; 35
    2892:	f0 e0       	ldi	r31, 0x00	; 0
    2894:	80 81       	ld	r24, Z
}
    2896:	cf 91       	pop	r28
    2898:	df 91       	pop	r29
    289a:	08 95       	ret

0000289c <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    289c:	df 93       	push	r29
    289e:	cf 93       	push	r28
    28a0:	cd b7       	in	r28, 0x3d	; 61
    28a2:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    28a4:	e6 e5       	ldi	r30, 0x56	; 86
    28a6:	f0 e0       	ldi	r31, 0x00	; 0
    28a8:	84 e8       	ldi	r24, 0x84	; 132
    28aa:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    28ac:	e6 e5       	ldi	r30, 0x56	; 86
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
    28b0:	80 81       	ld	r24, Z
    28b2:	88 23       	and	r24, r24
    28b4:	dc f7       	brge	.-10     	; 0x28ac <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    28b6:	e3 e2       	ldi	r30, 0x23	; 35
    28b8:	f0 e0       	ldi	r31, 0x00	; 0
    28ba:	80 81       	ld	r24, Z
}
    28bc:	cf 91       	pop	r28
    28be:	df 91       	pop	r29
    28c0:	08 95       	ret

000028c2 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    28c2:	df 93       	push	r29
    28c4:	cf 93       	push	r28
    28c6:	0f 92       	push	r0
    28c8:	cd b7       	in	r28, 0x3d	; 61
    28ca:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    28cc:	e1 e2       	ldi	r30, 0x21	; 33
    28ce:	f0 e0       	ldi	r31, 0x00	; 0
    28d0:	80 81       	ld	r24, Z
    28d2:	88 7f       	andi	r24, 0xF8	; 248
    28d4:	89 83       	std	Y+1, r24	; 0x01
    return status;
    28d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    28d8:	0f 90       	pop	r0
    28da:	cf 91       	pop	r28
    28dc:	df 91       	pop	r29
    28de:	08 95       	ret

000028e0 <UART_init>:
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */

void UART_init(const UART_ConfigType * Config_Ptr)
{
    28e0:	df 93       	push	r29
    28e2:	cf 93       	push	r28
    28e4:	00 d0       	rcall	.+0      	; 0x28e6 <UART_init+0x6>
    28e6:	00 d0       	rcall	.+0      	; 0x28e8 <UART_init+0x8>
    28e8:	cd b7       	in	r28, 0x3d	; 61
    28ea:	de b7       	in	r29, 0x3e	; 62
    28ec:	9c 83       	std	Y+4, r25	; 0x04
    28ee:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    28f0:	1a 82       	std	Y+2, r1	; 0x02
    28f2:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    28f4:	eb e2       	ldi	r30, 0x2B	; 43
    28f6:	f0 e0       	ldi	r31, 0x00	; 0
    28f8:	82 e0       	ldi	r24, 0x02	; 2
    28fa:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    28fc:	ea e2       	ldi	r30, 0x2A	; 42
    28fe:	f0 e0       	ldi	r31, 0x00	; 0
    2900:	88 e1       	ldi	r24, 0x18	; 24
    2902:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC |= (1<<URSEL);
    2904:	a0 e4       	ldi	r26, 0x40	; 64
    2906:	b0 e0       	ldi	r27, 0x00	; 0
    2908:	e0 e4       	ldi	r30, 0x40	; 64
    290a:	f0 e0       	ldi	r31, 0x00	; 0
    290c:	80 81       	ld	r24, Z
    290e:	80 68       	ori	r24, 0x80	; 128
    2910:	8c 93       	st	X, r24
	UCSRC = ( UCSRC & 0xCF ) | ( (Config_Ptr->parity )<<4 );
    2912:	a0 e4       	ldi	r26, 0x40	; 64
    2914:	b0 e0       	ldi	r27, 0x00	; 0
    2916:	e0 e4       	ldi	r30, 0x40	; 64
    2918:	f0 e0       	ldi	r31, 0x00	; 0
    291a:	80 81       	ld	r24, Z
    291c:	28 2f       	mov	r18, r24
    291e:	2f 7c       	andi	r18, 0xCF	; 207
    2920:	eb 81       	ldd	r30, Y+3	; 0x03
    2922:	fc 81       	ldd	r31, Y+4	; 0x04
    2924:	81 81       	ldd	r24, Z+1	; 0x01
    2926:	88 2f       	mov	r24, r24
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	82 95       	swap	r24
    292c:	92 95       	swap	r25
    292e:	90 7f       	andi	r25, 0xF0	; 240
    2930:	98 27       	eor	r25, r24
    2932:	80 7f       	andi	r24, 0xF0	; 240
    2934:	98 27       	eor	r25, r24
    2936:	82 2b       	or	r24, r18
    2938:	8c 93       	st	X, r24

	UCSRC = ( UCSRC & 0xF7 ) | ( (Config_Ptr->stop_bit )<<3 );
    293a:	a0 e4       	ldi	r26, 0x40	; 64
    293c:	b0 e0       	ldi	r27, 0x00	; 0
    293e:	e0 e4       	ldi	r30, 0x40	; 64
    2940:	f0 e0       	ldi	r31, 0x00	; 0
    2942:	80 81       	ld	r24, Z
    2944:	28 2f       	mov	r18, r24
    2946:	27 7f       	andi	r18, 0xF7	; 247
    2948:	eb 81       	ldd	r30, Y+3	; 0x03
    294a:	fc 81       	ldd	r31, Y+4	; 0x04
    294c:	82 81       	ldd	r24, Z+2	; 0x02
    294e:	88 2f       	mov	r24, r24
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	88 0f       	add	r24, r24
    2954:	99 1f       	adc	r25, r25
    2956:	88 0f       	add	r24, r24
    2958:	99 1f       	adc	r25, r25
    295a:	88 0f       	add	r24, r24
    295c:	99 1f       	adc	r25, r25
    295e:	82 2b       	or	r24, r18
    2960:	8c 93       	st	X, r24

	UCSRC = ( UCSRC & 0xF9 ) | ( (Config_Ptr->bit_data )<<3 );
    2962:	a0 e4       	ldi	r26, 0x40	; 64
    2964:	b0 e0       	ldi	r27, 0x00	; 0
    2966:	e0 e4       	ldi	r30, 0x40	; 64
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	80 81       	ld	r24, Z
    296c:	28 2f       	mov	r18, r24
    296e:	29 7f       	andi	r18, 0xF9	; 249
    2970:	eb 81       	ldd	r30, Y+3	; 0x03
    2972:	fc 81       	ldd	r31, Y+4	; 0x04
    2974:	80 81       	ld	r24, Z
    2976:	88 2f       	mov	r24, r24
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	88 0f       	add	r24, r24
    297c:	99 1f       	adc	r25, r25
    297e:	88 0f       	add	r24, r24
    2980:	99 1f       	adc	r25, r25
    2982:	88 0f       	add	r24, r24
    2984:	99 1f       	adc	r25, r25
    2986:	82 2b       	or	r24, r18
    2988:	8c 93       	st	X, r24



	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    298a:	eb 81       	ldd	r30, Y+3	; 0x03
    298c:	fc 81       	ldd	r31, Y+4	; 0x04
    298e:	83 81       	ldd	r24, Z+3	; 0x03
    2990:	94 81       	ldd	r25, Z+4	; 0x04
    2992:	a5 81       	ldd	r26, Z+5	; 0x05
    2994:	b6 81       	ldd	r27, Z+6	; 0x06
    2996:	88 0f       	add	r24, r24
    2998:	99 1f       	adc	r25, r25
    299a:	aa 1f       	adc	r26, r26
    299c:	bb 1f       	adc	r27, r27
    299e:	88 0f       	add	r24, r24
    29a0:	99 1f       	adc	r25, r25
    29a2:	aa 1f       	adc	r26, r26
    29a4:	bb 1f       	adc	r27, r27
    29a6:	88 0f       	add	r24, r24
    29a8:	99 1f       	adc	r25, r25
    29aa:	aa 1f       	adc	r26, r26
    29ac:	bb 1f       	adc	r27, r27
    29ae:	9c 01       	movw	r18, r24
    29b0:	ad 01       	movw	r20, r26
    29b2:	80 e0       	ldi	r24, 0x00	; 0
    29b4:	92 e1       	ldi	r25, 0x12	; 18
    29b6:	aa e7       	ldi	r26, 0x7A	; 122
    29b8:	b0 e0       	ldi	r27, 0x00	; 0
    29ba:	bc 01       	movw	r22, r24
    29bc:	cd 01       	movw	r24, r26
    29be:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <__udivmodsi4>
    29c2:	da 01       	movw	r26, r20
    29c4:	c9 01       	movw	r24, r18
    29c6:	01 97       	sbiw	r24, 0x01	; 1
    29c8:	9a 83       	std	Y+2, r25	; 0x02
    29ca:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    29cc:	e0 e4       	ldi	r30, 0x40	; 64
    29ce:	f0 e0       	ldi	r31, 0x00	; 0
    29d0:	89 81       	ldd	r24, Y+1	; 0x01
    29d2:	9a 81       	ldd	r25, Y+2	; 0x02
    29d4:	89 2f       	mov	r24, r25
    29d6:	99 27       	eor	r25, r25
    29d8:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    29da:	e9 e2       	ldi	r30, 0x29	; 41
    29dc:	f0 e0       	ldi	r31, 0x00	; 0
    29de:	89 81       	ldd	r24, Y+1	; 0x01
    29e0:	80 83       	st	Z, r24
}
    29e2:	0f 90       	pop	r0
    29e4:	0f 90       	pop	r0
    29e6:	0f 90       	pop	r0
    29e8:	0f 90       	pop	r0
    29ea:	cf 91       	pop	r28
    29ec:	df 91       	pop	r29
    29ee:	08 95       	ret

000029f0 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    29f0:	df 93       	push	r29
    29f2:	cf 93       	push	r28
    29f4:	0f 92       	push	r0
    29f6:	cd b7       	in	r28, 0x3d	; 61
    29f8:	de b7       	in	r29, 0x3e	; 62
    29fa:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    29fc:	eb e2       	ldi	r30, 0x2B	; 43
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	80 81       	ld	r24, Z
    2a02:	88 2f       	mov	r24, r24
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	80 72       	andi	r24, 0x20	; 32
    2a08:	90 70       	andi	r25, 0x00	; 0
    2a0a:	00 97       	sbiw	r24, 0x00	; 0
    2a0c:	b9 f3       	breq	.-18     	; 0x29fc <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2a0e:	ec e2       	ldi	r30, 0x2C	; 44
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	89 81       	ldd	r24, Y+1	; 0x01
    2a14:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2a16:	0f 90       	pop	r0
    2a18:	cf 91       	pop	r28
    2a1a:	df 91       	pop	r29
    2a1c:	08 95       	ret

00002a1e <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2a1e:	df 93       	push	r29
    2a20:	cf 93       	push	r28
    2a22:	cd b7       	in	r28, 0x3d	; 61
    2a24:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2a26:	eb e2       	ldi	r30, 0x2B	; 43
    2a28:	f0 e0       	ldi	r31, 0x00	; 0
    2a2a:	80 81       	ld	r24, Z
    2a2c:	88 23       	and	r24, r24
    2a2e:	dc f7       	brge	.-10     	; 0x2a26 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    2a30:	ec e2       	ldi	r30, 0x2C	; 44
    2a32:	f0 e0       	ldi	r31, 0x00	; 0
    2a34:	80 81       	ld	r24, Z
}
    2a36:	cf 91       	pop	r28
    2a38:	df 91       	pop	r29
    2a3a:	08 95       	ret

00002a3c <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2a3c:	df 93       	push	r29
    2a3e:	cf 93       	push	r28
    2a40:	00 d0       	rcall	.+0      	; 0x2a42 <UART_sendString+0x6>
    2a42:	0f 92       	push	r0
    2a44:	cd b7       	in	r28, 0x3d	; 61
    2a46:	de b7       	in	r29, 0x3e	; 62
    2a48:	9b 83       	std	Y+3, r25	; 0x03
    2a4a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2a4c:	19 82       	std	Y+1, r1	; 0x01
    2a4e:	0e c0       	rjmp	.+28     	; 0x2a6c <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2a50:	89 81       	ldd	r24, Y+1	; 0x01
    2a52:	28 2f       	mov	r18, r24
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	8a 81       	ldd	r24, Y+2	; 0x02
    2a58:	9b 81       	ldd	r25, Y+3	; 0x03
    2a5a:	fc 01       	movw	r30, r24
    2a5c:	e2 0f       	add	r30, r18
    2a5e:	f3 1f       	adc	r31, r19
    2a60:	80 81       	ld	r24, Z
    2a62:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <UART_sendByte>
		i++;
    2a66:	89 81       	ldd	r24, Y+1	; 0x01
    2a68:	8f 5f       	subi	r24, 0xFF	; 255
    2a6a:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2a6c:	89 81       	ldd	r24, Y+1	; 0x01
    2a6e:	28 2f       	mov	r18, r24
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	8a 81       	ldd	r24, Y+2	; 0x02
    2a74:	9b 81       	ldd	r25, Y+3	; 0x03
    2a76:	fc 01       	movw	r30, r24
    2a78:	e2 0f       	add	r30, r18
    2a7a:	f3 1f       	adc	r31, r19
    2a7c:	80 81       	ld	r24, Z
    2a7e:	88 23       	and	r24, r24
    2a80:	39 f7       	brne	.-50     	; 0x2a50 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    2a82:	0f 90       	pop	r0
    2a84:	0f 90       	pop	r0
    2a86:	0f 90       	pop	r0
    2a88:	cf 91       	pop	r28
    2a8a:	df 91       	pop	r29
    2a8c:	08 95       	ret

00002a8e <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2a8e:	0f 93       	push	r16
    2a90:	1f 93       	push	r17
    2a92:	df 93       	push	r29
    2a94:	cf 93       	push	r28
    2a96:	00 d0       	rcall	.+0      	; 0x2a98 <UART_receiveString+0xa>
    2a98:	0f 92       	push	r0
    2a9a:	cd b7       	in	r28, 0x3d	; 61
    2a9c:	de b7       	in	r29, 0x3e	; 62
    2a9e:	9b 83       	std	Y+3, r25	; 0x03
    2aa0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2aa2:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2aa4:	89 81       	ldd	r24, Y+1	; 0x01
    2aa6:	28 2f       	mov	r18, r24
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    2aac:	9b 81       	ldd	r25, Y+3	; 0x03
    2aae:	8c 01       	movw	r16, r24
    2ab0:	02 0f       	add	r16, r18
    2ab2:	13 1f       	adc	r17, r19
    2ab4:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <UART_recieveByte>
    2ab8:	f8 01       	movw	r30, r16
    2aba:	80 83       	st	Z, r24
    2abc:	0f c0       	rjmp	.+30     	; 0x2adc <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2abe:	89 81       	ldd	r24, Y+1	; 0x01
    2ac0:	8f 5f       	subi	r24, 0xFF	; 255
    2ac2:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2ac4:	89 81       	ldd	r24, Y+1	; 0x01
    2ac6:	28 2f       	mov	r18, r24
    2ac8:	30 e0       	ldi	r19, 0x00	; 0
    2aca:	8a 81       	ldd	r24, Y+2	; 0x02
    2acc:	9b 81       	ldd	r25, Y+3	; 0x03
    2ace:	8c 01       	movw	r16, r24
    2ad0:	02 0f       	add	r16, r18
    2ad2:	13 1f       	adc	r17, r19
    2ad4:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <UART_recieveByte>
    2ad8:	f8 01       	movw	r30, r16
    2ada:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2adc:	89 81       	ldd	r24, Y+1	; 0x01
    2ade:	28 2f       	mov	r18, r24
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ae6:	fc 01       	movw	r30, r24
    2ae8:	e2 0f       	add	r30, r18
    2aea:	f3 1f       	adc	r31, r19
    2aec:	80 81       	ld	r24, Z
    2aee:	83 32       	cpi	r24, 0x23	; 35
    2af0:	31 f7       	brne	.-52     	; 0x2abe <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2af2:	89 81       	ldd	r24, Y+1	; 0x01
    2af4:	28 2f       	mov	r18, r24
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	8a 81       	ldd	r24, Y+2	; 0x02
    2afa:	9b 81       	ldd	r25, Y+3	; 0x03
    2afc:	fc 01       	movw	r30, r24
    2afe:	e2 0f       	add	r30, r18
    2b00:	f3 1f       	adc	r31, r19
    2b02:	10 82       	st	Z, r1
}
    2b04:	0f 90       	pop	r0
    2b06:	0f 90       	pop	r0
    2b08:	0f 90       	pop	r0
    2b0a:	cf 91       	pop	r28
    2b0c:	df 91       	pop	r29
    2b0e:	1f 91       	pop	r17
    2b10:	0f 91       	pop	r16
    2b12:	08 95       	ret

00002b14 <__mulsi3>:
    2b14:	62 9f       	mul	r22, r18
    2b16:	d0 01       	movw	r26, r0
    2b18:	73 9f       	mul	r23, r19
    2b1a:	f0 01       	movw	r30, r0
    2b1c:	82 9f       	mul	r24, r18
    2b1e:	e0 0d       	add	r30, r0
    2b20:	f1 1d       	adc	r31, r1
    2b22:	64 9f       	mul	r22, r20
    2b24:	e0 0d       	add	r30, r0
    2b26:	f1 1d       	adc	r31, r1
    2b28:	92 9f       	mul	r25, r18
    2b2a:	f0 0d       	add	r31, r0
    2b2c:	83 9f       	mul	r24, r19
    2b2e:	f0 0d       	add	r31, r0
    2b30:	74 9f       	mul	r23, r20
    2b32:	f0 0d       	add	r31, r0
    2b34:	65 9f       	mul	r22, r21
    2b36:	f0 0d       	add	r31, r0
    2b38:	99 27       	eor	r25, r25
    2b3a:	72 9f       	mul	r23, r18
    2b3c:	b0 0d       	add	r27, r0
    2b3e:	e1 1d       	adc	r30, r1
    2b40:	f9 1f       	adc	r31, r25
    2b42:	63 9f       	mul	r22, r19
    2b44:	b0 0d       	add	r27, r0
    2b46:	e1 1d       	adc	r30, r1
    2b48:	f9 1f       	adc	r31, r25
    2b4a:	bd 01       	movw	r22, r26
    2b4c:	cf 01       	movw	r24, r30
    2b4e:	11 24       	eor	r1, r1
    2b50:	08 95       	ret

00002b52 <__divmodhi4>:
    2b52:	97 fb       	bst	r25, 7
    2b54:	09 2e       	mov	r0, r25
    2b56:	07 26       	eor	r0, r23
    2b58:	0a d0       	rcall	.+20     	; 0x2b6e <__divmodhi4_neg1>
    2b5a:	77 fd       	sbrc	r23, 7
    2b5c:	04 d0       	rcall	.+8      	; 0x2b66 <__divmodhi4_neg2>
    2b5e:	2e d0       	rcall	.+92     	; 0x2bbc <__udivmodhi4>
    2b60:	06 d0       	rcall	.+12     	; 0x2b6e <__divmodhi4_neg1>
    2b62:	00 20       	and	r0, r0
    2b64:	1a f4       	brpl	.+6      	; 0x2b6c <__divmodhi4_exit>

00002b66 <__divmodhi4_neg2>:
    2b66:	70 95       	com	r23
    2b68:	61 95       	neg	r22
    2b6a:	7f 4f       	sbci	r23, 0xFF	; 255

00002b6c <__divmodhi4_exit>:
    2b6c:	08 95       	ret

00002b6e <__divmodhi4_neg1>:
    2b6e:	f6 f7       	brtc	.-4      	; 0x2b6c <__divmodhi4_exit>
    2b70:	90 95       	com	r25
    2b72:	81 95       	neg	r24
    2b74:	9f 4f       	sbci	r25, 0xFF	; 255
    2b76:	08 95       	ret

00002b78 <__udivmodsi4>:
    2b78:	a1 e2       	ldi	r26, 0x21	; 33
    2b7a:	1a 2e       	mov	r1, r26
    2b7c:	aa 1b       	sub	r26, r26
    2b7e:	bb 1b       	sub	r27, r27
    2b80:	fd 01       	movw	r30, r26
    2b82:	0d c0       	rjmp	.+26     	; 0x2b9e <__udivmodsi4_ep>

00002b84 <__udivmodsi4_loop>:
    2b84:	aa 1f       	adc	r26, r26
    2b86:	bb 1f       	adc	r27, r27
    2b88:	ee 1f       	adc	r30, r30
    2b8a:	ff 1f       	adc	r31, r31
    2b8c:	a2 17       	cp	r26, r18
    2b8e:	b3 07       	cpc	r27, r19
    2b90:	e4 07       	cpc	r30, r20
    2b92:	f5 07       	cpc	r31, r21
    2b94:	20 f0       	brcs	.+8      	; 0x2b9e <__udivmodsi4_ep>
    2b96:	a2 1b       	sub	r26, r18
    2b98:	b3 0b       	sbc	r27, r19
    2b9a:	e4 0b       	sbc	r30, r20
    2b9c:	f5 0b       	sbc	r31, r21

00002b9e <__udivmodsi4_ep>:
    2b9e:	66 1f       	adc	r22, r22
    2ba0:	77 1f       	adc	r23, r23
    2ba2:	88 1f       	adc	r24, r24
    2ba4:	99 1f       	adc	r25, r25
    2ba6:	1a 94       	dec	r1
    2ba8:	69 f7       	brne	.-38     	; 0x2b84 <__udivmodsi4_loop>
    2baa:	60 95       	com	r22
    2bac:	70 95       	com	r23
    2bae:	80 95       	com	r24
    2bb0:	90 95       	com	r25
    2bb2:	9b 01       	movw	r18, r22
    2bb4:	ac 01       	movw	r20, r24
    2bb6:	bd 01       	movw	r22, r26
    2bb8:	cf 01       	movw	r24, r30
    2bba:	08 95       	ret

00002bbc <__udivmodhi4>:
    2bbc:	aa 1b       	sub	r26, r26
    2bbe:	bb 1b       	sub	r27, r27
    2bc0:	51 e1       	ldi	r21, 0x11	; 17
    2bc2:	07 c0       	rjmp	.+14     	; 0x2bd2 <__udivmodhi4_ep>

00002bc4 <__udivmodhi4_loop>:
    2bc4:	aa 1f       	adc	r26, r26
    2bc6:	bb 1f       	adc	r27, r27
    2bc8:	a6 17       	cp	r26, r22
    2bca:	b7 07       	cpc	r27, r23
    2bcc:	10 f0       	brcs	.+4      	; 0x2bd2 <__udivmodhi4_ep>
    2bce:	a6 1b       	sub	r26, r22
    2bd0:	b7 0b       	sbc	r27, r23

00002bd2 <__udivmodhi4_ep>:
    2bd2:	88 1f       	adc	r24, r24
    2bd4:	99 1f       	adc	r25, r25
    2bd6:	5a 95       	dec	r21
    2bd8:	a9 f7       	brne	.-22     	; 0x2bc4 <__udivmodhi4_loop>
    2bda:	80 95       	com	r24
    2bdc:	90 95       	com	r25
    2bde:	bc 01       	movw	r22, r24
    2be0:	cd 01       	movw	r24, r26
    2be2:	08 95       	ret

00002be4 <__prologue_saves__>:
    2be4:	2f 92       	push	r2
    2be6:	3f 92       	push	r3
    2be8:	4f 92       	push	r4
    2bea:	5f 92       	push	r5
    2bec:	6f 92       	push	r6
    2bee:	7f 92       	push	r7
    2bf0:	8f 92       	push	r8
    2bf2:	9f 92       	push	r9
    2bf4:	af 92       	push	r10
    2bf6:	bf 92       	push	r11
    2bf8:	cf 92       	push	r12
    2bfa:	df 92       	push	r13
    2bfc:	ef 92       	push	r14
    2bfe:	ff 92       	push	r15
    2c00:	0f 93       	push	r16
    2c02:	1f 93       	push	r17
    2c04:	cf 93       	push	r28
    2c06:	df 93       	push	r29
    2c08:	cd b7       	in	r28, 0x3d	; 61
    2c0a:	de b7       	in	r29, 0x3e	; 62
    2c0c:	ca 1b       	sub	r28, r26
    2c0e:	db 0b       	sbc	r29, r27
    2c10:	0f b6       	in	r0, 0x3f	; 63
    2c12:	f8 94       	cli
    2c14:	de bf       	out	0x3e, r29	; 62
    2c16:	0f be       	out	0x3f, r0	; 63
    2c18:	cd bf       	out	0x3d, r28	; 61
    2c1a:	09 94       	ijmp

00002c1c <__epilogue_restores__>:
    2c1c:	2a 88       	ldd	r2, Y+18	; 0x12
    2c1e:	39 88       	ldd	r3, Y+17	; 0x11
    2c20:	48 88       	ldd	r4, Y+16	; 0x10
    2c22:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c24:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c26:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c28:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c2a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c2c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c2e:	b9 84       	ldd	r11, Y+9	; 0x09
    2c30:	c8 84       	ldd	r12, Y+8	; 0x08
    2c32:	df 80       	ldd	r13, Y+7	; 0x07
    2c34:	ee 80       	ldd	r14, Y+6	; 0x06
    2c36:	fd 80       	ldd	r15, Y+5	; 0x05
    2c38:	0c 81       	ldd	r16, Y+4	; 0x04
    2c3a:	1b 81       	ldd	r17, Y+3	; 0x03
    2c3c:	aa 81       	ldd	r26, Y+2	; 0x02
    2c3e:	b9 81       	ldd	r27, Y+1	; 0x01
    2c40:	ce 0f       	add	r28, r30
    2c42:	d1 1d       	adc	r29, r1
    2c44:	0f b6       	in	r0, 0x3f	; 63
    2c46:	f8 94       	cli
    2c48:	de bf       	out	0x3e, r29	; 62
    2c4a:	0f be       	out	0x3f, r0	; 63
    2c4c:	cd bf       	out	0x3d, r28	; 61
    2c4e:	ed 01       	movw	r28, r26
    2c50:	08 95       	ret

00002c52 <itoa>:
    2c52:	fb 01       	movw	r30, r22
    2c54:	9f 01       	movw	r18, r30
    2c56:	e8 94       	clt
    2c58:	42 30       	cpi	r20, 0x02	; 2
    2c5a:	c4 f0       	brlt	.+48     	; 0x2c8c <itoa+0x3a>
    2c5c:	45 32       	cpi	r20, 0x25	; 37
    2c5e:	b4 f4       	brge	.+44     	; 0x2c8c <itoa+0x3a>
    2c60:	4a 30       	cpi	r20, 0x0A	; 10
    2c62:	29 f4       	brne	.+10     	; 0x2c6e <itoa+0x1c>
    2c64:	97 fb       	bst	r25, 7
    2c66:	1e f4       	brtc	.+6      	; 0x2c6e <itoa+0x1c>
    2c68:	90 95       	com	r25
    2c6a:	81 95       	neg	r24
    2c6c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c6e:	64 2f       	mov	r22, r20
    2c70:	77 27       	eor	r23, r23
    2c72:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <__udivmodhi4>
    2c76:	80 5d       	subi	r24, 0xD0	; 208
    2c78:	8a 33       	cpi	r24, 0x3A	; 58
    2c7a:	0c f0       	brlt	.+2      	; 0x2c7e <itoa+0x2c>
    2c7c:	89 5d       	subi	r24, 0xD9	; 217
    2c7e:	81 93       	st	Z+, r24
    2c80:	cb 01       	movw	r24, r22
    2c82:	00 97       	sbiw	r24, 0x00	; 0
    2c84:	a1 f7       	brne	.-24     	; 0x2c6e <itoa+0x1c>
    2c86:	16 f4       	brtc	.+4      	; 0x2c8c <itoa+0x3a>
    2c88:	5d e2       	ldi	r21, 0x2D	; 45
    2c8a:	51 93       	st	Z+, r21
    2c8c:	10 82       	st	Z, r1
    2c8e:	c9 01       	movw	r24, r18
    2c90:	0c 94 4a 16 	jmp	0x2c94	; 0x2c94 <strrev>

00002c94 <strrev>:
    2c94:	dc 01       	movw	r26, r24
    2c96:	fc 01       	movw	r30, r24
    2c98:	67 2f       	mov	r22, r23
    2c9a:	71 91       	ld	r23, Z+
    2c9c:	77 23       	and	r23, r23
    2c9e:	e1 f7       	brne	.-8      	; 0x2c98 <strrev+0x4>
    2ca0:	32 97       	sbiw	r30, 0x02	; 2
    2ca2:	04 c0       	rjmp	.+8      	; 0x2cac <strrev+0x18>
    2ca4:	7c 91       	ld	r23, X
    2ca6:	6d 93       	st	X+, r22
    2ca8:	70 83       	st	Z, r23
    2caa:	62 91       	ld	r22, -Z
    2cac:	ae 17       	cp	r26, r30
    2cae:	bf 07       	cpc	r27, r31
    2cb0:	c8 f3       	brcs	.-14     	; 0x2ca4 <strrev+0x10>
    2cb2:	08 95       	ret

00002cb4 <_exit>:
    2cb4:	f8 94       	cli

00002cb6 <__stop_program>:
    2cb6:	ff cf       	rjmp	.-2      	; 0x2cb6 <__stop_program>
