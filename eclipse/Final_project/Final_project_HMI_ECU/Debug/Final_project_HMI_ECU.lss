
Final_project_HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009a  00800060  00002e26  00002eba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  008000fa  008000fa  00002f54  2**0
                  ALLOC
  3 .stab         00002b20  00000000  00000000  00002f54  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001102  00000000  00000000  00005a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006b76  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006cb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006e26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000995a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a708  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a868  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000aaf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b2c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 09 0b 	jmp	0x1612	; 0x1612 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e2       	ldi	r30, 0x26	; 38
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3f       	cpi	r26, 0xFA	; 250
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa ef       	ldi	r26, 0xFA	; 250
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 30       	cpi	r26, 0x09	; 9
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 44 09 	call	0x1288	; 0x1288 <main>
      8a:	0c 94 11 17 	jmp	0x2e22	; 0x2e22 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 95 16 	jmp	0x2d2a	; 0x2d2a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 ee       	ldi	r26, 0xE5	; 229
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b1 16 	jmp	0x2d62	; 0x2d62 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 95 16 	jmp	0x2d2a	; 0x2d2a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 ee       	ldi	r24, 0xE5	; 229
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b1 16 	jmp	0x2d62	; 0x2d62 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c1 16 	jmp	0x2d82	; 0x2d82 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <timer_count>:
 ans for store + or - in the system
 tick the counter of the timer "increace every 3 sec"
 success to now if the passwords are matched --> success =1 in this case
 */
// timer call back function
void timer_count (){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	tick++;
     b4e:	80 91 fa 00 	lds	r24, 0x00FA
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 fa 00 	sts	0x00FA, r24

}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <choose_pass>:
/* choose pass function take two passwords from the user
 *  and check if matched or not to set the new password of the system
*/
void choose_pass(void){
     b5e:	0f 93       	push	r16
     b60:	1f 93       	push	r17
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
     b6a:	ea 97       	sbiw	r28, 0x3a	; 58
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	f8 94       	cli
     b70:	de bf       	out	0x3e, r29	; 62
     b72:	0f be       	out	0x3f, r0	; 63
     b74:	cd bf       	out	0x3d, r28	; 61
	int i=0;
     b76:	1a ae       	std	Y+58, r1	; 0x3a
     b78:	19 ae       	std	Y+57, r1	; 0x39
	LCD_clearScreen();
     b7a:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <LCD_clearScreen>
	LCD_moveCursor(0,0);
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	60 e0       	ldi	r22, 0x00	; 0
     b82:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <LCD_moveCursor>
	LCD_displayString("plz enter pass:");
     b86:	80 e6       	ldi	r24, 0x60	; 96
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	0e 94 a8 14 	call	0x2950	; 0x2950 <LCD_displayString>
	for(i=0 ; i<5 ; i++){ // loop to take 5 inputs from the user
     b8e:	1a ae       	std	Y+58, r1	; 0x3a
     b90:	19 ae       	std	Y+57, r1	; 0x39
     b92:	94 c0       	rjmp	.+296    	; 0xcbc <choose_pass+0x15e>
		while(KEYPAD_getPressedKey()==13);
     b94:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <KEYPAD_getPressedKey>
     b98:	8d 30       	cpi	r24, 0x0D	; 13
     b9a:	e1 f3       	breq	.-8      	; 0xb94 <choose_pass+0x36>
		pass[i]=KEYPAD_getPressedKey(); //store the inputs in pass array
     b9c:	09 ad       	ldd	r16, Y+57	; 0x39
     b9e:	1a ad       	ldd	r17, Y+58	; 0x3a
     ba0:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <KEYPAD_getPressedKey>
     ba4:	f8 01       	movw	r30, r16
     ba6:	ed 5f       	subi	r30, 0xFD	; 253
     ba8:	fe 4f       	sbci	r31, 0xFE	; 254
     baa:	80 83       	st	Z, r24

		LCD_moveCursor(1,i);
     bac:	99 ad       	ldd	r25, Y+57	; 0x39
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	69 2f       	mov	r22, r25
     bb2:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <LCD_moveCursor>
		LCD_displayString("*"); //display * with each press
     bb6:	80 e7       	ldi	r24, 0x70	; 112
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	0e 94 a8 14 	call	0x2950	; 0x2950 <LCD_displayString>
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	aa ef       	ldi	r26, 0xFA	; 250
     bc4:	b3 e4       	ldi	r27, 0x43	; 67
     bc6:	8d ab       	std	Y+53, r24	; 0x35
     bc8:	9e ab       	std	Y+54, r25	; 0x36
     bca:	af ab       	std	Y+55, r26	; 0x37
     bcc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bce:	6d a9       	ldd	r22, Y+53	; 0x35
     bd0:	7e a9       	ldd	r23, Y+54	; 0x36
     bd2:	8f a9       	ldd	r24, Y+55	; 0x37
     bd4:	98 ad       	ldd	r25, Y+56	; 0x38
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	4a ef       	ldi	r20, 0xFA	; 250
     bdc:	54 e4       	ldi	r21, 0x44	; 68
     bde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     be2:	dc 01       	movw	r26, r24
     be4:	cb 01       	movw	r24, r22
     be6:	89 ab       	std	Y+49, r24	; 0x31
     be8:	9a ab       	std	Y+50, r25	; 0x32
     bea:	ab ab       	std	Y+51, r26	; 0x33
     bec:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     bee:	69 a9       	ldd	r22, Y+49	; 0x31
     bf0:	7a a9       	ldd	r23, Y+50	; 0x32
     bf2:	8b a9       	ldd	r24, Y+51	; 0x33
     bf4:	9c a9       	ldd	r25, Y+52	; 0x34
     bf6:	20 e0       	ldi	r18, 0x00	; 0
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	40 e8       	ldi	r20, 0x80	; 128
     bfc:	5f e3       	ldi	r21, 0x3F	; 63
     bfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c02:	88 23       	and	r24, r24
     c04:	2c f4       	brge	.+10     	; 0xc10 <choose_pass+0xb2>
		__ticks = 1;
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	98 ab       	std	Y+48, r25	; 0x30
     c0c:	8f a7       	std	Y+47, r24	; 0x2f
     c0e:	3f c0       	rjmp	.+126    	; 0xc8e <choose_pass+0x130>
	else if (__tmp > 65535)
     c10:	69 a9       	ldd	r22, Y+49	; 0x31
     c12:	7a a9       	ldd	r23, Y+50	; 0x32
     c14:	8b a9       	ldd	r24, Y+51	; 0x33
     c16:	9c a9       	ldd	r25, Y+52	; 0x34
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	3f ef       	ldi	r19, 0xFF	; 255
     c1c:	4f e7       	ldi	r20, 0x7F	; 127
     c1e:	57 e4       	ldi	r21, 0x47	; 71
     c20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c24:	18 16       	cp	r1, r24
     c26:	4c f5       	brge	.+82     	; 0xc7a <choose_pass+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c28:	6d a9       	ldd	r22, Y+53	; 0x35
     c2a:	7e a9       	ldd	r23, Y+54	; 0x36
     c2c:	8f a9       	ldd	r24, Y+55	; 0x37
     c2e:	98 ad       	ldd	r25, Y+56	; 0x38
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	40 e2       	ldi	r20, 0x20	; 32
     c36:	51 e4       	ldi	r21, 0x41	; 65
     c38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c3c:	dc 01       	movw	r26, r24
     c3e:	cb 01       	movw	r24, r22
     c40:	bc 01       	movw	r22, r24
     c42:	cd 01       	movw	r24, r26
     c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c48:	dc 01       	movw	r26, r24
     c4a:	cb 01       	movw	r24, r22
     c4c:	98 ab       	std	Y+48, r25	; 0x30
     c4e:	8f a7       	std	Y+47, r24	; 0x2f
     c50:	0f c0       	rjmp	.+30     	; 0xc70 <choose_pass+0x112>
     c52:	88 ec       	ldi	r24, 0xC8	; 200
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	9e a7       	std	Y+46, r25	; 0x2e
     c58:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c5a:	8d a5       	ldd	r24, Y+45	; 0x2d
     c5c:	9e a5       	ldd	r25, Y+46	; 0x2e
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <choose_pass+0x100>
     c62:	9e a7       	std	Y+46, r25	; 0x2e
     c64:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c66:	8f a5       	ldd	r24, Y+47	; 0x2f
     c68:	98 a9       	ldd	r25, Y+48	; 0x30
     c6a:	01 97       	sbiw	r24, 0x01	; 1
     c6c:	98 ab       	std	Y+48, r25	; 0x30
     c6e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c70:	8f a5       	ldd	r24, Y+47	; 0x2f
     c72:	98 a9       	ldd	r25, Y+48	; 0x30
     c74:	00 97       	sbiw	r24, 0x00	; 0
     c76:	69 f7       	brne	.-38     	; 0xc52 <choose_pass+0xf4>
     c78:	14 c0       	rjmp	.+40     	; 0xca2 <choose_pass+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c7a:	69 a9       	ldd	r22, Y+49	; 0x31
     c7c:	7a a9       	ldd	r23, Y+50	; 0x32
     c7e:	8b a9       	ldd	r24, Y+51	; 0x33
     c80:	9c a9       	ldd	r25, Y+52	; 0x34
     c82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c86:	dc 01       	movw	r26, r24
     c88:	cb 01       	movw	r24, r22
     c8a:	98 ab       	std	Y+48, r25	; 0x30
     c8c:	8f a7       	std	Y+47, r24	; 0x2f
     c8e:	8f a5       	ldd	r24, Y+47	; 0x2f
     c90:	98 a9       	ldd	r25, Y+48	; 0x30
     c92:	9c a7       	std	Y+44, r25	; 0x2c
     c94:	8b a7       	std	Y+43, r24	; 0x2b
     c96:	8b a5       	ldd	r24, Y+43	; 0x2b
     c98:	9c a5       	ldd	r25, Y+44	; 0x2c
     c9a:	01 97       	sbiw	r24, 0x01	; 1
     c9c:	f1 f7       	brne	.-4      	; 0xc9a <choose_pass+0x13c>
     c9e:	9c a7       	std	Y+44, r25	; 0x2c
     ca0:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(500);
		//_delay_ms(500);
		//while(UART_recieveByte() != MC2_READY){}
		UART_sendByte(pass[i]); //send password byte by byte to the control ecu
     ca2:	89 ad       	ldd	r24, Y+57	; 0x39
     ca4:	9a ad       	ldd	r25, Y+58	; 0x3a
     ca6:	fc 01       	movw	r30, r24
     ca8:	ed 5f       	subi	r30, 0xFD	; 253
     caa:	fe 4f       	sbci	r31, 0xFE	; 254
     cac:	80 81       	ld	r24, Z
     cae:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <UART_sendByte>
void choose_pass(void){
	int i=0;
	LCD_clearScreen();
	LCD_moveCursor(0,0);
	LCD_displayString("plz enter pass:");
	for(i=0 ; i<5 ; i++){ // loop to take 5 inputs from the user
     cb2:	89 ad       	ldd	r24, Y+57	; 0x39
     cb4:	9a ad       	ldd	r25, Y+58	; 0x3a
     cb6:	01 96       	adiw	r24, 0x01	; 1
     cb8:	9a af       	std	Y+58, r25	; 0x3a
     cba:	89 af       	std	Y+57, r24	; 0x39
     cbc:	89 ad       	ldd	r24, Y+57	; 0x39
     cbe:	9a ad       	ldd	r25, Y+58	; 0x3a
     cc0:	85 30       	cpi	r24, 0x05	; 5
     cc2:	91 05       	cpc	r25, r1
     cc4:	0c f4       	brge	.+2      	; 0xcc8 <choose_pass+0x16a>
     cc6:	66 cf       	rjmp	.-308    	; 0xb94 <choose_pass+0x36>
		_delay_ms(500);
		//_delay_ms(500);
		//while(UART_recieveByte() != MC2_READY){}
		UART_sendByte(pass[i]); //send password byte by byte to the control ecu
	}
	while(KEYPAD_getPressedKey()!=13); // polling until press enter
     cc8:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <KEYPAD_getPressedKey>
     ccc:	8d 30       	cpi	r24, 0x0D	; 13
     cce:	e1 f7       	brne	.-8      	; 0xcc8 <choose_pass+0x16a>
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	aa ef       	ldi	r26, 0xFA	; 250
     cd6:	b3 e4       	ldi	r27, 0x43	; 67
     cd8:	8f a3       	std	Y+39, r24	; 0x27
     cda:	98 a7       	std	Y+40, r25	; 0x28
     cdc:	a9 a7       	std	Y+41, r26	; 0x29
     cde:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ce0:	6f a1       	ldd	r22, Y+39	; 0x27
     ce2:	78 a5       	ldd	r23, Y+40	; 0x28
     ce4:	89 a5       	ldd	r24, Y+41	; 0x29
     ce6:	9a a5       	ldd	r25, Y+42	; 0x2a
     ce8:	20 e0       	ldi	r18, 0x00	; 0
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	4a ef       	ldi	r20, 0xFA	; 250
     cee:	54 e4       	ldi	r21, 0x44	; 68
     cf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cf4:	dc 01       	movw	r26, r24
     cf6:	cb 01       	movw	r24, r22
     cf8:	8b a3       	std	Y+35, r24	; 0x23
     cfa:	9c a3       	std	Y+36, r25	; 0x24
     cfc:	ad a3       	std	Y+37, r26	; 0x25
     cfe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     d00:	6b a1       	ldd	r22, Y+35	; 0x23
     d02:	7c a1       	ldd	r23, Y+36	; 0x24
     d04:	8d a1       	ldd	r24, Y+37	; 0x25
     d06:	9e a1       	ldd	r25, Y+38	; 0x26
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	40 e8       	ldi	r20, 0x80	; 128
     d0e:	5f e3       	ldi	r21, 0x3F	; 63
     d10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d14:	88 23       	and	r24, r24
     d16:	2c f4       	brge	.+10     	; 0xd22 <choose_pass+0x1c4>
		__ticks = 1;
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	9a a3       	std	Y+34, r25	; 0x22
     d1e:	89 a3       	std	Y+33, r24	; 0x21
     d20:	3f c0       	rjmp	.+126    	; 0xda0 <choose_pass+0x242>
	else if (__tmp > 65535)
     d22:	6b a1       	ldd	r22, Y+35	; 0x23
     d24:	7c a1       	ldd	r23, Y+36	; 0x24
     d26:	8d a1       	ldd	r24, Y+37	; 0x25
     d28:	9e a1       	ldd	r25, Y+38	; 0x26
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	3f ef       	ldi	r19, 0xFF	; 255
     d2e:	4f e7       	ldi	r20, 0x7F	; 127
     d30:	57 e4       	ldi	r21, 0x47	; 71
     d32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d36:	18 16       	cp	r1, r24
     d38:	4c f5       	brge	.+82     	; 0xd8c <choose_pass+0x22e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d3a:	6f a1       	ldd	r22, Y+39	; 0x27
     d3c:	78 a5       	ldd	r23, Y+40	; 0x28
     d3e:	89 a5       	ldd	r24, Y+41	; 0x29
     d40:	9a a5       	ldd	r25, Y+42	; 0x2a
     d42:	20 e0       	ldi	r18, 0x00	; 0
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	40 e2       	ldi	r20, 0x20	; 32
     d48:	51 e4       	ldi	r21, 0x41	; 65
     d4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d4e:	dc 01       	movw	r26, r24
     d50:	cb 01       	movw	r24, r22
     d52:	bc 01       	movw	r22, r24
     d54:	cd 01       	movw	r24, r26
     d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d5a:	dc 01       	movw	r26, r24
     d5c:	cb 01       	movw	r24, r22
     d5e:	9a a3       	std	Y+34, r25	; 0x22
     d60:	89 a3       	std	Y+33, r24	; 0x21
     d62:	0f c0       	rjmp	.+30     	; 0xd82 <choose_pass+0x224>
     d64:	88 ec       	ldi	r24, 0xC8	; 200
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	98 a3       	std	Y+32, r25	; 0x20
     d6a:	8f 8f       	std	Y+31, r24	; 0x1f
     d6c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d6e:	98 a1       	ldd	r25, Y+32	; 0x20
     d70:	01 97       	sbiw	r24, 0x01	; 1
     d72:	f1 f7       	brne	.-4      	; 0xd70 <choose_pass+0x212>
     d74:	98 a3       	std	Y+32, r25	; 0x20
     d76:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d78:	89 a1       	ldd	r24, Y+33	; 0x21
     d7a:	9a a1       	ldd	r25, Y+34	; 0x22
     d7c:	01 97       	sbiw	r24, 0x01	; 1
     d7e:	9a a3       	std	Y+34, r25	; 0x22
     d80:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d82:	89 a1       	ldd	r24, Y+33	; 0x21
     d84:	9a a1       	ldd	r25, Y+34	; 0x22
     d86:	00 97       	sbiw	r24, 0x00	; 0
     d88:	69 f7       	brne	.-38     	; 0xd64 <choose_pass+0x206>
     d8a:	14 c0       	rjmp	.+40     	; 0xdb4 <choose_pass+0x256>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d8c:	6b a1       	ldd	r22, Y+35	; 0x23
     d8e:	7c a1       	ldd	r23, Y+36	; 0x24
     d90:	8d a1       	ldd	r24, Y+37	; 0x25
     d92:	9e a1       	ldd	r25, Y+38	; 0x26
     d94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d98:	dc 01       	movw	r26, r24
     d9a:	cb 01       	movw	r24, r22
     d9c:	9a a3       	std	Y+34, r25	; 0x22
     d9e:	89 a3       	std	Y+33, r24	; 0x21
     da0:	89 a1       	ldd	r24, Y+33	; 0x21
     da2:	9a a1       	ldd	r25, Y+34	; 0x22
     da4:	9e 8f       	std	Y+30, r25	; 0x1e
     da6:	8d 8f       	std	Y+29, r24	; 0x1d
     da8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     daa:	9e 8d       	ldd	r25, Y+30	; 0x1e
     dac:	01 97       	sbiw	r24, 0x01	; 1
     dae:	f1 f7       	brne	.-4      	; 0xdac <choose_pass+0x24e>
     db0:	9e 8f       	std	Y+30, r25	; 0x1e
     db2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500);
	LCD_clearScreen();
     db4:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <LCD_clearScreen>
	LCD_moveCursor(0,0);
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	60 e0       	ldi	r22, 0x00	; 0
     dbc:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <LCD_moveCursor>
	LCD_displayString("plz re-enter the:");
     dc0:	82 e7       	ldi	r24, 0x72	; 114
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	0e 94 a8 14 	call	0x2950	; 0x2950 <LCD_displayString>
	LCD_moveCursor(1,0);
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	60 e0       	ldi	r22, 0x00	; 0
     dcc:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <LCD_moveCursor>
	LCD_displayString("same pass:");
     dd0:	84 e8       	ldi	r24, 0x84	; 132
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	0e 94 a8 14 	call	0x2950	; 0x2950 <LCD_displayString>
	for(i=0 ; i<5 ; i++){ // loop to take 5 inputs from the user
     dd8:	1a ae       	std	Y+58, r1	; 0x3a
     dda:	19 ae       	std	Y+57, r1	; 0x39
     ddc:	96 c0       	rjmp	.+300    	; 0xf0a <choose_pass+0x3ac>
		while(KEYPAD_getPressedKey()==13);
     dde:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <KEYPAD_getPressedKey>
     de2:	8d 30       	cpi	r24, 0x0D	; 13
     de4:	e1 f3       	breq	.-8      	; 0xdde <choose_pass+0x280>
		reenter_pass[i]=KEYPAD_getPressedKey();//store the inputs in reenterpass array
     de6:	09 ad       	ldd	r16, Y+57	; 0x39
     de8:	1a ad       	ldd	r17, Y+58	; 0x3a
     dea:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <KEYPAD_getPressedKey>
     dee:	f8 01       	movw	r30, r16
     df0:	e2 50       	subi	r30, 0x02	; 2
     df2:	ff 4f       	sbci	r31, 0xFF	; 255
     df4:	80 83       	st	Z, r24
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	aa ef       	ldi	r26, 0xFA	; 250
     dfc:	b3 e4       	ldi	r27, 0x43	; 67
     dfe:	89 8f       	std	Y+25, r24	; 0x19
     e00:	9a 8f       	std	Y+26, r25	; 0x1a
     e02:	ab 8f       	std	Y+27, r26	; 0x1b
     e04:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e06:	69 8d       	ldd	r22, Y+25	; 0x19
     e08:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	4a ef       	ldi	r20, 0xFA	; 250
     e14:	54 e4       	ldi	r21, 0x44	; 68
     e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e1a:	dc 01       	movw	r26, r24
     e1c:	cb 01       	movw	r24, r22
     e1e:	8d 8b       	std	Y+21, r24	; 0x15
     e20:	9e 8b       	std	Y+22, r25	; 0x16
     e22:	af 8b       	std	Y+23, r26	; 0x17
     e24:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e26:	6d 89       	ldd	r22, Y+21	; 0x15
     e28:	7e 89       	ldd	r23, Y+22	; 0x16
     e2a:	8f 89       	ldd	r24, Y+23	; 0x17
     e2c:	98 8d       	ldd	r25, Y+24	; 0x18
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	40 e8       	ldi	r20, 0x80	; 128
     e34:	5f e3       	ldi	r21, 0x3F	; 63
     e36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e3a:	88 23       	and	r24, r24
     e3c:	2c f4       	brge	.+10     	; 0xe48 <choose_pass+0x2ea>
		__ticks = 1;
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	9c 8b       	std	Y+20, r25	; 0x14
     e44:	8b 8b       	std	Y+19, r24	; 0x13
     e46:	3f c0       	rjmp	.+126    	; 0xec6 <choose_pass+0x368>
	else if (__tmp > 65535)
     e48:	6d 89       	ldd	r22, Y+21	; 0x15
     e4a:	7e 89       	ldd	r23, Y+22	; 0x16
     e4c:	8f 89       	ldd	r24, Y+23	; 0x17
     e4e:	98 8d       	ldd	r25, Y+24	; 0x18
     e50:	20 e0       	ldi	r18, 0x00	; 0
     e52:	3f ef       	ldi	r19, 0xFF	; 255
     e54:	4f e7       	ldi	r20, 0x7F	; 127
     e56:	57 e4       	ldi	r21, 0x47	; 71
     e58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e5c:	18 16       	cp	r1, r24
     e5e:	4c f5       	brge	.+82     	; 0xeb2 <choose_pass+0x354>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e60:	69 8d       	ldd	r22, Y+25	; 0x19
     e62:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e64:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e66:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e68:	20 e0       	ldi	r18, 0x00	; 0
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	40 e2       	ldi	r20, 0x20	; 32
     e6e:	51 e4       	ldi	r21, 0x41	; 65
     e70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e74:	dc 01       	movw	r26, r24
     e76:	cb 01       	movw	r24, r22
     e78:	bc 01       	movw	r22, r24
     e7a:	cd 01       	movw	r24, r26
     e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e80:	dc 01       	movw	r26, r24
     e82:	cb 01       	movw	r24, r22
     e84:	9c 8b       	std	Y+20, r25	; 0x14
     e86:	8b 8b       	std	Y+19, r24	; 0x13
     e88:	0f c0       	rjmp	.+30     	; 0xea8 <choose_pass+0x34a>
     e8a:	88 ec       	ldi	r24, 0xC8	; 200
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	9a 8b       	std	Y+18, r25	; 0x12
     e90:	89 8b       	std	Y+17, r24	; 0x11
     e92:	89 89       	ldd	r24, Y+17	; 0x11
     e94:	9a 89       	ldd	r25, Y+18	; 0x12
     e96:	01 97       	sbiw	r24, 0x01	; 1
     e98:	f1 f7       	brne	.-4      	; 0xe96 <choose_pass+0x338>
     e9a:	9a 8b       	std	Y+18, r25	; 0x12
     e9c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e9e:	8b 89       	ldd	r24, Y+19	; 0x13
     ea0:	9c 89       	ldd	r25, Y+20	; 0x14
     ea2:	01 97       	sbiw	r24, 0x01	; 1
     ea4:	9c 8b       	std	Y+20, r25	; 0x14
     ea6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ea8:	8b 89       	ldd	r24, Y+19	; 0x13
     eaa:	9c 89       	ldd	r25, Y+20	; 0x14
     eac:	00 97       	sbiw	r24, 0x00	; 0
     eae:	69 f7       	brne	.-38     	; 0xe8a <choose_pass+0x32c>
     eb0:	14 c0       	rjmp	.+40     	; 0xeda <choose_pass+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eb2:	6d 89       	ldd	r22, Y+21	; 0x15
     eb4:	7e 89       	ldd	r23, Y+22	; 0x16
     eb6:	8f 89       	ldd	r24, Y+23	; 0x17
     eb8:	98 8d       	ldd	r25, Y+24	; 0x18
     eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ebe:	dc 01       	movw	r26, r24
     ec0:	cb 01       	movw	r24, r22
     ec2:	9c 8b       	std	Y+20, r25	; 0x14
     ec4:	8b 8b       	std	Y+19, r24	; 0x13
     ec6:	8b 89       	ldd	r24, Y+19	; 0x13
     ec8:	9c 89       	ldd	r25, Y+20	; 0x14
     eca:	98 8b       	std	Y+16, r25	; 0x10
     ecc:	8f 87       	std	Y+15, r24	; 0x0f
     ece:	8f 85       	ldd	r24, Y+15	; 0x0f
     ed0:	98 89       	ldd	r25, Y+16	; 0x10
     ed2:	01 97       	sbiw	r24, 0x01	; 1
     ed4:	f1 f7       	brne	.-4      	; 0xed2 <choose_pass+0x374>
     ed6:	98 8b       	std	Y+16, r25	; 0x10
     ed8:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(500);
		LCD_moveCursor(1,i+10);
     eda:	89 ad       	ldd	r24, Y+57	; 0x39
     edc:	98 2f       	mov	r25, r24
     ede:	96 5f       	subi	r25, 0xF6	; 246
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	69 2f       	mov	r22, r25
     ee4:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <LCD_moveCursor>
		LCD_displayString("*"); //display * with each press
     ee8:	80 e7       	ldi	r24, 0x70	; 112
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	0e 94 a8 14 	call	0x2950	; 0x2950 <LCD_displayString>
		//while(UART_recieveByte() != MC2_READY){}
		UART_sendByte(reenter_pass[i]); //send password byte by byte to the control ecu
     ef0:	89 ad       	ldd	r24, Y+57	; 0x39
     ef2:	9a ad       	ldd	r25, Y+58	; 0x3a
     ef4:	fc 01       	movw	r30, r24
     ef6:	e2 50       	subi	r30, 0x02	; 2
     ef8:	ff 4f       	sbci	r31, 0xFF	; 255
     efa:	80 81       	ld	r24, Z
     efc:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <UART_sendByte>
	LCD_clearScreen();
	LCD_moveCursor(0,0);
	LCD_displayString("plz re-enter the:");
	LCD_moveCursor(1,0);
	LCD_displayString("same pass:");
	for(i=0 ; i<5 ; i++){ // loop to take 5 inputs from the user
     f00:	89 ad       	ldd	r24, Y+57	; 0x39
     f02:	9a ad       	ldd	r25, Y+58	; 0x3a
     f04:	01 96       	adiw	r24, 0x01	; 1
     f06:	9a af       	std	Y+58, r25	; 0x3a
     f08:	89 af       	std	Y+57, r24	; 0x39
     f0a:	89 ad       	ldd	r24, Y+57	; 0x39
     f0c:	9a ad       	ldd	r25, Y+58	; 0x3a
     f0e:	85 30       	cpi	r24, 0x05	; 5
     f10:	91 05       	cpc	r25, r1
     f12:	0c f4       	brge	.+2      	; 0xf16 <choose_pass+0x3b8>
     f14:	64 cf       	rjmp	.-312    	; 0xdde <choose_pass+0x280>
		LCD_moveCursor(1,i+10);
		LCD_displayString("*"); //display * with each press
		//while(UART_recieveByte() != MC2_READY){}
		UART_sendByte(reenter_pass[i]); //send password byte by byte to the control ecu
	}
	while(KEYPAD_getPressedKey()!=13); // polling until press enter
     f16:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <KEYPAD_getPressedKey>
     f1a:	8d 30       	cpi	r24, 0x0D	; 13
     f1c:	e1 f7       	brne	.-8      	; 0xf16 <choose_pass+0x3b8>
	UART_sendByte(contin); //send to the controller that user press enter
     f1e:	8d e0       	ldi	r24, 0x0D	; 13
     f20:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <UART_sendByte>
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	aa ef       	ldi	r26, 0xFA	; 250
     f2a:	b3 e4       	ldi	r27, 0x43	; 67
     f2c:	8b 87       	std	Y+11, r24	; 0x0b
     f2e:	9c 87       	std	Y+12, r25	; 0x0c
     f30:	ad 87       	std	Y+13, r26	; 0x0d
     f32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f34:	6b 85       	ldd	r22, Y+11	; 0x0b
     f36:	7c 85       	ldd	r23, Y+12	; 0x0c
     f38:	8d 85       	ldd	r24, Y+13	; 0x0d
     f3a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	4a ef       	ldi	r20, 0xFA	; 250
     f42:	54 e4       	ldi	r21, 0x44	; 68
     f44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f48:	dc 01       	movw	r26, r24
     f4a:	cb 01       	movw	r24, r22
     f4c:	8f 83       	std	Y+7, r24	; 0x07
     f4e:	98 87       	std	Y+8, r25	; 0x08
     f50:	a9 87       	std	Y+9, r26	; 0x09
     f52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f54:	6f 81       	ldd	r22, Y+7	; 0x07
     f56:	78 85       	ldd	r23, Y+8	; 0x08
     f58:	89 85       	ldd	r24, Y+9	; 0x09
     f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f5c:	20 e0       	ldi	r18, 0x00	; 0
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	40 e8       	ldi	r20, 0x80	; 128
     f62:	5f e3       	ldi	r21, 0x3F	; 63
     f64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f68:	88 23       	and	r24, r24
     f6a:	2c f4       	brge	.+10     	; 0xf76 <choose_pass+0x418>
		__ticks = 1;
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	9e 83       	std	Y+6, r25	; 0x06
     f72:	8d 83       	std	Y+5, r24	; 0x05
     f74:	3f c0       	rjmp	.+126    	; 0xff4 <choose_pass+0x496>
	else if (__tmp > 65535)
     f76:	6f 81       	ldd	r22, Y+7	; 0x07
     f78:	78 85       	ldd	r23, Y+8	; 0x08
     f7a:	89 85       	ldd	r24, Y+9	; 0x09
     f7c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	3f ef       	ldi	r19, 0xFF	; 255
     f82:	4f e7       	ldi	r20, 0x7F	; 127
     f84:	57 e4       	ldi	r21, 0x47	; 71
     f86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f8a:	18 16       	cp	r1, r24
     f8c:	4c f5       	brge	.+82     	; 0xfe0 <choose_pass+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f8e:	6b 85       	ldd	r22, Y+11	; 0x0b
     f90:	7c 85       	ldd	r23, Y+12	; 0x0c
     f92:	8d 85       	ldd	r24, Y+13	; 0x0d
     f94:	9e 85       	ldd	r25, Y+14	; 0x0e
     f96:	20 e0       	ldi	r18, 0x00	; 0
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	40 e2       	ldi	r20, 0x20	; 32
     f9c:	51 e4       	ldi	r21, 0x41	; 65
     f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fa2:	dc 01       	movw	r26, r24
     fa4:	cb 01       	movw	r24, r22
     fa6:	bc 01       	movw	r22, r24
     fa8:	cd 01       	movw	r24, r26
     faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fae:	dc 01       	movw	r26, r24
     fb0:	cb 01       	movw	r24, r22
     fb2:	9e 83       	std	Y+6, r25	; 0x06
     fb4:	8d 83       	std	Y+5, r24	; 0x05
     fb6:	0f c0       	rjmp	.+30     	; 0xfd6 <choose_pass+0x478>
     fb8:	88 ec       	ldi	r24, 0xC8	; 200
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	9c 83       	std	Y+4, r25	; 0x04
     fbe:	8b 83       	std	Y+3, r24	; 0x03
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	9c 81       	ldd	r25, Y+4	; 0x04
     fc4:	01 97       	sbiw	r24, 0x01	; 1
     fc6:	f1 f7       	brne	.-4      	; 0xfc4 <choose_pass+0x466>
     fc8:	9c 83       	std	Y+4, r25	; 0x04
     fca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fcc:	8d 81       	ldd	r24, Y+5	; 0x05
     fce:	9e 81       	ldd	r25, Y+6	; 0x06
     fd0:	01 97       	sbiw	r24, 0x01	; 1
     fd2:	9e 83       	std	Y+6, r25	; 0x06
     fd4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fd6:	8d 81       	ldd	r24, Y+5	; 0x05
     fd8:	9e 81       	ldd	r25, Y+6	; 0x06
     fda:	00 97       	sbiw	r24, 0x00	; 0
     fdc:	69 f7       	brne	.-38     	; 0xfb8 <choose_pass+0x45a>
     fde:	14 c0       	rjmp	.+40     	; 0x1008 <choose_pass+0x4aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fe0:	6f 81       	ldd	r22, Y+7	; 0x07
     fe2:	78 85       	ldd	r23, Y+8	; 0x08
     fe4:	89 85       	ldd	r24, Y+9	; 0x09
     fe6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fec:	dc 01       	movw	r26, r24
     fee:	cb 01       	movw	r24, r22
     ff0:	9e 83       	std	Y+6, r25	; 0x06
     ff2:	8d 83       	std	Y+5, r24	; 0x05
     ff4:	8d 81       	ldd	r24, Y+5	; 0x05
     ff6:	9e 81       	ldd	r25, Y+6	; 0x06
     ff8:	9a 83       	std	Y+2, r25	; 0x02
     ffa:	89 83       	std	Y+1, r24	; 0x01
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
     ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    1000:	01 97       	sbiw	r24, 0x01	; 1
    1002:	f1 f7       	brne	.-4      	; 0x1000 <choose_pass+0x4a2>
    1004:	9a 83       	std	Y+2, r25	; 0x02
    1006:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	return ;
}
    1008:	ea 96       	adiw	r28, 0x3a	; 58
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	f8 94       	cli
    100e:	de bf       	out	0x3e, r29	; 62
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	cd bf       	out	0x3d, r28	; 61
    1014:	cf 91       	pop	r28
    1016:	df 91       	pop	r29
    1018:	1f 91       	pop	r17
    101a:	0f 91       	pop	r16
    101c:	08 95       	ret

0000101e <enter_pass>:
// function to take password from the user to check if the password is true or not
void enter_pass(void){
    101e:	0f 93       	push	r16
    1020:	1f 93       	push	r17
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
    102a:	6e 97       	sbiw	r28, 0x1e	; 30
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	f8 94       	cli
    1030:	de bf       	out	0x3e, r29	; 62
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	cd bf       	out	0x3d, r28	; 61
	int i=0;
    1036:	1e 8e       	std	Y+30, r1	; 0x1e
    1038:	1d 8e       	std	Y+29, r1	; 0x1d
	LCD_clearScreen();
    103a:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <LCD_clearScreen>
	LCD_moveCursor(0,0);
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	60 e0       	ldi	r22, 0x00	; 0
    1042:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <LCD_moveCursor>
	LCD_displayString("plz enter pass:");
    1046:	80 e6       	ldi	r24, 0x60	; 96
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	0e 94 a8 14 	call	0x2950	; 0x2950 <LCD_displayString>
	for(i=0 ; i<5 ; i++){ // loop to take 5 inputs from the user
    104e:	1e 8e       	std	Y+30, r1	; 0x1e
    1050:	1d 8e       	std	Y+29, r1	; 0x1d
    1052:	90 c0       	rjmp	.+288    	; 0x1174 <enter_pass+0x156>
		pass[i]=KEYPAD_getPressedKey(); //store the inputs in pass array
    1054:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1056:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1058:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <KEYPAD_getPressedKey>
    105c:	f8 01       	movw	r30, r16
    105e:	ed 5f       	subi	r30, 0xFD	; 253
    1060:	fe 4f       	sbci	r31, 0xFE	; 254
    1062:	80 83       	st	Z, r24
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	aa ef       	ldi	r26, 0xFA	; 250
    106a:	b3 e4       	ldi	r27, 0x43	; 67
    106c:	89 8f       	std	Y+25, r24	; 0x19
    106e:	9a 8f       	std	Y+26, r25	; 0x1a
    1070:	ab 8f       	std	Y+27, r26	; 0x1b
    1072:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1074:	69 8d       	ldd	r22, Y+25	; 0x19
    1076:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1078:	8b 8d       	ldd	r24, Y+27	; 0x1b
    107a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    107c:	20 e0       	ldi	r18, 0x00	; 0
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	4a ef       	ldi	r20, 0xFA	; 250
    1082:	54 e4       	ldi	r21, 0x44	; 68
    1084:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1088:	dc 01       	movw	r26, r24
    108a:	cb 01       	movw	r24, r22
    108c:	8d 8b       	std	Y+21, r24	; 0x15
    108e:	9e 8b       	std	Y+22, r25	; 0x16
    1090:	af 8b       	std	Y+23, r26	; 0x17
    1092:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1094:	6d 89       	ldd	r22, Y+21	; 0x15
    1096:	7e 89       	ldd	r23, Y+22	; 0x16
    1098:	8f 89       	ldd	r24, Y+23	; 0x17
    109a:	98 8d       	ldd	r25, Y+24	; 0x18
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	40 e8       	ldi	r20, 0x80	; 128
    10a2:	5f e3       	ldi	r21, 0x3F	; 63
    10a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10a8:	88 23       	and	r24, r24
    10aa:	2c f4       	brge	.+10     	; 0x10b6 <enter_pass+0x98>
		__ticks = 1;
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	9c 8b       	std	Y+20, r25	; 0x14
    10b2:	8b 8b       	std	Y+19, r24	; 0x13
    10b4:	3f c0       	rjmp	.+126    	; 0x1134 <enter_pass+0x116>
	else if (__tmp > 65535)
    10b6:	6d 89       	ldd	r22, Y+21	; 0x15
    10b8:	7e 89       	ldd	r23, Y+22	; 0x16
    10ba:	8f 89       	ldd	r24, Y+23	; 0x17
    10bc:	98 8d       	ldd	r25, Y+24	; 0x18
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	3f ef       	ldi	r19, 0xFF	; 255
    10c2:	4f e7       	ldi	r20, 0x7F	; 127
    10c4:	57 e4       	ldi	r21, 0x47	; 71
    10c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10ca:	18 16       	cp	r1, r24
    10cc:	4c f5       	brge	.+82     	; 0x1120 <enter_pass+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10ce:	69 8d       	ldd	r22, Y+25	; 0x19
    10d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	40 e2       	ldi	r20, 0x20	; 32
    10dc:	51 e4       	ldi	r21, 0x41	; 65
    10de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e2:	dc 01       	movw	r26, r24
    10e4:	cb 01       	movw	r24, r22
    10e6:	bc 01       	movw	r22, r24
    10e8:	cd 01       	movw	r24, r26
    10ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ee:	dc 01       	movw	r26, r24
    10f0:	cb 01       	movw	r24, r22
    10f2:	9c 8b       	std	Y+20, r25	; 0x14
    10f4:	8b 8b       	std	Y+19, r24	; 0x13
    10f6:	0f c0       	rjmp	.+30     	; 0x1116 <enter_pass+0xf8>
    10f8:	88 ec       	ldi	r24, 0xC8	; 200
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	9a 8b       	std	Y+18, r25	; 0x12
    10fe:	89 8b       	std	Y+17, r24	; 0x11
    1100:	89 89       	ldd	r24, Y+17	; 0x11
    1102:	9a 89       	ldd	r25, Y+18	; 0x12
    1104:	01 97       	sbiw	r24, 0x01	; 1
    1106:	f1 f7       	brne	.-4      	; 0x1104 <enter_pass+0xe6>
    1108:	9a 8b       	std	Y+18, r25	; 0x12
    110a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    110c:	8b 89       	ldd	r24, Y+19	; 0x13
    110e:	9c 89       	ldd	r25, Y+20	; 0x14
    1110:	01 97       	sbiw	r24, 0x01	; 1
    1112:	9c 8b       	std	Y+20, r25	; 0x14
    1114:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1116:	8b 89       	ldd	r24, Y+19	; 0x13
    1118:	9c 89       	ldd	r25, Y+20	; 0x14
    111a:	00 97       	sbiw	r24, 0x00	; 0
    111c:	69 f7       	brne	.-38     	; 0x10f8 <enter_pass+0xda>
    111e:	14 c0       	rjmp	.+40     	; 0x1148 <enter_pass+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1120:	6d 89       	ldd	r22, Y+21	; 0x15
    1122:	7e 89       	ldd	r23, Y+22	; 0x16
    1124:	8f 89       	ldd	r24, Y+23	; 0x17
    1126:	98 8d       	ldd	r25, Y+24	; 0x18
    1128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    112c:	dc 01       	movw	r26, r24
    112e:	cb 01       	movw	r24, r22
    1130:	9c 8b       	std	Y+20, r25	; 0x14
    1132:	8b 8b       	std	Y+19, r24	; 0x13
    1134:	8b 89       	ldd	r24, Y+19	; 0x13
    1136:	9c 89       	ldd	r25, Y+20	; 0x14
    1138:	98 8b       	std	Y+16, r25	; 0x10
    113a:	8f 87       	std	Y+15, r24	; 0x0f
    113c:	8f 85       	ldd	r24, Y+15	; 0x0f
    113e:	98 89       	ldd	r25, Y+16	; 0x10
    1140:	01 97       	sbiw	r24, 0x01	; 1
    1142:	f1 f7       	brne	.-4      	; 0x1140 <enter_pass+0x122>
    1144:	98 8b       	std	Y+16, r25	; 0x10
    1146:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		LCD_moveCursor(1,i);
    1148:	9d 8d       	ldd	r25, Y+29	; 0x1d
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	69 2f       	mov	r22, r25
    114e:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <LCD_moveCursor>
		LCD_displayString("*"); //display * with each press
    1152:	80 e7       	ldi	r24, 0x70	; 112
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	0e 94 a8 14 	call	0x2950	; 0x2950 <LCD_displayString>


		UART_sendByte(pass[i]); //send password byte by byte to the control ecu
    115a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    115c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    115e:	fc 01       	movw	r30, r24
    1160:	ed 5f       	subi	r30, 0xFD	; 253
    1162:	fe 4f       	sbci	r31, 0xFE	; 254
    1164:	80 81       	ld	r24, Z
    1166:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <UART_sendByte>
void enter_pass(void){
	int i=0;
	LCD_clearScreen();
	LCD_moveCursor(0,0);
	LCD_displayString("plz enter pass:");
	for(i=0 ; i<5 ; i++){ // loop to take 5 inputs from the user
    116a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    116c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    116e:	01 96       	adiw	r24, 0x01	; 1
    1170:	9e 8f       	std	Y+30, r25	; 0x1e
    1172:	8d 8f       	std	Y+29, r24	; 0x1d
    1174:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1176:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1178:	85 30       	cpi	r24, 0x05	; 5
    117a:	91 05       	cpc	r25, r1
    117c:	0c f4       	brge	.+2      	; 0x1180 <enter_pass+0x162>
    117e:	6a cf       	rjmp	.-300    	; 0x1054 <enter_pass+0x36>
		LCD_displayString("*"); //display * with each press


		UART_sendByte(pass[i]); //send password byte by byte to the control ecu
	}
	while(KEYPAD_getPressedKey()!=13);
    1180:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <KEYPAD_getPressedKey>
    1184:	8d 30       	cpi	r24, 0x0D	; 13
    1186:	e1 f7       	brne	.-8      	; 0x1180 <enter_pass+0x162>
	UART_sendByte(contin);// polling until press enter
    1188:	8d e0       	ldi	r24, 0x0D	; 13
    118a:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <UART_sendByte>
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	aa ef       	ldi	r26, 0xFA	; 250
    1194:	b3 e4       	ldi	r27, 0x43	; 67
    1196:	8b 87       	std	Y+11, r24	; 0x0b
    1198:	9c 87       	std	Y+12, r25	; 0x0c
    119a:	ad 87       	std	Y+13, r26	; 0x0d
    119c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    119e:	6b 85       	ldd	r22, Y+11	; 0x0b
    11a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    11a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    11a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    11a6:	20 e0       	ldi	r18, 0x00	; 0
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	4a ef       	ldi	r20, 0xFA	; 250
    11ac:	54 e4       	ldi	r21, 0x44	; 68
    11ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11b2:	dc 01       	movw	r26, r24
    11b4:	cb 01       	movw	r24, r22
    11b6:	8f 83       	std	Y+7, r24	; 0x07
    11b8:	98 87       	std	Y+8, r25	; 0x08
    11ba:	a9 87       	std	Y+9, r26	; 0x09
    11bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11be:	6f 81       	ldd	r22, Y+7	; 0x07
    11c0:	78 85       	ldd	r23, Y+8	; 0x08
    11c2:	89 85       	ldd	r24, Y+9	; 0x09
    11c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11c6:	20 e0       	ldi	r18, 0x00	; 0
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	40 e8       	ldi	r20, 0x80	; 128
    11cc:	5f e3       	ldi	r21, 0x3F	; 63
    11ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11d2:	88 23       	and	r24, r24
    11d4:	2c f4       	brge	.+10     	; 0x11e0 <enter_pass+0x1c2>
		__ticks = 1;
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	9e 83       	std	Y+6, r25	; 0x06
    11dc:	8d 83       	std	Y+5, r24	; 0x05
    11de:	3f c0       	rjmp	.+126    	; 0x125e <enter_pass+0x240>
	else if (__tmp > 65535)
    11e0:	6f 81       	ldd	r22, Y+7	; 0x07
    11e2:	78 85       	ldd	r23, Y+8	; 0x08
    11e4:	89 85       	ldd	r24, Y+9	; 0x09
    11e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    11e8:	20 e0       	ldi	r18, 0x00	; 0
    11ea:	3f ef       	ldi	r19, 0xFF	; 255
    11ec:	4f e7       	ldi	r20, 0x7F	; 127
    11ee:	57 e4       	ldi	r21, 0x47	; 71
    11f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11f4:	18 16       	cp	r1, r24
    11f6:	4c f5       	brge	.+82     	; 0x124a <enter_pass+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    11fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    11fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    11fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	40 e2       	ldi	r20, 0x20	; 32
    1206:	51 e4       	ldi	r21, 0x41	; 65
    1208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    120c:	dc 01       	movw	r26, r24
    120e:	cb 01       	movw	r24, r22
    1210:	bc 01       	movw	r22, r24
    1212:	cd 01       	movw	r24, r26
    1214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1218:	dc 01       	movw	r26, r24
    121a:	cb 01       	movw	r24, r22
    121c:	9e 83       	std	Y+6, r25	; 0x06
    121e:	8d 83       	std	Y+5, r24	; 0x05
    1220:	0f c0       	rjmp	.+30     	; 0x1240 <enter_pass+0x222>
    1222:	88 ec       	ldi	r24, 0xC8	; 200
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	9c 83       	std	Y+4, r25	; 0x04
    1228:	8b 83       	std	Y+3, r24	; 0x03
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	9c 81       	ldd	r25, Y+4	; 0x04
    122e:	01 97       	sbiw	r24, 0x01	; 1
    1230:	f1 f7       	brne	.-4      	; 0x122e <enter_pass+0x210>
    1232:	9c 83       	std	Y+4, r25	; 0x04
    1234:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1236:	8d 81       	ldd	r24, Y+5	; 0x05
    1238:	9e 81       	ldd	r25, Y+6	; 0x06
    123a:	01 97       	sbiw	r24, 0x01	; 1
    123c:	9e 83       	std	Y+6, r25	; 0x06
    123e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1240:	8d 81       	ldd	r24, Y+5	; 0x05
    1242:	9e 81       	ldd	r25, Y+6	; 0x06
    1244:	00 97       	sbiw	r24, 0x00	; 0
    1246:	69 f7       	brne	.-38     	; 0x1222 <enter_pass+0x204>
    1248:	14 c0       	rjmp	.+40     	; 0x1272 <enter_pass+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    124a:	6f 81       	ldd	r22, Y+7	; 0x07
    124c:	78 85       	ldd	r23, Y+8	; 0x08
    124e:	89 85       	ldd	r24, Y+9	; 0x09
    1250:	9a 85       	ldd	r25, Y+10	; 0x0a
    1252:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1256:	dc 01       	movw	r26, r24
    1258:	cb 01       	movw	r24, r22
    125a:	9e 83       	std	Y+6, r25	; 0x06
    125c:	8d 83       	std	Y+5, r24	; 0x05
    125e:	8d 81       	ldd	r24, Y+5	; 0x05
    1260:	9e 81       	ldd	r25, Y+6	; 0x06
    1262:	9a 83       	std	Y+2, r25	; 0x02
    1264:	89 83       	std	Y+1, r24	; 0x01
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	9a 81       	ldd	r25, Y+2	; 0x02
    126a:	01 97       	sbiw	r24, 0x01	; 1
    126c:	f1 f7       	brne	.-4      	; 0x126a <enter_pass+0x24c>
    126e:	9a 83       	std	Y+2, r25	; 0x02
    1270:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	return ;
}
    1272:	6e 96       	adiw	r28, 0x1e	; 30
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	f8 94       	cli
    1278:	de bf       	out	0x3e, r29	; 62
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	cd bf       	out	0x3d, r28	; 61
    127e:	cf 91       	pop	r28
    1280:	df 91       	pop	r29
    1282:	1f 91       	pop	r17
    1284:	0f 91       	pop	r16
    1286:	08 95       	ret

00001288 <main>:

int main(){
    1288:	df 93       	push	r29
    128a:	cf 93       	push	r28
    128c:	cd b7       	in	r28, 0x3d	; 61
    128e:	de b7       	in	r29, 0x3e	; 62
    1290:	6a 97       	sbiw	r28, 0x1a	; 26
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	f8 94       	cli
    1296:	de bf       	out	0x3e, r29	; 62
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	cd bf       	out	0x3d, r28	; 61

	SREG |= (1<<7); //enable I bit
    129c:	af e5       	ldi	r26, 0x5F	; 95
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	ef e5       	ldi	r30, 0x5F	; 95
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	80 68       	ori	r24, 0x80	; 128
    12a8:	8c 93       	st	X, r24
 1- send 8 bits data
 2- using even parity error detector
 3- stop bit is one bit only
 4- baud rate = 9600
 */
	UART_ConfigType Config = {eight_bits,even_parity,one_bit,9600};
    12aa:	ce 01       	movw	r24, r28
    12ac:	0f 96       	adiw	r24, 0x0f	; 15
    12ae:	9f 8b       	std	Y+23, r25	; 0x17
    12b0:	8e 8b       	std	Y+22, r24	; 0x16
    12b2:	e3 ef       	ldi	r30, 0xF3	; 243
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	f9 8f       	std	Y+25, r31	; 0x19
    12b8:	e8 8f       	std	Y+24, r30	; 0x18
    12ba:	f7 e0       	ldi	r31, 0x07	; 7
    12bc:	fa 8f       	std	Y+26, r31	; 0x1a
    12be:	e8 8d       	ldd	r30, Y+24	; 0x18
    12c0:	f9 8d       	ldd	r31, Y+25	; 0x19
    12c2:	00 80       	ld	r0, Z
    12c4:	88 8d       	ldd	r24, Y+24	; 0x18
    12c6:	99 8d       	ldd	r25, Y+25	; 0x19
    12c8:	01 96       	adiw	r24, 0x01	; 1
    12ca:	99 8f       	std	Y+25, r25	; 0x19
    12cc:	88 8f       	std	Y+24, r24	; 0x18
    12ce:	ee 89       	ldd	r30, Y+22	; 0x16
    12d0:	ff 89       	ldd	r31, Y+23	; 0x17
    12d2:	00 82       	st	Z, r0
    12d4:	8e 89       	ldd	r24, Y+22	; 0x16
    12d6:	9f 89       	ldd	r25, Y+23	; 0x17
    12d8:	01 96       	adiw	r24, 0x01	; 1
    12da:	9f 8b       	std	Y+23, r25	; 0x17
    12dc:	8e 8b       	std	Y+22, r24	; 0x16
    12de:	9a 8d       	ldd	r25, Y+26	; 0x1a
    12e0:	91 50       	subi	r25, 0x01	; 1
    12e2:	9a 8f       	std	Y+26, r25	; 0x1a
    12e4:	ea 8d       	ldd	r30, Y+26	; 0x1a
    12e6:	ee 23       	and	r30, r30
    12e8:	51 f7       	brne	.-44     	; 0x12be <main+0x36>
	// initialization of the timer
	Timer1_init(&timer_config);
    12ea:	8d ee       	ldi	r24, 0xED	; 237
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Timer1_init>
	//choose timer_count function as call back functin
	Timer1_setCallBack(timer_count);
    12f2:	83 ea       	ldi	r24, 0xA3	; 163
    12f4:	95 e0       	ldi	r25, 0x05	; 5
    12f6:	0e 94 b2 0b 	call	0x1764	; 0x1764 <Timer1_setCallBack>
//initialization of the lcd
	LCD_init();
    12fa:	0e 94 2e 10 	call	0x205c	; 0x205c <LCD_init>

	//initialization of the UART with UART config struct
	UART_init( &Config);
    12fe:	ce 01       	movw	r24, r28
    1300:	0f 96       	adiw	r24, 0x0f	; 15
    1302:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <UART_init>

	do { /* looping until the user enter
	       two matched password to be
	       the current password of the system */
		choose_pass(); //calling choose pass function
    1306:	0e 94 af 05 	call	0xb5e	; 0xb5e <choose_pass>
		//UART_sendByte(MC2_READY);
		if(UART_recieveByte()==Matched){ /*recieve after check in control ecu
    130a:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <UART_recieveByte>
    130e:	81 31       	cpi	r24, 0x11	; 17
    1310:	19 f4       	brne	.+6      	; 0x1318 <main+0x90>
			if the two password are matched make success=1
			to break from the loop   */
			succes=1;
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	80 93 fb 00 	sts	0x00FB, r24
		}

	}while(succes==0);
    1318:	80 91 fb 00 	lds	r24, 0x00FB
    131c:	88 23       	and	r24, r24
    131e:	99 f3       	breq	.-26     	; 0x1306 <main+0x7e>

	while(1){ //enter the system
		LCD_clearScreen();
    1320:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <LCD_clearScreen>
		LCD_moveCursor(0,0);
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	60 e0       	ldi	r22, 0x00	; 0
    1328:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <LCD_moveCursor>
		LCD_displayString("+ : Open Door");
    132c:	8f e8       	ldi	r24, 0x8F	; 143
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	0e 94 a8 14 	call	0x2950	; 0x2950 <LCD_displayString>
		LCD_moveCursor(1,0);
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	60 e0       	ldi	r22, 0x00	; 0
    1338:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <LCD_moveCursor>
		LCD_displayString("- : Change pass");
    133c:	8d e9       	ldi	r24, 0x9D	; 157
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	0e 94 a8 14 	call	0x2950	; 0x2950 <LCD_displayString>
		ans = KEYPAD_getPressedKey(); //store the input to ans var
    1344:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <KEYPAD_getPressedKey>
    1348:	80 93 08 01 	sts	0x0108, r24
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	aa ef       	ldi	r26, 0xFA	; 250
    1352:	b3 e4       	ldi	r27, 0x43	; 67
    1354:	8b 87       	std	Y+11, r24	; 0x0b
    1356:	9c 87       	std	Y+12, r25	; 0x0c
    1358:	ad 87       	std	Y+13, r26	; 0x0d
    135a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    135c:	6b 85       	ldd	r22, Y+11	; 0x0b
    135e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1360:	8d 85       	ldd	r24, Y+13	; 0x0d
    1362:	9e 85       	ldd	r25, Y+14	; 0x0e
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	4a ef       	ldi	r20, 0xFA	; 250
    136a:	54 e4       	ldi	r21, 0x44	; 68
    136c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1370:	dc 01       	movw	r26, r24
    1372:	cb 01       	movw	r24, r22
    1374:	8f 83       	std	Y+7, r24	; 0x07
    1376:	98 87       	std	Y+8, r25	; 0x08
    1378:	a9 87       	std	Y+9, r26	; 0x09
    137a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    137c:	6f 81       	ldd	r22, Y+7	; 0x07
    137e:	78 85       	ldd	r23, Y+8	; 0x08
    1380:	89 85       	ldd	r24, Y+9	; 0x09
    1382:	9a 85       	ldd	r25, Y+10	; 0x0a
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	40 e8       	ldi	r20, 0x80	; 128
    138a:	5f e3       	ldi	r21, 0x3F	; 63
    138c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1390:	88 23       	and	r24, r24
    1392:	2c f4       	brge	.+10     	; 0x139e <main+0x116>
		__ticks = 1;
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	9e 83       	std	Y+6, r25	; 0x06
    139a:	8d 83       	std	Y+5, r24	; 0x05
    139c:	3f c0       	rjmp	.+126    	; 0x141c <main+0x194>
	else if (__tmp > 65535)
    139e:	6f 81       	ldd	r22, Y+7	; 0x07
    13a0:	78 85       	ldd	r23, Y+8	; 0x08
    13a2:	89 85       	ldd	r24, Y+9	; 0x09
    13a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	3f ef       	ldi	r19, 0xFF	; 255
    13aa:	4f e7       	ldi	r20, 0x7F	; 127
    13ac:	57 e4       	ldi	r21, 0x47	; 71
    13ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13b2:	18 16       	cp	r1, r24
    13b4:	4c f5       	brge	.+82     	; 0x1408 <main+0x180>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    13b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    13bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	40 e2       	ldi	r20, 0x20	; 32
    13c4:	51 e4       	ldi	r21, 0x41	; 65
    13c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ca:	dc 01       	movw	r26, r24
    13cc:	cb 01       	movw	r24, r22
    13ce:	bc 01       	movw	r22, r24
    13d0:	cd 01       	movw	r24, r26
    13d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d6:	dc 01       	movw	r26, r24
    13d8:	cb 01       	movw	r24, r22
    13da:	9e 83       	std	Y+6, r25	; 0x06
    13dc:	8d 83       	std	Y+5, r24	; 0x05
    13de:	0f c0       	rjmp	.+30     	; 0x13fe <main+0x176>
    13e0:	88 ec       	ldi	r24, 0xC8	; 200
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	9c 83       	std	Y+4, r25	; 0x04
    13e6:	8b 83       	std	Y+3, r24	; 0x03
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	9c 81       	ldd	r25, Y+4	; 0x04
    13ec:	01 97       	sbiw	r24, 0x01	; 1
    13ee:	f1 f7       	brne	.-4      	; 0x13ec <main+0x164>
    13f0:	9c 83       	std	Y+4, r25	; 0x04
    13f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13f4:	8d 81       	ldd	r24, Y+5	; 0x05
    13f6:	9e 81       	ldd	r25, Y+6	; 0x06
    13f8:	01 97       	sbiw	r24, 0x01	; 1
    13fa:	9e 83       	std	Y+6, r25	; 0x06
    13fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1400:	9e 81       	ldd	r25, Y+6	; 0x06
    1402:	00 97       	sbiw	r24, 0x00	; 0
    1404:	69 f7       	brne	.-38     	; 0x13e0 <main+0x158>
    1406:	14 c0       	rjmp	.+40     	; 0x1430 <main+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1408:	6f 81       	ldd	r22, Y+7	; 0x07
    140a:	78 85       	ldd	r23, Y+8	; 0x08
    140c:	89 85       	ldd	r24, Y+9	; 0x09
    140e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	9e 83       	std	Y+6, r25	; 0x06
    141a:	8d 83       	std	Y+5, r24	; 0x05
    141c:	8d 81       	ldd	r24, Y+5	; 0x05
    141e:	9e 81       	ldd	r25, Y+6	; 0x06
    1420:	9a 83       	std	Y+2, r25	; 0x02
    1422:	89 83       	std	Y+1, r24	; 0x01
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	9a 81       	ldd	r25, Y+2	; 0x02
    1428:	01 97       	sbiw	r24, 0x01	; 1
    142a:	f1 f7       	brne	.-4      	; 0x1428 <main+0x1a0>
    142c:	9a 83       	std	Y+2, r25	; 0x02
    142e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500); /*delay half sec after each press in the keypad
		   to avoid any repetitions of the inputs */

		UART_sendByte(ans); //send the ans var to the control ecu
    1430:	80 91 08 01 	lds	r24, 0x0108
    1434:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <UART_sendByte>
		//}
		//else if(ans=='-'){
		//UART_sendByte('y');
		//}
		if (ans =='+'){ //choose open door
    1438:	80 91 08 01 	lds	r24, 0x0108
    143c:	8b 32       	cpi	r24, 0x2B	; 43
    143e:	09 f0       	breq	.+2      	; 0x1442 <main+0x1ba>
    1440:	94 c0       	rjmp	.+296    	; 0x156a <main+0x2e2>
			enter_pass(); // ask to enter the current password
    1442:	0e 94 0f 08 	call	0x101e	; 0x101e <enter_pass>
			//UART_sendByte(MC2_READY);

			if(UART_recieveByte()==Matched){ //if the password is matching the old one
    1446:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <UART_recieveByte>
    144a:	81 31       	cpi	r24, 0x11	; 17
    144c:	29 f5       	brne	.+74     	; 0x1498 <main+0x210>
				//the control ecu send matched to the HMI_ecu
				tick=0; //start the timer from the beginning
    144e:	10 92 fa 00 	sts	0x00FA, r1
				LCD_clearScreen();
    1452:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <LCD_clearScreen>
				LCD_moveCursor(0,0);
    1456:	80 e0       	ldi	r24, 0x00	; 0
    1458:	60 e0       	ldi	r22, 0x00	; 0
    145a:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <LCD_moveCursor>
				LCD_displayString("Door is Unlocking"); // display this statement
    145e:	8d ea       	ldi	r24, 0xAD	; 173
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	0e 94 a8 14 	call	0x2950	; 0x2950 <LCD_displayString>
				while(tick !=5); // polling for 15 sec
    1466:	80 91 fa 00 	lds	r24, 0x00FA
    146a:	85 30       	cpi	r24, 0x05	; 5
    146c:	e1 f7       	brne	.-8      	; 0x1466 <main+0x1de>
				LCD_clearScreen();
    146e:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <LCD_clearScreen>
				LCD_displayString("  WAIT !");// display this statement
    1472:	8f eb       	ldi	r24, 0xBF	; 191
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	0e 94 a8 14 	call	0x2950	; 0x2950 <LCD_displayString>
				while(tick !=6); // polling for 3 sec
    147a:	80 91 fa 00 	lds	r24, 0x00FA
    147e:	86 30       	cpi	r24, 0x06	; 6
    1480:	e1 f7       	brne	.-8      	; 0x147a <main+0x1f2>
				LCD_clearScreen();
    1482:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <LCD_clearScreen>

				LCD_displayString("Door is locking"); // display this statement
    1486:	88 ec       	ldi	r24, 0xC8	; 200
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	0e 94 a8 14 	call	0x2950	; 0x2950 <LCD_displayString>
				while(tick !=11);// polling for 3 sec
    148e:	80 91 fa 00 	lds	r24, 0x00FA
    1492:	8b 30       	cpi	r24, 0x0B	; 11
    1494:	e1 f7       	brne	.-8      	; 0x148e <main+0x206>
    1496:	44 cf       	rjmp	.-376    	; 0x1320 <main+0x98>

			}
			else {// secound try
				// THE SAME COMMENTS AS FIRST TRY
				enter_pass();
    1498:	0e 94 0f 08 	call	0x101e	; 0x101e <enter_pass>
				//UART_sendByte(MC2_READY);
				if(UART_recieveByte()==Matched){
    149c:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <UART_recieveByte>
    14a0:	81 31       	cpi	r24, 0x11	; 17
    14a2:	29 f5       	brne	.+74     	; 0x14ee <main+0x266>
					tick=0;
    14a4:	10 92 fa 00 	sts	0x00FA, r1
									LCD_clearScreen();
    14a8:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <LCD_clearScreen>
									LCD_moveCursor(0,0);
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	60 e0       	ldi	r22, 0x00	; 0
    14b0:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <LCD_moveCursor>
									LCD_displayString("Door is Unlocking");
    14b4:	8d ea       	ldi	r24, 0xAD	; 173
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	0e 94 a8 14 	call	0x2950	; 0x2950 <LCD_displayString>
									while(tick !=5);
    14bc:	80 91 fa 00 	lds	r24, 0x00FA
    14c0:	85 30       	cpi	r24, 0x05	; 5
    14c2:	e1 f7       	brne	.-8      	; 0x14bc <main+0x234>
									LCD_clearScreen();
    14c4:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <LCD_clearScreen>
									LCD_displayString("  WAIT !");
    14c8:	8f eb       	ldi	r24, 0xBF	; 191
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	0e 94 a8 14 	call	0x2950	; 0x2950 <LCD_displayString>
									while(tick !=6);
    14d0:	80 91 fa 00 	lds	r24, 0x00FA
    14d4:	86 30       	cpi	r24, 0x06	; 6
    14d6:	e1 f7       	brne	.-8      	; 0x14d0 <main+0x248>
									LCD_clearScreen();
    14d8:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <LCD_clearScreen>

									LCD_displayString("Door is locking");
    14dc:	88 ec       	ldi	r24, 0xC8	; 200
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	0e 94 a8 14 	call	0x2950	; 0x2950 <LCD_displayString>
									while(tick !=11);
    14e4:	80 91 fa 00 	lds	r24, 0x00FA
    14e8:	8b 30       	cpi	r24, 0x0B	; 11
    14ea:	e1 f7       	brne	.-8      	; 0x14e4 <main+0x25c>
    14ec:	19 cf       	rjmp	.-462    	; 0x1320 <main+0x98>

				}
				else{ //third try
					//THE SAME COMMENTS AS FIRST AND SEC TRY
					enter_pass();
    14ee:	0e 94 0f 08 	call	0x101e	; 0x101e <enter_pass>
					//UART_sendByte(MC2_READY);
					if(UART_recieveByte()==Matched){
    14f2:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <UART_recieveByte>
    14f6:	81 31       	cpi	r24, 0x11	; 17
    14f8:	29 f5       	brne	.+74     	; 0x1544 <main+0x2bc>
						tick=0;
    14fa:	10 92 fa 00 	sts	0x00FA, r1
										LCD_clearScreen();
    14fe:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <LCD_clearScreen>
										LCD_moveCursor(0,0);
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	60 e0       	ldi	r22, 0x00	; 0
    1506:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <LCD_moveCursor>
										LCD_displayString("Door is Unlocking");
    150a:	8d ea       	ldi	r24, 0xAD	; 173
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	0e 94 a8 14 	call	0x2950	; 0x2950 <LCD_displayString>
										while(tick !=5);
    1512:	80 91 fa 00 	lds	r24, 0x00FA
    1516:	85 30       	cpi	r24, 0x05	; 5
    1518:	e1 f7       	brne	.-8      	; 0x1512 <main+0x28a>
										LCD_clearScreen();
    151a:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <LCD_clearScreen>
										LCD_displayString("  WAIT !");
    151e:	8f eb       	ldi	r24, 0xBF	; 191
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	0e 94 a8 14 	call	0x2950	; 0x2950 <LCD_displayString>
										while(tick !=6);
    1526:	80 91 fa 00 	lds	r24, 0x00FA
    152a:	86 30       	cpi	r24, 0x06	; 6
    152c:	e1 f7       	brne	.-8      	; 0x1526 <main+0x29e>
										LCD_clearScreen();
    152e:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <LCD_clearScreen>

										LCD_displayString("Door is locking");
    1532:	88 ec       	ldi	r24, 0xC8	; 200
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	0e 94 a8 14 	call	0x2950	; 0x2950 <LCD_displayString>
										while(tick !=11);
    153a:	80 91 fa 00 	lds	r24, 0x00FA
    153e:	8b 30       	cpi	r24, 0x0B	; 11
    1540:	e1 f7       	brne	.-8      	; 0x153a <main+0x2b2>
    1542:	ee ce       	rjmp	.-548    	; 0x1320 <main+0x98>
					}
					else { // if the user enter the pssword 3 times wrong

						//while(UART_recieveByte() != MC2_READY){}
						//	UART_sendString("third try !#");
						tick=0;
    1544:	10 92 fa 00 	sts	0x00FA, r1
						LCD_clearScreen();
    1548:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <LCD_clearScreen>
						LCD_moveCursor(0,0);
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	60 e0       	ldi	r22, 0x00	; 0
    1550:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <LCD_moveCursor>
						LCD_displayString("WRONG PASS !");
    1554:	88 ed       	ldi	r24, 0xD8	; 216
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	0e 94 a8 14 	call	0x2950	; 0x2950 <LCD_displayString>
						while(tick!=20);
    155c:	80 91 fa 00 	lds	r24, 0x00FA
    1560:	84 31       	cpi	r24, 0x14	; 20
    1562:	e1 f7       	brne	.-8      	; 0x155c <main+0x2d4>
						LCD_clearScreen();
    1564:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <LCD_clearScreen>
    1568:	db ce       	rjmp	.-586    	; 0x1320 <main+0x98>
					}
				}
			}
		}
		else if (ans == '-'){
    156a:	80 91 08 01 	lds	r24, 0x0108
    156e:	8d 32       	cpi	r24, 0x2D	; 45
    1570:	09 f0       	breq	.+2      	; 0x1574 <main+0x2ec>
    1572:	d6 ce       	rjmp	.-596    	; 0x1320 <main+0x98>

			enter_pass();
    1574:	0e 94 0f 08 	call	0x101e	; 0x101e <enter_pass>
			//UART_sendByte(MC2_READY);
			if(UART_recieveByte()==Matched){
    1578:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <UART_recieveByte>
    157c:	81 31       	cpi	r24, 0x11	; 17
    157e:	71 f4       	brne	.+28     	; 0x159c <main+0x314>
				do { /* looping until the user enter
					       two matched password to be
					       the current password of the system */
						choose_pass(); //calling choose pass function
    1580:	0e 94 af 05 	call	0xb5e	; 0xb5e <choose_pass>
						//UART_sendByte(MC2_READY);
						if(UART_recieveByte()==Matched){ /*recieve after check in control ecu
    1584:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <UART_recieveByte>
    1588:	81 31       	cpi	r24, 0x11	; 17
    158a:	19 f4       	brne	.+6      	; 0x1592 <main+0x30a>
							if the two password are matched make success=1
							to break from the loop   */
							succes=1;
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	80 93 fb 00 	sts	0x00FB, r24
						}

					}while(succes==0);
    1592:	80 91 fb 00 	lds	r24, 0x00FB
    1596:	88 23       	and	r24, r24
    1598:	99 f3       	breq	.-26     	; 0x1580 <main+0x2f8>
    159a:	c2 ce       	rjmp	.-636    	; 0x1320 <main+0x98>
			}
			else { // secound try
				enter_pass();
    159c:	0e 94 0f 08 	call	0x101e	; 0x101e <enter_pass>
				//UART_sendByte(MC2_READY);
				if(UART_recieveByte()==Matched){
    15a0:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <UART_recieveByte>
    15a4:	81 31       	cpi	r24, 0x11	; 17
    15a6:	71 f4       	brne	.+28     	; 0x15c4 <main+0x33c>
					do { /* looping until the user enter
						       two matched password to be
						       the current password of the system */
							choose_pass(); //calling choose pass function
    15a8:	0e 94 af 05 	call	0xb5e	; 0xb5e <choose_pass>
							//UART_sendByte(MC2_READY);
							if(UART_recieveByte()==Matched){ /*recieve after check in control ecu
    15ac:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <UART_recieveByte>
    15b0:	81 31       	cpi	r24, 0x11	; 17
    15b2:	19 f4       	brne	.+6      	; 0x15ba <main+0x332>
								if the two password are matched make success=1
								to break from the loop   */
								succes=1;
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	80 93 fb 00 	sts	0x00FB, r24
							}

						}while(succes==0);
    15ba:	80 91 fb 00 	lds	r24, 0x00FB
    15be:	88 23       	and	r24, r24
    15c0:	99 f3       	breq	.-26     	; 0x15a8 <main+0x320>
    15c2:	ae ce       	rjmp	.-676    	; 0x1320 <main+0x98>

				}
				else{ //third try
					enter_pass();
    15c4:	0e 94 0f 08 	call	0x101e	; 0x101e <enter_pass>
					//UART_sendByte(MC2_READY);
					if(UART_recieveByte()==Matched){
    15c8:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <UART_recieveByte>
    15cc:	81 31       	cpi	r24, 0x11	; 17
    15ce:	71 f4       	brne	.+28     	; 0x15ec <main+0x364>
						do { /* looping until the user enter
							       two matched password to be
							       the current password of the system */
								choose_pass(); //calling choose pass function
    15d0:	0e 94 af 05 	call	0xb5e	; 0xb5e <choose_pass>
								//UART_sendByte(MC2_READY);
								if(UART_recieveByte()==Matched){ /*recieve after check in control ecu
    15d4:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <UART_recieveByte>
    15d8:	81 31       	cpi	r24, 0x11	; 17
    15da:	19 f4       	brne	.+6      	; 0x15e2 <main+0x35a>
									if the two password are matched make success=1
									to break from the loop   */
									succes=1;
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	80 93 fb 00 	sts	0x00FB, r24
								}

							}while(succes==0);
    15e2:	80 91 fb 00 	lds	r24, 0x00FB
    15e6:	88 23       	and	r24, r24
    15e8:	99 f3       	breq	.-26     	; 0x15d0 <main+0x348>
    15ea:	9a ce       	rjmp	.-716    	; 0x1320 <main+0x98>
					}
					else {

						//while(UART_recieveByte() != MC2_READY){}
						//UART_sendString("third try !#");
						tick=0;
    15ec:	10 92 fa 00 	sts	0x00FA, r1
						LCD_clearScreen();
    15f0:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <LCD_clearScreen>
						LCD_moveCursor(0,0);
    15f4:	80 e0       	ldi	r24, 0x00	; 0
    15f6:	60 e0       	ldi	r22, 0x00	; 0
    15f8:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <LCD_moveCursor>
						LCD_displayString("WRONG PASS !"); // display this statement
    15fc:	88 ed       	ldi	r24, 0xD8	; 216
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	0e 94 a8 14 	call	0x2950	; 0x2950 <LCD_displayString>
						while(tick!=20); //polling 60 sec
    1604:	80 91 fa 00 	lds	r24, 0x00FA
    1608:	84 31       	cpi	r24, 0x14	; 20
    160a:	e1 f7       	brne	.-8      	; 0x1604 <main+0x37c>
						LCD_clearScreen();
    160c:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <LCD_clearScreen>
    1610:	87 ce       	rjmp	.-754    	; 0x1320 <main+0x98>

00001612 <__vector_7>:
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
		}
}
#else
ISR(TIMER1_COMPA_vect){
    1612:	1f 92       	push	r1
    1614:	0f 92       	push	r0
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	0f 92       	push	r0
    161a:	11 24       	eor	r1, r1
    161c:	2f 93       	push	r18
    161e:	3f 93       	push	r19
    1620:	4f 93       	push	r20
    1622:	5f 93       	push	r21
    1624:	6f 93       	push	r22
    1626:	7f 93       	push	r23
    1628:	8f 93       	push	r24
    162a:	9f 93       	push	r25
    162c:	af 93       	push	r26
    162e:	bf 93       	push	r27
    1630:	ef 93       	push	r30
    1632:	ff 93       	push	r31
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    163c:	80 91 fc 00 	lds	r24, 0x00FC
    1640:	90 91 fd 00 	lds	r25, 0x00FD
    1644:	00 97       	sbiw	r24, 0x00	; 0
    1646:	29 f0       	breq	.+10     	; 0x1652 <__vector_7+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1648:	e0 91 fc 00 	lds	r30, 0x00FC
    164c:	f0 91 fd 00 	lds	r31, 0x00FD
    1650:	09 95       	icall
		}
}
    1652:	cf 91       	pop	r28
    1654:	df 91       	pop	r29
    1656:	ff 91       	pop	r31
    1658:	ef 91       	pop	r30
    165a:	bf 91       	pop	r27
    165c:	af 91       	pop	r26
    165e:	9f 91       	pop	r25
    1660:	8f 91       	pop	r24
    1662:	7f 91       	pop	r23
    1664:	6f 91       	pop	r22
    1666:	5f 91       	pop	r21
    1668:	4f 91       	pop	r20
    166a:	3f 91       	pop	r19
    166c:	2f 91       	pop	r18
    166e:	0f 90       	pop	r0
    1670:	0f be       	out	0x3f, r0	; 63
    1672:	0f 90       	pop	r0
    1674:	1f 90       	pop	r1
    1676:	18 95       	reti

00001678 <Timer1_init>:
#endif
void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    1678:	df 93       	push	r29
    167a:	cf 93       	push	r28
    167c:	00 d0       	rcall	.+0      	; 0x167e <Timer1_init+0x6>
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	9a 83       	std	Y+2, r25	; 0x02
    1684:	89 83       	std	Y+1, r24	; 0x01

		TCNT1=(Config_Ptr->initial_value);
    1686:	ac e4       	ldi	r26, 0x4C	; 76
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	e9 81       	ldd	r30, Y+1	; 0x01
    168c:	fa 81       	ldd	r31, Y+2	; 0x02
    168e:	80 81       	ld	r24, Z
    1690:	91 81       	ldd	r25, Z+1	; 0x01
    1692:	11 96       	adiw	r26, 0x01	; 1
    1694:	9c 93       	st	X, r25
    1696:	8e 93       	st	-X, r24
		TCCR1A |= (1<<FOC1A) | (1<<FOC1B);
    1698:	af e4       	ldi	r26, 0x4F	; 79
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	ef e4       	ldi	r30, 0x4F	; 79
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	8c 60       	ori	r24, 0x0C	; 12
    16a4:	8c 93       	st	X, r24
		if ((Config_Ptr->mode)==1){
    16a6:	e9 81       	ldd	r30, Y+1	; 0x01
    16a8:	fa 81       	ldd	r31, Y+2	; 0x02
    16aa:	85 81       	ldd	r24, Z+5	; 0x05
    16ac:	81 30       	cpi	r24, 0x01	; 1
    16ae:	71 f4       	brne	.+28     	; 0x16cc <Timer1_init+0x54>
			OCR1A=Config_Ptr->compare_value;
    16b0:	aa e4       	ldi	r26, 0x4A	; 74
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	e9 81       	ldd	r30, Y+1	; 0x01
    16b6:	fa 81       	ldd	r31, Y+2	; 0x02
    16b8:	82 81       	ldd	r24, Z+2	; 0x02
    16ba:	93 81       	ldd	r25, Z+3	; 0x03
    16bc:	11 96       	adiw	r26, 0x01	; 1
    16be:	9c 93       	st	X, r25
    16c0:	8e 93       	st	-X, r24
			TIMSK = (1<<OCIE1A);
    16c2:	e9 e5       	ldi	r30, 0x59	; 89
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 e1       	ldi	r24, 0x10	; 16
    16c8:	80 83       	st	Z, r24
    16ca:	04 c0       	rjmp	.+8      	; 0x16d4 <Timer1_init+0x5c>
		}
		else{
			TIMSK = (1<<TOIE1);
    16cc:	e9 e5       	ldi	r30, 0x59	; 89
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	84 e0       	ldi	r24, 0x04	; 4
    16d2:	80 83       	st	Z, r24
		}
		TCCR1B = ( TCCR1B & 0xF8 ) | ( Config_Ptr->prescaler );
    16d4:	ae e4       	ldi	r26, 0x4E	; 78
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	ee e4       	ldi	r30, 0x4E	; 78
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	98 2f       	mov	r25, r24
    16e0:	98 7f       	andi	r25, 0xF8	; 248
    16e2:	e9 81       	ldd	r30, Y+1	; 0x01
    16e4:	fa 81       	ldd	r31, Y+2	; 0x02
    16e6:	84 81       	ldd	r24, Z+4	; 0x04
    16e8:	89 2b       	or	r24, r25
    16ea:	8c 93       	st	X, r24
		TCCR1B = ( TCCR1B & 0xF7 ) | ( (Config_Ptr->mode)<<3 );
    16ec:	ae e4       	ldi	r26, 0x4E	; 78
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	ee e4       	ldi	r30, 0x4E	; 78
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	28 2f       	mov	r18, r24
    16f8:	27 7f       	andi	r18, 0xF7	; 247
    16fa:	e9 81       	ldd	r30, Y+1	; 0x01
    16fc:	fa 81       	ldd	r31, Y+2	; 0x02
    16fe:	85 81       	ldd	r24, Z+5	; 0x05
    1700:	88 2f       	mov	r24, r24
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	88 0f       	add	r24, r24
    1706:	99 1f       	adc	r25, r25
    1708:	88 0f       	add	r24, r24
    170a:	99 1f       	adc	r25, r25
    170c:	88 0f       	add	r24, r24
    170e:	99 1f       	adc	r25, r25
    1710:	82 2b       	or	r24, r18
    1712:	8c 93       	st	X, r24

}
    1714:	0f 90       	pop	r0
    1716:	0f 90       	pop	r0
    1718:	cf 91       	pop	r28
    171a:	df 91       	pop	r29
    171c:	08 95       	ret

0000171e <Timer1_deInit>:

 void Timer1_deInit(void){
    171e:	df 93       	push	r29
    1720:	cf 93       	push	r28
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
	 /* Clear All Timer1 Registers */
	 	TCCR1A = 0;
    1726:	ef e4       	ldi	r30, 0x4F	; 79
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	10 82       	st	Z, r1
	 	TCCR1B = 0;
    172c:	ee e4       	ldi	r30, 0x4E	; 78
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	10 82       	st	Z, r1
	 	TCNT1 = 0;
    1732:	ec e4       	ldi	r30, 0x4C	; 76
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	11 82       	std	Z+1, r1	; 0x01
    1738:	10 82       	st	Z, r1
	 	OCR1A=0;
    173a:	ea e4       	ldi	r30, 0x4A	; 74
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	11 82       	std	Z+1, r1	; 0x01
    1740:	10 82       	st	Z, r1
	 	TIMSK &= ~(1<<OCIE1A);
    1742:	a9 e5       	ldi	r26, 0x59	; 89
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e9 e5       	ldi	r30, 0x59	; 89
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	8f 7e       	andi	r24, 0xEF	; 239
    174e:	8c 93       	st	X, r24
	 	TIMSK &= ~(1<<TOIE1);
    1750:	a9 e5       	ldi	r26, 0x59	; 89
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	e9 e5       	ldi	r30, 0x59	; 89
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	8b 7f       	andi	r24, 0xFB	; 251
    175c:	8c 93       	st	X, r24
 }
    175e:	cf 91       	pop	r28
    1760:	df 91       	pop	r29
    1762:	08 95       	ret

00001764 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void)){
    1764:	df 93       	push	r29
    1766:	cf 93       	push	r28
    1768:	00 d0       	rcall	.+0      	; 0x176a <Timer1_setCallBack+0x6>
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62
    176e:	9a 83       	std	Y+2, r25	; 0x02
    1770:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
		g_callBackPtr = a_ptr;
    1772:	89 81       	ldd	r24, Y+1	; 0x01
    1774:	9a 81       	ldd	r25, Y+2	; 0x02
    1776:	90 93 fd 00 	sts	0x00FD, r25
    177a:	80 93 fc 00 	sts	0x00FC, r24
}
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	cf 91       	pop	r28
    1784:	df 91       	pop	r29
    1786:	08 95       	ret

00001788 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1788:	df 93       	push	r29
    178a:	cf 93       	push	r28
    178c:	00 d0       	rcall	.+0      	; 0x178e <GPIO_setupPinDirection+0x6>
    178e:	00 d0       	rcall	.+0      	; 0x1790 <GPIO_setupPinDirection+0x8>
    1790:	0f 92       	push	r0
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
    1796:	89 83       	std	Y+1, r24	; 0x01
    1798:	6a 83       	std	Y+2, r22	; 0x02
    179a:	4b 83       	std	Y+3, r20	; 0x03
	if( port_num >= NUM_OF_PINS_PER_PORT || port_num >= NUM_OF_PORTS ){
    179c:	89 81       	ldd	r24, Y+1	; 0x01
    179e:	88 30       	cpi	r24, 0x08	; 8
    17a0:	08 f0       	brcs	.+2      	; 0x17a4 <GPIO_setupPinDirection+0x1c>
    17a2:	d5 c0       	rjmp	.+426    	; 0x194e <GPIO_setupPinDirection+0x1c6>
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	84 30       	cpi	r24, 0x04	; 4
    17a8:	08 f0       	brcs	.+2      	; 0x17ac <GPIO_setupPinDirection+0x24>
    17aa:	d1 c0       	rjmp	.+418    	; 0x194e <GPIO_setupPinDirection+0x1c6>

	}
	else{
		switch ( port_num ){
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	3d 83       	std	Y+5, r19	; 0x05
    17b4:	2c 83       	std	Y+4, r18	; 0x04
    17b6:	8c 81       	ldd	r24, Y+4	; 0x04
    17b8:	9d 81       	ldd	r25, Y+5	; 0x05
    17ba:	81 30       	cpi	r24, 0x01	; 1
    17bc:	91 05       	cpc	r25, r1
    17be:	09 f4       	brne	.+2      	; 0x17c2 <GPIO_setupPinDirection+0x3a>
    17c0:	43 c0       	rjmp	.+134    	; 0x1848 <GPIO_setupPinDirection+0xc0>
    17c2:	2c 81       	ldd	r18, Y+4	; 0x04
    17c4:	3d 81       	ldd	r19, Y+5	; 0x05
    17c6:	22 30       	cpi	r18, 0x02	; 2
    17c8:	31 05       	cpc	r19, r1
    17ca:	2c f4       	brge	.+10     	; 0x17d6 <GPIO_setupPinDirection+0x4e>
    17cc:	8c 81       	ldd	r24, Y+4	; 0x04
    17ce:	9d 81       	ldd	r25, Y+5	; 0x05
    17d0:	00 97       	sbiw	r24, 0x00	; 0
    17d2:	71 f0       	breq	.+28     	; 0x17f0 <GPIO_setupPinDirection+0x68>
    17d4:	bc c0       	rjmp	.+376    	; 0x194e <GPIO_setupPinDirection+0x1c6>
    17d6:	2c 81       	ldd	r18, Y+4	; 0x04
    17d8:	3d 81       	ldd	r19, Y+5	; 0x05
    17da:	22 30       	cpi	r18, 0x02	; 2
    17dc:	31 05       	cpc	r19, r1
    17de:	09 f4       	brne	.+2      	; 0x17e2 <GPIO_setupPinDirection+0x5a>
    17e0:	5f c0       	rjmp	.+190    	; 0x18a0 <GPIO_setupPinDirection+0x118>
    17e2:	8c 81       	ldd	r24, Y+4	; 0x04
    17e4:	9d 81       	ldd	r25, Y+5	; 0x05
    17e6:	83 30       	cpi	r24, 0x03	; 3
    17e8:	91 05       	cpc	r25, r1
    17ea:	09 f4       	brne	.+2      	; 0x17ee <GPIO_setupPinDirection+0x66>
    17ec:	85 c0       	rjmp	.+266    	; 0x18f8 <GPIO_setupPinDirection+0x170>
    17ee:	af c0       	rjmp	.+350    	; 0x194e <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID :

			if( direction == PIN_OUTPUT){
    17f0:	8b 81       	ldd	r24, Y+3	; 0x03
    17f2:	81 30       	cpi	r24, 0x01	; 1
    17f4:	a1 f4       	brne	.+40     	; 0x181e <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA,pin_num);
    17f6:	aa e3       	ldi	r26, 0x3A	; 58
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	ea e3       	ldi	r30, 0x3A	; 58
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	48 2f       	mov	r20, r24
    1802:	8a 81       	ldd	r24, Y+2	; 0x02
    1804:	28 2f       	mov	r18, r24
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	02 2e       	mov	r0, r18
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <GPIO_setupPinDirection+0x8c>
    1810:	88 0f       	add	r24, r24
    1812:	99 1f       	adc	r25, r25
    1814:	0a 94       	dec	r0
    1816:	e2 f7       	brpl	.-8      	; 0x1810 <GPIO_setupPinDirection+0x88>
    1818:	84 2b       	or	r24, r20
    181a:	8c 93       	st	X, r24
    181c:	98 c0       	rjmp	.+304    	; 0x194e <GPIO_setupPinDirection+0x1c6>
			}
			else{
				CLEAR_BIT(DDRA,pin_num);
    181e:	aa e3       	ldi	r26, 0x3A	; 58
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	ea e3       	ldi	r30, 0x3A	; 58
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	48 2f       	mov	r20, r24
    182a:	8a 81       	ldd	r24, Y+2	; 0x02
    182c:	28 2f       	mov	r18, r24
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	02 2e       	mov	r0, r18
    1836:	02 c0       	rjmp	.+4      	; 0x183c <GPIO_setupPinDirection+0xb4>
    1838:	88 0f       	add	r24, r24
    183a:	99 1f       	adc	r25, r25
    183c:	0a 94       	dec	r0
    183e:	e2 f7       	brpl	.-8      	; 0x1838 <GPIO_setupPinDirection+0xb0>
    1840:	80 95       	com	r24
    1842:	84 23       	and	r24, r20
    1844:	8c 93       	st	X, r24
    1846:	83 c0       	rjmp	.+262    	; 0x194e <GPIO_setupPinDirection+0x1c6>
			}
			break;

		case PORTB_ID :

			if( direction == PIN_OUTPUT){
    1848:	8b 81       	ldd	r24, Y+3	; 0x03
    184a:	81 30       	cpi	r24, 0x01	; 1
    184c:	a1 f4       	brne	.+40     	; 0x1876 <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB,pin_num);
    184e:	a7 e3       	ldi	r26, 0x37	; 55
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	e7 e3       	ldi	r30, 0x37	; 55
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	48 2f       	mov	r20, r24
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	28 2f       	mov	r18, r24
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	02 2e       	mov	r0, r18
    1866:	02 c0       	rjmp	.+4      	; 0x186c <GPIO_setupPinDirection+0xe4>
    1868:	88 0f       	add	r24, r24
    186a:	99 1f       	adc	r25, r25
    186c:	0a 94       	dec	r0
    186e:	e2 f7       	brpl	.-8      	; 0x1868 <GPIO_setupPinDirection+0xe0>
    1870:	84 2b       	or	r24, r20
    1872:	8c 93       	st	X, r24
    1874:	6c c0       	rjmp	.+216    	; 0x194e <GPIO_setupPinDirection+0x1c6>
			}
			else{
				CLEAR_BIT(DDRB,pin_num);
    1876:	a7 e3       	ldi	r26, 0x37	; 55
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	e7 e3       	ldi	r30, 0x37	; 55
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	48 2f       	mov	r20, r24
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
    1884:	28 2f       	mov	r18, r24
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	02 2e       	mov	r0, r18
    188e:	02 c0       	rjmp	.+4      	; 0x1894 <GPIO_setupPinDirection+0x10c>
    1890:	88 0f       	add	r24, r24
    1892:	99 1f       	adc	r25, r25
    1894:	0a 94       	dec	r0
    1896:	e2 f7       	brpl	.-8      	; 0x1890 <GPIO_setupPinDirection+0x108>
    1898:	80 95       	com	r24
    189a:	84 23       	and	r24, r20
    189c:	8c 93       	st	X, r24
    189e:	57 c0       	rjmp	.+174    	; 0x194e <GPIO_setupPinDirection+0x1c6>
			}
			break;

		case PORTC_ID :

			if( direction == PIN_OUTPUT){
    18a0:	8b 81       	ldd	r24, Y+3	; 0x03
    18a2:	81 30       	cpi	r24, 0x01	; 1
    18a4:	a1 f4       	brne	.+40     	; 0x18ce <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC,pin_num);
    18a6:	a4 e3       	ldi	r26, 0x34	; 52
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	e4 e3       	ldi	r30, 0x34	; 52
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	48 2f       	mov	r20, r24
    18b2:	8a 81       	ldd	r24, Y+2	; 0x02
    18b4:	28 2f       	mov	r18, r24
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	02 2e       	mov	r0, r18
    18be:	02 c0       	rjmp	.+4      	; 0x18c4 <GPIO_setupPinDirection+0x13c>
    18c0:	88 0f       	add	r24, r24
    18c2:	99 1f       	adc	r25, r25
    18c4:	0a 94       	dec	r0
    18c6:	e2 f7       	brpl	.-8      	; 0x18c0 <GPIO_setupPinDirection+0x138>
    18c8:	84 2b       	or	r24, r20
    18ca:	8c 93       	st	X, r24
    18cc:	40 c0       	rjmp	.+128    	; 0x194e <GPIO_setupPinDirection+0x1c6>
			}
			else{
				CLEAR_BIT(DDRC,pin_num);
    18ce:	a4 e3       	ldi	r26, 0x34	; 52
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	e4 e3       	ldi	r30, 0x34	; 52
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	48 2f       	mov	r20, r24
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	28 2f       	mov	r18, r24
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	02 2e       	mov	r0, r18
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <GPIO_setupPinDirection+0x164>
    18e8:	88 0f       	add	r24, r24
    18ea:	99 1f       	adc	r25, r25
    18ec:	0a 94       	dec	r0
    18ee:	e2 f7       	brpl	.-8      	; 0x18e8 <GPIO_setupPinDirection+0x160>
    18f0:	80 95       	com	r24
    18f2:	84 23       	and	r24, r20
    18f4:	8c 93       	st	X, r24
    18f6:	2b c0       	rjmp	.+86     	; 0x194e <GPIO_setupPinDirection+0x1c6>
			}
			break;

		case PORTD_ID :

			if( direction == PIN_OUTPUT){
    18f8:	8b 81       	ldd	r24, Y+3	; 0x03
    18fa:	81 30       	cpi	r24, 0x01	; 1
    18fc:	a1 f4       	brne	.+40     	; 0x1926 <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD,pin_num);
    18fe:	a1 e3       	ldi	r26, 0x31	; 49
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	e1 e3       	ldi	r30, 0x31	; 49
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	48 2f       	mov	r20, r24
    190a:	8a 81       	ldd	r24, Y+2	; 0x02
    190c:	28 2f       	mov	r18, r24
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	02 2e       	mov	r0, r18
    1916:	02 c0       	rjmp	.+4      	; 0x191c <GPIO_setupPinDirection+0x194>
    1918:	88 0f       	add	r24, r24
    191a:	99 1f       	adc	r25, r25
    191c:	0a 94       	dec	r0
    191e:	e2 f7       	brpl	.-8      	; 0x1918 <GPIO_setupPinDirection+0x190>
    1920:	84 2b       	or	r24, r20
    1922:	8c 93       	st	X, r24
    1924:	14 c0       	rjmp	.+40     	; 0x194e <GPIO_setupPinDirection+0x1c6>
			}
			else{
				CLEAR_BIT(DDRD,pin_num);
    1926:	a1 e3       	ldi	r26, 0x31	; 49
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	e1 e3       	ldi	r30, 0x31	; 49
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	48 2f       	mov	r20, r24
    1932:	8a 81       	ldd	r24, Y+2	; 0x02
    1934:	28 2f       	mov	r18, r24
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	02 2e       	mov	r0, r18
    193e:	02 c0       	rjmp	.+4      	; 0x1944 <GPIO_setupPinDirection+0x1bc>
    1940:	88 0f       	add	r24, r24
    1942:	99 1f       	adc	r25, r25
    1944:	0a 94       	dec	r0
    1946:	e2 f7       	brpl	.-8      	; 0x1940 <GPIO_setupPinDirection+0x1b8>
    1948:	80 95       	com	r24
    194a:	84 23       	and	r24, r20
    194c:	8c 93       	st	X, r24
			}
			break;

		}
	}
}
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	0f 90       	pop	r0
    1958:	cf 91       	pop	r28
    195a:	df 91       	pop	r29
    195c:	08 95       	ret

0000195e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    195e:	df 93       	push	r29
    1960:	cf 93       	push	r28
    1962:	00 d0       	rcall	.+0      	; 0x1964 <GPIO_writePin+0x6>
    1964:	00 d0       	rcall	.+0      	; 0x1966 <GPIO_writePin+0x8>
    1966:	0f 92       	push	r0
    1968:	cd b7       	in	r28, 0x3d	; 61
    196a:	de b7       	in	r29, 0x3e	; 62
    196c:	89 83       	std	Y+1, r24	; 0x01
    196e:	6a 83       	std	Y+2, r22	; 0x02
    1970:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	88 30       	cpi	r24, 0x08	; 8
    1976:	08 f0       	brcs	.+2      	; 0x197a <GPIO_writePin+0x1c>
    1978:	d5 c0       	rjmp	.+426    	; 0x1b24 <GPIO_writePin+0x1c6>
    197a:	89 81       	ldd	r24, Y+1	; 0x01
    197c:	84 30       	cpi	r24, 0x04	; 4
    197e:	08 f0       	brcs	.+2      	; 0x1982 <GPIO_writePin+0x24>
    1980:	d1 c0       	rjmp	.+418    	; 0x1b24 <GPIO_writePin+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
		switch ( port_num ){
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	28 2f       	mov	r18, r24
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	3d 83       	std	Y+5, r19	; 0x05
    198a:	2c 83       	std	Y+4, r18	; 0x04
    198c:	8c 81       	ldd	r24, Y+4	; 0x04
    198e:	9d 81       	ldd	r25, Y+5	; 0x05
    1990:	81 30       	cpi	r24, 0x01	; 1
    1992:	91 05       	cpc	r25, r1
    1994:	09 f4       	brne	.+2      	; 0x1998 <GPIO_writePin+0x3a>
    1996:	43 c0       	rjmp	.+134    	; 0x1a1e <GPIO_writePin+0xc0>
    1998:	2c 81       	ldd	r18, Y+4	; 0x04
    199a:	3d 81       	ldd	r19, Y+5	; 0x05
    199c:	22 30       	cpi	r18, 0x02	; 2
    199e:	31 05       	cpc	r19, r1
    19a0:	2c f4       	brge	.+10     	; 0x19ac <GPIO_writePin+0x4e>
    19a2:	8c 81       	ldd	r24, Y+4	; 0x04
    19a4:	9d 81       	ldd	r25, Y+5	; 0x05
    19a6:	00 97       	sbiw	r24, 0x00	; 0
    19a8:	71 f0       	breq	.+28     	; 0x19c6 <GPIO_writePin+0x68>
    19aa:	bc c0       	rjmp	.+376    	; 0x1b24 <GPIO_writePin+0x1c6>
    19ac:	2c 81       	ldd	r18, Y+4	; 0x04
    19ae:	3d 81       	ldd	r19, Y+5	; 0x05
    19b0:	22 30       	cpi	r18, 0x02	; 2
    19b2:	31 05       	cpc	r19, r1
    19b4:	09 f4       	brne	.+2      	; 0x19b8 <GPIO_writePin+0x5a>
    19b6:	5f c0       	rjmp	.+190    	; 0x1a76 <GPIO_writePin+0x118>
    19b8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ba:	9d 81       	ldd	r25, Y+5	; 0x05
    19bc:	83 30       	cpi	r24, 0x03	; 3
    19be:	91 05       	cpc	r25, r1
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <GPIO_writePin+0x66>
    19c2:	85 c0       	rjmp	.+266    	; 0x1ace <GPIO_writePin+0x170>
    19c4:	af c0       	rjmp	.+350    	; 0x1b24 <GPIO_writePin+0x1c6>
		case PORTA_ID :


			if( value == LOGIC_HIGH){
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	81 30       	cpi	r24, 0x01	; 1
    19ca:	a1 f4       	brne	.+40     	; 0x19f4 <GPIO_writePin+0x96>
				SET_BIT(PORTA,pin_num);
    19cc:	ab e3       	ldi	r26, 0x3B	; 59
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	eb e3       	ldi	r30, 0x3B	; 59
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	48 2f       	mov	r20, r24
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	28 2f       	mov	r18, r24
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	02 2e       	mov	r0, r18
    19e4:	02 c0       	rjmp	.+4      	; 0x19ea <GPIO_writePin+0x8c>
    19e6:	88 0f       	add	r24, r24
    19e8:	99 1f       	adc	r25, r25
    19ea:	0a 94       	dec	r0
    19ec:	e2 f7       	brpl	.-8      	; 0x19e6 <GPIO_writePin+0x88>
    19ee:	84 2b       	or	r24, r20
    19f0:	8c 93       	st	X, r24
    19f2:	98 c0       	rjmp	.+304    	; 0x1b24 <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTA,pin_num);
    19f4:	ab e3       	ldi	r26, 0x3B	; 59
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	eb e3       	ldi	r30, 0x3B	; 59
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	48 2f       	mov	r20, r24
    1a00:	8a 81       	ldd	r24, Y+2	; 0x02
    1a02:	28 2f       	mov	r18, r24
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	02 2e       	mov	r0, r18
    1a0c:	02 c0       	rjmp	.+4      	; 0x1a12 <GPIO_writePin+0xb4>
    1a0e:	88 0f       	add	r24, r24
    1a10:	99 1f       	adc	r25, r25
    1a12:	0a 94       	dec	r0
    1a14:	e2 f7       	brpl	.-8      	; 0x1a0e <GPIO_writePin+0xb0>
    1a16:	80 95       	com	r24
    1a18:	84 23       	and	r24, r20
    1a1a:	8c 93       	st	X, r24
    1a1c:	83 c0       	rjmp	.+262    	; 0x1b24 <GPIO_writePin+0x1c6>
			break;

		case PORTB_ID :


			if( value == LOGIC_HIGH){
    1a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a20:	81 30       	cpi	r24, 0x01	; 1
    1a22:	a1 f4       	brne	.+40     	; 0x1a4c <GPIO_writePin+0xee>
				SET_BIT(PORTB,pin_num);
    1a24:	a8 e3       	ldi	r26, 0x38	; 56
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	e8 e3       	ldi	r30, 0x38	; 56
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	48 2f       	mov	r20, r24
    1a30:	8a 81       	ldd	r24, Y+2	; 0x02
    1a32:	28 2f       	mov	r18, r24
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	02 2e       	mov	r0, r18
    1a3c:	02 c0       	rjmp	.+4      	; 0x1a42 <GPIO_writePin+0xe4>
    1a3e:	88 0f       	add	r24, r24
    1a40:	99 1f       	adc	r25, r25
    1a42:	0a 94       	dec	r0
    1a44:	e2 f7       	brpl	.-8      	; 0x1a3e <GPIO_writePin+0xe0>
    1a46:	84 2b       	or	r24, r20
    1a48:	8c 93       	st	X, r24
    1a4a:	6c c0       	rjmp	.+216    	; 0x1b24 <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTB,pin_num);
    1a4c:	a8 e3       	ldi	r26, 0x38	; 56
    1a4e:	b0 e0       	ldi	r27, 0x00	; 0
    1a50:	e8 e3       	ldi	r30, 0x38	; 56
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	48 2f       	mov	r20, r24
    1a58:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5a:	28 2f       	mov	r18, r24
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	02 2e       	mov	r0, r18
    1a64:	02 c0       	rjmp	.+4      	; 0x1a6a <GPIO_writePin+0x10c>
    1a66:	88 0f       	add	r24, r24
    1a68:	99 1f       	adc	r25, r25
    1a6a:	0a 94       	dec	r0
    1a6c:	e2 f7       	brpl	.-8      	; 0x1a66 <GPIO_writePin+0x108>
    1a6e:	80 95       	com	r24
    1a70:	84 23       	and	r24, r20
    1a72:	8c 93       	st	X, r24
    1a74:	57 c0       	rjmp	.+174    	; 0x1b24 <GPIO_writePin+0x1c6>
			break;

		case PORTC_ID :


			if( value == LOGIC_HIGH){
    1a76:	8b 81       	ldd	r24, Y+3	; 0x03
    1a78:	81 30       	cpi	r24, 0x01	; 1
    1a7a:	a1 f4       	brne	.+40     	; 0x1aa4 <GPIO_writePin+0x146>
				SET_BIT(PORTC,pin_num);
    1a7c:	a5 e3       	ldi	r26, 0x35	; 53
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	e5 e3       	ldi	r30, 0x35	; 53
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	48 2f       	mov	r20, r24
    1a88:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8a:	28 2f       	mov	r18, r24
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	02 2e       	mov	r0, r18
    1a94:	02 c0       	rjmp	.+4      	; 0x1a9a <GPIO_writePin+0x13c>
    1a96:	88 0f       	add	r24, r24
    1a98:	99 1f       	adc	r25, r25
    1a9a:	0a 94       	dec	r0
    1a9c:	e2 f7       	brpl	.-8      	; 0x1a96 <GPIO_writePin+0x138>
    1a9e:	84 2b       	or	r24, r20
    1aa0:	8c 93       	st	X, r24
    1aa2:	40 c0       	rjmp	.+128    	; 0x1b24 <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTC,pin_num);
    1aa4:	a5 e3       	ldi	r26, 0x35	; 53
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	e5 e3       	ldi	r30, 0x35	; 53
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	48 2f       	mov	r20, r24
    1ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab2:	28 2f       	mov	r18, r24
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	02 2e       	mov	r0, r18
    1abc:	02 c0       	rjmp	.+4      	; 0x1ac2 <GPIO_writePin+0x164>
    1abe:	88 0f       	add	r24, r24
    1ac0:	99 1f       	adc	r25, r25
    1ac2:	0a 94       	dec	r0
    1ac4:	e2 f7       	brpl	.-8      	; 0x1abe <GPIO_writePin+0x160>
    1ac6:	80 95       	com	r24
    1ac8:	84 23       	and	r24, r20
    1aca:	8c 93       	st	X, r24
    1acc:	2b c0       	rjmp	.+86     	; 0x1b24 <GPIO_writePin+0x1c6>
			break;

		case PORTD_ID :


			if( value == LOGIC_HIGH){
    1ace:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad0:	81 30       	cpi	r24, 0x01	; 1
    1ad2:	a1 f4       	brne	.+40     	; 0x1afc <GPIO_writePin+0x19e>
				SET_BIT(PORTD,pin_num);
    1ad4:	a2 e3       	ldi	r26, 0x32	; 50
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	e2 e3       	ldi	r30, 0x32	; 50
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	48 2f       	mov	r20, r24
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae2:	28 2f       	mov	r18, r24
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	02 2e       	mov	r0, r18
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <GPIO_writePin+0x194>
    1aee:	88 0f       	add	r24, r24
    1af0:	99 1f       	adc	r25, r25
    1af2:	0a 94       	dec	r0
    1af4:	e2 f7       	brpl	.-8      	; 0x1aee <GPIO_writePin+0x190>
    1af6:	84 2b       	or	r24, r20
    1af8:	8c 93       	st	X, r24
    1afa:	14 c0       	rjmp	.+40     	; 0x1b24 <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTD,pin_num);
    1afc:	a2 e3       	ldi	r26, 0x32	; 50
    1afe:	b0 e0       	ldi	r27, 0x00	; 0
    1b00:	e2 e3       	ldi	r30, 0x32	; 50
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	80 81       	ld	r24, Z
    1b06:	48 2f       	mov	r20, r24
    1b08:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0a:	28 2f       	mov	r18, r24
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	02 2e       	mov	r0, r18
    1b14:	02 c0       	rjmp	.+4      	; 0x1b1a <GPIO_writePin+0x1bc>
    1b16:	88 0f       	add	r24, r24
    1b18:	99 1f       	adc	r25, r25
    1b1a:	0a 94       	dec	r0
    1b1c:	e2 f7       	brpl	.-8      	; 0x1b16 <GPIO_writePin+0x1b8>
    1b1e:	80 95       	com	r24
    1b20:	84 23       	and	r24, r20
    1b22:	8c 93       	st	X, r24
			}
			break;

		}
	}
}
    1b24:	0f 90       	pop	r0
    1b26:	0f 90       	pop	r0
    1b28:	0f 90       	pop	r0
    1b2a:	0f 90       	pop	r0
    1b2c:	0f 90       	pop	r0
    1b2e:	cf 91       	pop	r28
    1b30:	df 91       	pop	r29
    1b32:	08 95       	ret

00001b34 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{ if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b34:	df 93       	push	r29
    1b36:	cf 93       	push	r28
    1b38:	00 d0       	rcall	.+0      	; 0x1b3a <GPIO_readPin+0x6>
    1b3a:	00 d0       	rcall	.+0      	; 0x1b3c <GPIO_readPin+0x8>
    1b3c:	00 d0       	rcall	.+0      	; 0x1b3e <GPIO_readPin+0xa>
    1b3e:	cd b7       	in	r28, 0x3d	; 61
    1b40:	de b7       	in	r29, 0x3e	; 62
    1b42:	89 83       	std	Y+1, r24	; 0x01
    1b44:	6a 83       	std	Y+2, r22	; 0x02
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	88 30       	cpi	r24, 0x08	; 8
    1b4a:	08 f0       	brcs	.+2      	; 0x1b4e <GPIO_readPin+0x1a>
    1b4c:	85 c0       	rjmp	.+266    	; 0x1c58 <GPIO_readPin+0x124>
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	84 30       	cpi	r24, 0x04	; 4
    1b52:	08 f0       	brcs	.+2      	; 0x1b56 <GPIO_readPin+0x22>
    1b54:	81 c0       	rjmp	.+258    	; 0x1c58 <GPIO_readPin+0x124>
{
	/* Do Nothing */
}
else
{
	switch ( port_num ){
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
    1b58:	28 2f       	mov	r18, r24
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	3d 83       	std	Y+5, r19	; 0x05
    1b5e:	2c 83       	std	Y+4, r18	; 0x04
    1b60:	4c 81       	ldd	r20, Y+4	; 0x04
    1b62:	5d 81       	ldd	r21, Y+5	; 0x05
    1b64:	41 30       	cpi	r20, 0x01	; 1
    1b66:	51 05       	cpc	r21, r1
    1b68:	79 f1       	breq	.+94     	; 0x1bc8 <GPIO_readPin+0x94>
    1b6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b6e:	82 30       	cpi	r24, 0x02	; 2
    1b70:	91 05       	cpc	r25, r1
    1b72:	34 f4       	brge	.+12     	; 0x1b80 <GPIO_readPin+0x4c>
    1b74:	2c 81       	ldd	r18, Y+4	; 0x04
    1b76:	3d 81       	ldd	r19, Y+5	; 0x05
    1b78:	21 15       	cp	r18, r1
    1b7a:	31 05       	cpc	r19, r1
    1b7c:	69 f0       	breq	.+26     	; 0x1b98 <GPIO_readPin+0x64>
    1b7e:	6c c0       	rjmp	.+216    	; 0x1c58 <GPIO_readPin+0x124>
    1b80:	4c 81       	ldd	r20, Y+4	; 0x04
    1b82:	5d 81       	ldd	r21, Y+5	; 0x05
    1b84:	42 30       	cpi	r20, 0x02	; 2
    1b86:	51 05       	cpc	r21, r1
    1b88:	b9 f1       	breq	.+110    	; 0x1bf8 <GPIO_readPin+0xc4>
    1b8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b8e:	83 30       	cpi	r24, 0x03	; 3
    1b90:	91 05       	cpc	r25, r1
    1b92:	09 f4       	brne	.+2      	; 0x1b96 <GPIO_readPin+0x62>
    1b94:	49 c0       	rjmp	.+146    	; 0x1c28 <GPIO_readPin+0xf4>
    1b96:	60 c0       	rjmp	.+192    	; 0x1c58 <GPIO_readPin+0x124>
	case PORTA_ID :


		if(BIT_IS_SET(PINA,pin_num)){
    1b98:	e9 e3       	ldi	r30, 0x39	; 57
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	80 81       	ld	r24, Z
    1b9e:	28 2f       	mov	r18, r24
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba4:	88 2f       	mov	r24, r24
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	a9 01       	movw	r20, r18
    1baa:	02 c0       	rjmp	.+4      	; 0x1bb0 <GPIO_readPin+0x7c>
    1bac:	55 95       	asr	r21
    1bae:	47 95       	ror	r20
    1bb0:	8a 95       	dec	r24
    1bb2:	e2 f7       	brpl	.-8      	; 0x1bac <GPIO_readPin+0x78>
    1bb4:	ca 01       	movw	r24, r20
    1bb6:	81 70       	andi	r24, 0x01	; 1
    1bb8:	90 70       	andi	r25, 0x00	; 0
    1bba:	88 23       	and	r24, r24
    1bbc:	19 f0       	breq	.+6      	; 0x1bc4 <GPIO_readPin+0x90>
			return 1;
    1bbe:	51 e0       	ldi	r21, 0x01	; 1
    1bc0:	5b 83       	std	Y+3, r21	; 0x03
    1bc2:	4b c0       	rjmp	.+150    	; 0x1c5a <GPIO_readPin+0x126>
		}
		else{
			return 0;
    1bc4:	1b 82       	std	Y+3, r1	; 0x03
    1bc6:	49 c0       	rjmp	.+146    	; 0x1c5a <GPIO_readPin+0x126>
		break;

	case PORTB_ID :


		if(BIT_IS_SET(PINB,pin_num)){
    1bc8:	e6 e3       	ldi	r30, 0x36	; 54
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	28 2f       	mov	r18, r24
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd4:	88 2f       	mov	r24, r24
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	a9 01       	movw	r20, r18
    1bda:	02 c0       	rjmp	.+4      	; 0x1be0 <GPIO_readPin+0xac>
    1bdc:	55 95       	asr	r21
    1bde:	47 95       	ror	r20
    1be0:	8a 95       	dec	r24
    1be2:	e2 f7       	brpl	.-8      	; 0x1bdc <GPIO_readPin+0xa8>
    1be4:	ca 01       	movw	r24, r20
    1be6:	81 70       	andi	r24, 0x01	; 1
    1be8:	90 70       	andi	r25, 0x00	; 0
    1bea:	88 23       	and	r24, r24
    1bec:	19 f0       	breq	.+6      	; 0x1bf4 <GPIO_readPin+0xc0>
			return 1;
    1bee:	51 e0       	ldi	r21, 0x01	; 1
    1bf0:	5b 83       	std	Y+3, r21	; 0x03
    1bf2:	33 c0       	rjmp	.+102    	; 0x1c5a <GPIO_readPin+0x126>
		}
		else{
			return 0;
    1bf4:	1b 82       	std	Y+3, r1	; 0x03
    1bf6:	31 c0       	rjmp	.+98     	; 0x1c5a <GPIO_readPin+0x126>
		break;

	case PORTC_ID :


		if(BIT_IS_SET(PINC,pin_num)){
    1bf8:	e3 e3       	ldi	r30, 0x33	; 51
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	28 2f       	mov	r18, r24
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	8a 81       	ldd	r24, Y+2	; 0x02
    1c04:	88 2f       	mov	r24, r24
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	a9 01       	movw	r20, r18
    1c0a:	02 c0       	rjmp	.+4      	; 0x1c10 <GPIO_readPin+0xdc>
    1c0c:	55 95       	asr	r21
    1c0e:	47 95       	ror	r20
    1c10:	8a 95       	dec	r24
    1c12:	e2 f7       	brpl	.-8      	; 0x1c0c <GPIO_readPin+0xd8>
    1c14:	ca 01       	movw	r24, r20
    1c16:	81 70       	andi	r24, 0x01	; 1
    1c18:	90 70       	andi	r25, 0x00	; 0
    1c1a:	88 23       	and	r24, r24
    1c1c:	19 f0       	breq	.+6      	; 0x1c24 <GPIO_readPin+0xf0>
			return 1;
    1c1e:	51 e0       	ldi	r21, 0x01	; 1
    1c20:	5b 83       	std	Y+3, r21	; 0x03
    1c22:	1b c0       	rjmp	.+54     	; 0x1c5a <GPIO_readPin+0x126>
		}
		else{
			return 0;
    1c24:	1b 82       	std	Y+3, r1	; 0x03
    1c26:	19 c0       	rjmp	.+50     	; 0x1c5a <GPIO_readPin+0x126>
		break;

	case PORTD_ID :


		if(BIT_IS_SET(PIND,pin_num)){
    1c28:	e0 e3       	ldi	r30, 0x30	; 48
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	28 2f       	mov	r18, r24
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	8a 81       	ldd	r24, Y+2	; 0x02
    1c34:	88 2f       	mov	r24, r24
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	a9 01       	movw	r20, r18
    1c3a:	02 c0       	rjmp	.+4      	; 0x1c40 <GPIO_readPin+0x10c>
    1c3c:	55 95       	asr	r21
    1c3e:	47 95       	ror	r20
    1c40:	8a 95       	dec	r24
    1c42:	e2 f7       	brpl	.-8      	; 0x1c3c <GPIO_readPin+0x108>
    1c44:	ca 01       	movw	r24, r20
    1c46:	81 70       	andi	r24, 0x01	; 1
    1c48:	90 70       	andi	r25, 0x00	; 0
    1c4a:	88 23       	and	r24, r24
    1c4c:	19 f0       	breq	.+6      	; 0x1c54 <GPIO_readPin+0x120>
			return 1;
    1c4e:	51 e0       	ldi	r21, 0x01	; 1
    1c50:	5b 83       	std	Y+3, r21	; 0x03
    1c52:	03 c0       	rjmp	.+6      	; 0x1c5a <GPIO_readPin+0x126>
		}
		else{
			return 0;
    1c54:	1b 82       	std	Y+3, r1	; 0x03
    1c56:	01 c0       	rjmp	.+2      	; 0x1c5a <GPIO_readPin+0x126>
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <GPIO_readPin+0x12a>
		}
		break;

	}
}
}
    1c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5c:	8e 83       	std	Y+6, r24	; 0x06
    1c5e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c60:	26 96       	adiw	r28, 0x06	; 6
    1c62:	0f b6       	in	r0, 0x3f	; 63
    1c64:	f8 94       	cli
    1c66:	de bf       	out	0x3e, r29	; 62
    1c68:	0f be       	out	0x3f, r0	; 63
    1c6a:	cd bf       	out	0x3d, r28	; 61
    1c6c:	cf 91       	pop	r28
    1c6e:	df 91       	pop	r29
    1c70:	08 95       	ret

00001c72 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1c72:	df 93       	push	r29
    1c74:	cf 93       	push	r28
    1c76:	00 d0       	rcall	.+0      	; 0x1c78 <GPIO_setupPortDirection+0x6>
    1c78:	00 d0       	rcall	.+0      	; 0x1c7a <GPIO_setupPortDirection+0x8>
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
    1c7e:	89 83       	std	Y+1, r24	; 0x01
    1c80:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c82:	89 81       	ldd	r24, Y+1	; 0x01
    1c84:	84 30       	cpi	r24, 0x04	; 4
    1c86:	90 f5       	brcc	.+100    	; 0x1cec <GPIO_setupPortDirection+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch ( port_num ){
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	28 2f       	mov	r18, r24
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	3c 83       	std	Y+4, r19	; 0x04
    1c90:	2b 83       	std	Y+3, r18	; 0x03
    1c92:	8b 81       	ldd	r24, Y+3	; 0x03
    1c94:	9c 81       	ldd	r25, Y+4	; 0x04
    1c96:	81 30       	cpi	r24, 0x01	; 1
    1c98:	91 05       	cpc	r25, r1
    1c9a:	d1 f0       	breq	.+52     	; 0x1cd0 <GPIO_setupPortDirection+0x5e>
    1c9c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c9e:	3c 81       	ldd	r19, Y+4	; 0x04
    1ca0:	22 30       	cpi	r18, 0x02	; 2
    1ca2:	31 05       	cpc	r19, r1
    1ca4:	2c f4       	brge	.+10     	; 0x1cb0 <GPIO_setupPortDirection+0x3e>
    1ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca8:	9c 81       	ldd	r25, Y+4	; 0x04
    1caa:	00 97       	sbiw	r24, 0x00	; 0
    1cac:	61 f0       	breq	.+24     	; 0x1cc6 <GPIO_setupPortDirection+0x54>
    1cae:	1e c0       	rjmp	.+60     	; 0x1cec <GPIO_setupPortDirection+0x7a>
    1cb0:	2b 81       	ldd	r18, Y+3	; 0x03
    1cb2:	3c 81       	ldd	r19, Y+4	; 0x04
    1cb4:	22 30       	cpi	r18, 0x02	; 2
    1cb6:	31 05       	cpc	r19, r1
    1cb8:	81 f0       	breq	.+32     	; 0x1cda <GPIO_setupPortDirection+0x68>
    1cba:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cbe:	83 30       	cpi	r24, 0x03	; 3
    1cc0:	91 05       	cpc	r25, r1
    1cc2:	81 f0       	breq	.+32     	; 0x1ce4 <GPIO_setupPortDirection+0x72>
    1cc4:	13 c0       	rjmp	.+38     	; 0x1cec <GPIO_setupPortDirection+0x7a>
		case PORTA_ID :


			DDRA=direction;
    1cc6:	ea e3       	ldi	r30, 0x3A	; 58
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ccc:	80 83       	st	Z, r24
    1cce:	0e c0       	rjmp	.+28     	; 0x1cec <GPIO_setupPortDirection+0x7a>
			break;

		case PORTB_ID :


			DDRB=direction;
    1cd0:	e7 e3       	ldi	r30, 0x37	; 55
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd6:	80 83       	st	Z, r24
    1cd8:	09 c0       	rjmp	.+18     	; 0x1cec <GPIO_setupPortDirection+0x7a>
			break;

		case PORTC_ID :


			DDRC=direction;
    1cda:	e4 e3       	ldi	r30, 0x34	; 52
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce0:	80 83       	st	Z, r24
    1ce2:	04 c0       	rjmp	.+8      	; 0x1cec <GPIO_setupPortDirection+0x7a>
			break;

		case PORTD_ID :


			DDRD=direction;
    1ce4:	e1 e3       	ldi	r30, 0x31	; 49
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cea:	80 83       	st	Z, r24
			break;

		}
	}
}
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	0f 90       	pop	r0
    1cf4:	cf 91       	pop	r28
    1cf6:	df 91       	pop	r29
    1cf8:	08 95       	ret

00001cfa <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1cfa:	df 93       	push	r29
    1cfc:	cf 93       	push	r28
    1cfe:	00 d0       	rcall	.+0      	; 0x1d00 <GPIO_writePort+0x6>
    1d00:	00 d0       	rcall	.+0      	; 0x1d02 <GPIO_writePort+0x8>
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
    1d06:	89 83       	std	Y+1, r24	; 0x01
    1d08:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1d0a:	89 81       	ldd	r24, Y+1	; 0x01
    1d0c:	84 30       	cpi	r24, 0x04	; 4
    1d0e:	90 f5       	brcc	.+100    	; 0x1d74 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch ( port_num ){
    1d10:	89 81       	ldd	r24, Y+1	; 0x01
    1d12:	28 2f       	mov	r18, r24
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	3c 83       	std	Y+4, r19	; 0x04
    1d18:	2b 83       	std	Y+3, r18	; 0x03
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1e:	81 30       	cpi	r24, 0x01	; 1
    1d20:	91 05       	cpc	r25, r1
    1d22:	d1 f0       	breq	.+52     	; 0x1d58 <GPIO_writePort+0x5e>
    1d24:	2b 81       	ldd	r18, Y+3	; 0x03
    1d26:	3c 81       	ldd	r19, Y+4	; 0x04
    1d28:	22 30       	cpi	r18, 0x02	; 2
    1d2a:	31 05       	cpc	r19, r1
    1d2c:	2c f4       	brge	.+10     	; 0x1d38 <GPIO_writePort+0x3e>
    1d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d30:	9c 81       	ldd	r25, Y+4	; 0x04
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	61 f0       	breq	.+24     	; 0x1d4e <GPIO_writePort+0x54>
    1d36:	1e c0       	rjmp	.+60     	; 0x1d74 <GPIO_writePort+0x7a>
    1d38:	2b 81       	ldd	r18, Y+3	; 0x03
    1d3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d3c:	22 30       	cpi	r18, 0x02	; 2
    1d3e:	31 05       	cpc	r19, r1
    1d40:	81 f0       	breq	.+32     	; 0x1d62 <GPIO_writePort+0x68>
    1d42:	8b 81       	ldd	r24, Y+3	; 0x03
    1d44:	9c 81       	ldd	r25, Y+4	; 0x04
    1d46:	83 30       	cpi	r24, 0x03	; 3
    1d48:	91 05       	cpc	r25, r1
    1d4a:	81 f0       	breq	.+32     	; 0x1d6c <GPIO_writePort+0x72>
    1d4c:	13 c0       	rjmp	.+38     	; 0x1d74 <GPIO_writePort+0x7a>
		case PORTA_ID :


			PORTA=value;
    1d4e:	eb e3       	ldi	r30, 0x3B	; 59
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	8a 81       	ldd	r24, Y+2	; 0x02
    1d54:	80 83       	st	Z, r24
    1d56:	0e c0       	rjmp	.+28     	; 0x1d74 <GPIO_writePort+0x7a>
			break;

		case PORTB_ID :


			PORTB=value;
    1d58:	e8 e3       	ldi	r30, 0x38	; 56
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5e:	80 83       	st	Z, r24
    1d60:	09 c0       	rjmp	.+18     	; 0x1d74 <GPIO_writePort+0x7a>
			break;

		case PORTC_ID :


			PORTC=value;
    1d62:	e5 e3       	ldi	r30, 0x35	; 53
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	8a 81       	ldd	r24, Y+2	; 0x02
    1d68:	80 83       	st	Z, r24
    1d6a:	04 c0       	rjmp	.+8      	; 0x1d74 <GPIO_writePort+0x7a>
			break;

		case PORTD_ID :


			PORTD=value;
    1d6c:	e2 e3       	ldi	r30, 0x32	; 50
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	8a 81       	ldd	r24, Y+2	; 0x02
    1d72:	80 83       	st	Z, r24
			break;

		}
	}
}
    1d74:	0f 90       	pop	r0
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	0f 90       	pop	r0
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	08 95       	ret

00001d82 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	00 d0       	rcall	.+0      	; 0x1d88 <GPIO_readPort+0x6>
    1d88:	00 d0       	rcall	.+0      	; 0x1d8a <GPIO_readPort+0x8>
    1d8a:	0f 92       	push	r0
    1d8c:	cd b7       	in	r28, 0x3d	; 61
    1d8e:	de b7       	in	r29, 0x3e	; 62
    1d90:	89 83       	std	Y+1, r24	; 0x01
	if(port_num >= NUM_OF_PORTS)
    1d92:	89 81       	ldd	r24, Y+1	; 0x01
    1d94:	84 30       	cpi	r24, 0x04	; 4
    1d96:	98 f5       	brcc	.+102    	; 0x1dfe <GPIO_readPort+0x7c>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1d98:	89 81       	ldd	r24, Y+1	; 0x01
    1d9a:	28 2f       	mov	r18, r24
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	3c 83       	std	Y+4, r19	; 0x04
    1da0:	2b 83       	std	Y+3, r18	; 0x03
    1da2:	8b 81       	ldd	r24, Y+3	; 0x03
    1da4:	9c 81       	ldd	r25, Y+4	; 0x04
    1da6:	81 30       	cpi	r24, 0x01	; 1
    1da8:	91 05       	cpc	r25, r1
    1daa:	d1 f0       	breq	.+52     	; 0x1de0 <GPIO_readPort+0x5e>
    1dac:	2b 81       	ldd	r18, Y+3	; 0x03
    1dae:	3c 81       	ldd	r19, Y+4	; 0x04
    1db0:	22 30       	cpi	r18, 0x02	; 2
    1db2:	31 05       	cpc	r19, r1
    1db4:	2c f4       	brge	.+10     	; 0x1dc0 <GPIO_readPort+0x3e>
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dba:	00 97       	sbiw	r24, 0x00	; 0
    1dbc:	61 f0       	breq	.+24     	; 0x1dd6 <GPIO_readPort+0x54>
    1dbe:	1f c0       	rjmp	.+62     	; 0x1dfe <GPIO_readPort+0x7c>
    1dc0:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc2:	3c 81       	ldd	r19, Y+4	; 0x04
    1dc4:	22 30       	cpi	r18, 0x02	; 2
    1dc6:	31 05       	cpc	r19, r1
    1dc8:	81 f0       	breq	.+32     	; 0x1dea <GPIO_readPort+0x68>
    1dca:	8b 81       	ldd	r24, Y+3	; 0x03
    1dcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dce:	83 30       	cpi	r24, 0x03	; 3
    1dd0:	91 05       	cpc	r25, r1
    1dd2:	81 f0       	breq	.+32     	; 0x1df4 <GPIO_readPort+0x72>
    1dd4:	14 c0       	rjmp	.+40     	; 0x1dfe <GPIO_readPort+0x7c>
		{
		case PORTA_ID:
			return PINA;
    1dd6:	e9 e3       	ldi	r30, 0x39	; 57
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	90 81       	ld	r25, Z
    1ddc:	9a 83       	std	Y+2, r25	; 0x02
    1dde:	10 c0       	rjmp	.+32     	; 0x1e00 <GPIO_readPort+0x7e>
			break;
		case PORTB_ID:
			return PINB;
    1de0:	e6 e3       	ldi	r30, 0x36	; 54
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	20 81       	ld	r18, Z
    1de6:	2a 83       	std	Y+2, r18	; 0x02
    1de8:	0b c0       	rjmp	.+22     	; 0x1e00 <GPIO_readPort+0x7e>
			break;
		case PORTC_ID:
			return PINC;
    1dea:	e3 e3       	ldi	r30, 0x33	; 51
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	30 81       	ld	r19, Z
    1df0:	3a 83       	std	Y+2, r19	; 0x02
    1df2:	06 c0       	rjmp	.+12     	; 0x1e00 <GPIO_readPort+0x7e>
			break;
		case PORTD_ID:
			return PIND;
    1df4:	e0 e3       	ldi	r30, 0x30	; 48
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	8a 83       	std	Y+2, r24	; 0x02
    1dfc:	01 c0       	rjmp	.+2      	; 0x1e00 <GPIO_readPort+0x7e>
    1dfe:	02 c0       	rjmp	.+4      	; 0x1e04 <GPIO_readPort+0x82>
			break;
		}
	}


}
    1e00:	9a 81       	ldd	r25, Y+2	; 0x02
    1e02:	9d 83       	std	Y+5, r25	; 0x05
    1e04:	8d 81       	ldd	r24, Y+5	; 0x05
    1e06:	0f 90       	pop	r0
    1e08:	0f 90       	pop	r0
    1e0a:	0f 90       	pop	r0
    1e0c:	0f 90       	pop	r0
    1e0e:	0f 90       	pop	r0
    1e10:	cf 91       	pop	r28
    1e12:	df 91       	pop	r29
    1e14:	08 95       	ret

00001e16 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1e16:	df 93       	push	r29
    1e18:	cf 93       	push	r28
    1e1a:	00 d0       	rcall	.+0      	; 0x1e1c <KEYPAD_getPressedKey+0x6>
    1e1c:	cd b7       	in	r28, 0x3d	; 61
    1e1e:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_OUTPUT);
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	60 e0       	ldi	r22, 0x00	; 0
    1e24:	41 e0       	ldi	r20, 0x01	; 1
    1e26:	0e 94 c4 0b 	call	0x1788	; 0x1788 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_OUTPUT);
    1e2a:	80 e0       	ldi	r24, 0x00	; 0
    1e2c:	61 e0       	ldi	r22, 0x01	; 1
    1e2e:	41 e0       	ldi	r20, 0x01	; 1
    1e30:	0e 94 c4 0b 	call	0x1788	; 0x1788 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_OUTPUT);
    1e34:	80 e0       	ldi	r24, 0x00	; 0
    1e36:	62 e0       	ldi	r22, 0x02	; 2
    1e38:	41 e0       	ldi	r20, 0x01	; 1
    1e3a:	0e 94 c4 0b 	call	0x1788	; 0x1788 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_OUTPUT);
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	63 e0       	ldi	r22, 0x03	; 3
    1e42:	41 e0       	ldi	r20, 0x01	; 1
    1e44:	0e 94 c4 0b 	call	0x1788	; 0x1788 <GPIO_setupPinDirection>

	/* Set/Clear the row output pin */
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, KEYPAD_BUTTON_RELEASED);
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	60 e0       	ldi	r22, 0x00	; 0
    1e4c:	41 e0       	ldi	r20, 0x01	; 1
    1e4e:	0e 94 af 0c 	call	0x195e	; 0x195e <GPIO_writePin>
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, KEYPAD_BUTTON_RELEASED);
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	61 e0       	ldi	r22, 0x01	; 1
    1e56:	41 e0       	ldi	r20, 0x01	; 1
    1e58:	0e 94 af 0c 	call	0x195e	; 0x195e <GPIO_writePin>
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, KEYPAD_BUTTON_RELEASED);
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	62 e0       	ldi	r22, 0x02	; 2
    1e60:	41 e0       	ldi	r20, 0x01	; 1
    1e62:	0e 94 af 0c 	call	0x195e	; 0x195e <GPIO_writePin>
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, KEYPAD_BUTTON_RELEASED);
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	63 e0       	ldi	r22, 0x03	; 3
    1e6a:	41 e0       	ldi	r20, 0x01	; 1
    1e6c:	0e 94 af 0c 	call	0x195e	; 0x195e <GPIO_writePin>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	64 e0       	ldi	r22, 0x04	; 4
    1e74:	40 e0       	ldi	r20, 0x00	; 0
    1e76:	0e 94 c4 0b 	call	0x1788	; 0x1788 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	65 e0       	ldi	r22, 0x05	; 5
    1e7e:	40 e0       	ldi	r20, 0x00	; 0
    1e80:	0e 94 c4 0b 	call	0x1788	; 0x1788 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	66 e0       	ldi	r22, 0x06	; 6
    1e88:	40 e0       	ldi	r20, 0x00	; 0
    1e8a:	0e 94 c4 0b 	call	0x1788	; 0x1788 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1e8e:	80 e0       	ldi	r24, 0x00	; 0
    1e90:	67 e0       	ldi	r22, 0x07	; 7
    1e92:	40 e0       	ldi	r20, 0x00	; 0
    1e94:	0e 94 c4 0b 	call	0x1788	; 0x1788 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1e98:	19 82       	std	Y+1, r1	; 0x01
    1e9a:	35 c0       	rjmp	.+106    	; 0x1f06 <KEYPAD_getPressedKey+0xf0>
			 * except this row will be output pin
			 */
//			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1e9c:	80 e0       	ldi	r24, 0x00	; 0
    1e9e:	69 81       	ldd	r22, Y+1	; 0x01
    1ea0:	40 e0       	ldi	r20, 0x00	; 0
    1ea2:	0e 94 af 0c 	call	0x195e	; 0x195e <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1ea6:	1a 82       	std	Y+2, r1	; 0x02
    1ea8:	23 c0       	rjmp	.+70     	; 0x1ef0 <KEYPAD_getPressedKey+0xda>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1eac:	98 2f       	mov	r25, r24
    1eae:	9c 5f       	subi	r25, 0xFC	; 252
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	69 2f       	mov	r22, r25
    1eb4:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <GPIO_readPin>
    1eb8:	88 23       	and	r24, r24
    1eba:	b9 f4       	brne	.+46     	; 0x1eea <KEYPAD_getPressedKey+0xd4>
				{
//					GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
					GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_RELEASED);
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	69 81       	ldd	r22, Y+1	; 0x01
    1ec0:	41 e0       	ldi	r20, 0x01	; 1
    1ec2:	0e 94 af 0c 	call	0x195e	; 0x195e <GPIO_writePin>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1ec6:	89 81       	ldd	r24, Y+1	; 0x01
    1ec8:	88 2f       	mov	r24, r24
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	88 0f       	add	r24, r24
    1ece:	99 1f       	adc	r25, r25
    1ed0:	88 0f       	add	r24, r24
    1ed2:	99 1f       	adc	r25, r25
    1ed4:	98 2f       	mov	r25, r24
    1ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed8:	89 0f       	add	r24, r25
    1eda:	8f 5f       	subi	r24, 0xFF	; 255
    1edc:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <KEYPAD_4x4_adjustKeyNumber>
			}
//			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_RELEASED);
		}
	}
}
    1ee0:	0f 90       	pop	r0
    1ee2:	0f 90       	pop	r0
    1ee4:	cf 91       	pop	r28
    1ee6:	df 91       	pop	r29
    1ee8:	08 95       	ret
//			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1eea:	8a 81       	ldd	r24, Y+2	; 0x02
    1eec:	8f 5f       	subi	r24, 0xFF	; 255
    1eee:	8a 83       	std	Y+2, r24	; 0x02
    1ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef2:	84 30       	cpi	r24, 0x04	; 4
    1ef4:	d0 f2       	brcs	.-76     	; 0x1eaa <KEYPAD_getPressedKey+0x94>
						#endif
					#endif
				}
			}
//			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_RELEASED);
    1ef6:	80 e0       	ldi	r24, 0x00	; 0
    1ef8:	69 81       	ldd	r22, Y+1	; 0x01
    1efa:	41 e0       	ldi	r20, 0x01	; 1
    1efc:	0e 94 af 0c 	call	0x195e	; 0x195e <GPIO_writePin>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
    1f02:	8f 5f       	subi	r24, 0xFF	; 255
    1f04:	89 83       	std	Y+1, r24	; 0x01
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	84 30       	cpi	r24, 0x04	; 4
    1f0a:	40 f2       	brcs	.-112    	; 0x1e9c <KEYPAD_getPressedKey+0x86>
    1f0c:	c5 cf       	rjmp	.-118    	; 0x1e98 <KEYPAD_getPressedKey+0x82>

00001f0e <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1f0e:	df 93       	push	r29
    1f10:	cf 93       	push	r28
    1f12:	00 d0       	rcall	.+0      	; 0x1f14 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1f14:	00 d0       	rcall	.+0      	; 0x1f16 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1f16:	cd b7       	in	r28, 0x3d	; 61
    1f18:	de b7       	in	r29, 0x3e	; 62
    1f1a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1f1c:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f20:	28 2f       	mov	r18, r24
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	3c 83       	std	Y+4, r19	; 0x04
    1f26:	2b 83       	std	Y+3, r18	; 0x03
    1f28:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f2c:	88 30       	cpi	r24, 0x08	; 8
    1f2e:	91 05       	cpc	r25, r1
    1f30:	09 f4       	brne	.+2      	; 0x1f34 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1f32:	70 c0       	rjmp	.+224    	; 0x2014 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1f34:	2b 81       	ldd	r18, Y+3	; 0x03
    1f36:	3c 81       	ldd	r19, Y+4	; 0x04
    1f38:	29 30       	cpi	r18, 0x09	; 9
    1f3a:	31 05       	cpc	r19, r1
    1f3c:	5c f5       	brge	.+86     	; 0x1f94 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f40:	9c 81       	ldd	r25, Y+4	; 0x04
    1f42:	84 30       	cpi	r24, 0x04	; 4
    1f44:	91 05       	cpc	r25, r1
    1f46:	09 f4       	brne	.+2      	; 0x1f4a <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1f48:	59 c0       	rjmp	.+178    	; 0x1ffc <KEYPAD_4x4_adjustKeyNumber+0xee>
    1f4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f4c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f4e:	25 30       	cpi	r18, 0x05	; 5
    1f50:	31 05       	cpc	r19, r1
    1f52:	9c f4       	brge	.+38     	; 0x1f7a <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1f54:	8b 81       	ldd	r24, Y+3	; 0x03
    1f56:	9c 81       	ldd	r25, Y+4	; 0x04
    1f58:	82 30       	cpi	r24, 0x02	; 2
    1f5a:	91 05       	cpc	r25, r1
    1f5c:	09 f4       	brne	.+2      	; 0x1f60 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1f5e:	48 c0       	rjmp	.+144    	; 0x1ff0 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1f60:	2b 81       	ldd	r18, Y+3	; 0x03
    1f62:	3c 81       	ldd	r19, Y+4	; 0x04
    1f64:	23 30       	cpi	r18, 0x03	; 3
    1f66:	31 05       	cpc	r19, r1
    1f68:	0c f0       	brlt	.+2      	; 0x1f6c <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1f6a:	45 c0       	rjmp	.+138    	; 0x1ff6 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1f6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f70:	81 30       	cpi	r24, 0x01	; 1
    1f72:	91 05       	cpc	r25, r1
    1f74:	09 f4       	brne	.+2      	; 0x1f78 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1f76:	39 c0       	rjmp	.+114    	; 0x1fea <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1f78:	67 c0       	rjmp	.+206    	; 0x2048 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1f7a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f7c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f7e:	26 30       	cpi	r18, 0x06	; 6
    1f80:	31 05       	cpc	r19, r1
    1f82:	09 f4       	brne	.+2      	; 0x1f86 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1f84:	41 c0       	rjmp	.+130    	; 0x2008 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8a:	87 30       	cpi	r24, 0x07	; 7
    1f8c:	91 05       	cpc	r25, r1
    1f8e:	0c f0       	brlt	.+2      	; 0x1f92 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1f90:	3e c0       	rjmp	.+124    	; 0x200e <KEYPAD_4x4_adjustKeyNumber+0x100>
    1f92:	37 c0       	rjmp	.+110    	; 0x2002 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1f94:	2b 81       	ldd	r18, Y+3	; 0x03
    1f96:	3c 81       	ldd	r19, Y+4	; 0x04
    1f98:	2c 30       	cpi	r18, 0x0C	; 12
    1f9a:	31 05       	cpc	r19, r1
    1f9c:	09 f4       	brne	.+2      	; 0x1fa0 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1f9e:	46 c0       	rjmp	.+140    	; 0x202c <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa4:	8d 30       	cpi	r24, 0x0D	; 13
    1fa6:	91 05       	cpc	r25, r1
    1fa8:	5c f4       	brge	.+22     	; 0x1fc0 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1faa:	2b 81       	ldd	r18, Y+3	; 0x03
    1fac:	3c 81       	ldd	r19, Y+4	; 0x04
    1fae:	2a 30       	cpi	r18, 0x0A	; 10
    1fb0:	31 05       	cpc	r19, r1
    1fb2:	b1 f1       	breq	.+108    	; 0x2020 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb8:	8b 30       	cpi	r24, 0x0B	; 11
    1fba:	91 05       	cpc	r25, r1
    1fbc:	a4 f5       	brge	.+104    	; 0x2026 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1fbe:	2d c0       	rjmp	.+90     	; 0x201a <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1fc0:	2b 81       	ldd	r18, Y+3	; 0x03
    1fc2:	3c 81       	ldd	r19, Y+4	; 0x04
    1fc4:	2e 30       	cpi	r18, 0x0E	; 14
    1fc6:	31 05       	cpc	r19, r1
    1fc8:	b9 f1       	breq	.+110    	; 0x2038 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1fca:	8b 81       	ldd	r24, Y+3	; 0x03
    1fcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fce:	8e 30       	cpi	r24, 0x0E	; 14
    1fd0:	91 05       	cpc	r25, r1
    1fd2:	7c f1       	brlt	.+94     	; 0x2032 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1fd4:	2b 81       	ldd	r18, Y+3	; 0x03
    1fd6:	3c 81       	ldd	r19, Y+4	; 0x04
    1fd8:	2f 30       	cpi	r18, 0x0F	; 15
    1fda:	31 05       	cpc	r19, r1
    1fdc:	79 f1       	breq	.+94     	; 0x203c <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1fde:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe2:	80 31       	cpi	r24, 0x10	; 16
    1fe4:	91 05       	cpc	r25, r1
    1fe6:	69 f1       	breq	.+90     	; 0x2042 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1fe8:	2f c0       	rjmp	.+94     	; 0x2048 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1fea:	87 e0       	ldi	r24, 0x07	; 7
    1fec:	89 83       	std	Y+1, r24	; 0x01
    1fee:	2e c0       	rjmp	.+92     	; 0x204c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1ff0:	88 e0       	ldi	r24, 0x08	; 8
    1ff2:	89 83       	std	Y+1, r24	; 0x01
    1ff4:	2b c0       	rjmp	.+86     	; 0x204c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1ff6:	89 e0       	ldi	r24, 0x09	; 9
    1ff8:	89 83       	std	Y+1, r24	; 0x01
    1ffa:	28 c0       	rjmp	.+80     	; 0x204c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1ffc:	85 e2       	ldi	r24, 0x25	; 37
    1ffe:	89 83       	std	Y+1, r24	; 0x01
    2000:	25 c0       	rjmp	.+74     	; 0x204c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2002:	84 e0       	ldi	r24, 0x04	; 4
    2004:	89 83       	std	Y+1, r24	; 0x01
    2006:	22 c0       	rjmp	.+68     	; 0x204c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2008:	85 e0       	ldi	r24, 0x05	; 5
    200a:	89 83       	std	Y+1, r24	; 0x01
    200c:	1f c0       	rjmp	.+62     	; 0x204c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    200e:	86 e0       	ldi	r24, 0x06	; 6
    2010:	89 83       	std	Y+1, r24	; 0x01
    2012:	1c c0       	rjmp	.+56     	; 0x204c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2014:	8a e2       	ldi	r24, 0x2A	; 42
    2016:	89 83       	std	Y+1, r24	; 0x01
    2018:	19 c0       	rjmp	.+50     	; 0x204c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	89 83       	std	Y+1, r24	; 0x01
    201e:	16 c0       	rjmp	.+44     	; 0x204c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2020:	82 e0       	ldi	r24, 0x02	; 2
    2022:	89 83       	std	Y+1, r24	; 0x01
    2024:	13 c0       	rjmp	.+38     	; 0x204c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2026:	83 e0       	ldi	r24, 0x03	; 3
    2028:	89 83       	std	Y+1, r24	; 0x01
    202a:	10 c0       	rjmp	.+32     	; 0x204c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    202c:	8d e2       	ldi	r24, 0x2D	; 45
    202e:	89 83       	std	Y+1, r24	; 0x01
    2030:	0d c0       	rjmp	.+26     	; 0x204c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2032:	8d e0       	ldi	r24, 0x0D	; 13
    2034:	89 83       	std	Y+1, r24	; 0x01
    2036:	0a c0       	rjmp	.+20     	; 0x204c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    2038:	19 82       	std	Y+1, r1	; 0x01
    203a:	08 c0       	rjmp	.+16     	; 0x204c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    203c:	8d e3       	ldi	r24, 0x3D	; 61
    203e:	89 83       	std	Y+1, r24	; 0x01
    2040:	05 c0       	rjmp	.+10     	; 0x204c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2042:	8b e2       	ldi	r24, 0x2B	; 43
    2044:	89 83       	std	Y+1, r24	; 0x01
    2046:	02 c0       	rjmp	.+4      	; 0x204c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2048:	8a 81       	ldd	r24, Y+2	; 0x02
    204a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    204c:	89 81       	ldd	r24, Y+1	; 0x01
}
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	cf 91       	pop	r28
    2058:	df 91       	pop	r29
    205a:	08 95       	ret

0000205c <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    205c:	df 93       	push	r29
    205e:	cf 93       	push	r28
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
    2064:	2e 97       	sbiw	r28, 0x0e	; 14
    2066:	0f b6       	in	r0, 0x3f	; 63
    2068:	f8 94       	cli
    206a:	de bf       	out	0x3e, r29	; 62
    206c:	0f be       	out	0x3f, r0	; 63
    206e:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2070:	83 e0       	ldi	r24, 0x03	; 3
    2072:	64 e0       	ldi	r22, 0x04	; 4
    2074:	41 e0       	ldi	r20, 0x01	; 1
    2076:	0e 94 c4 0b 	call	0x1788	; 0x1788 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    207a:	83 e0       	ldi	r24, 0x03	; 3
    207c:	65 e0       	ldi	r22, 0x05	; 5
    207e:	41 e0       	ldi	r20, 0x01	; 1
    2080:	0e 94 c4 0b 	call	0x1788	; 0x1788 <GPIO_setupPinDirection>
    2084:	80 e0       	ldi	r24, 0x00	; 0
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	a0 ea       	ldi	r26, 0xA0	; 160
    208a:	b1 e4       	ldi	r27, 0x41	; 65
    208c:	8b 87       	std	Y+11, r24	; 0x0b
    208e:	9c 87       	std	Y+12, r25	; 0x0c
    2090:	ad 87       	std	Y+13, r26	; 0x0d
    2092:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2094:	6b 85       	ldd	r22, Y+11	; 0x0b
    2096:	7c 85       	ldd	r23, Y+12	; 0x0c
    2098:	8d 85       	ldd	r24, Y+13	; 0x0d
    209a:	9e 85       	ldd	r25, Y+14	; 0x0e
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	4a ef       	ldi	r20, 0xFA	; 250
    20a2:	54 e4       	ldi	r21, 0x44	; 68
    20a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a8:	dc 01       	movw	r26, r24
    20aa:	cb 01       	movw	r24, r22
    20ac:	8f 83       	std	Y+7, r24	; 0x07
    20ae:	98 87       	std	Y+8, r25	; 0x08
    20b0:	a9 87       	std	Y+9, r26	; 0x09
    20b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20b4:	6f 81       	ldd	r22, Y+7	; 0x07
    20b6:	78 85       	ldd	r23, Y+8	; 0x08
    20b8:	89 85       	ldd	r24, Y+9	; 0x09
    20ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	40 e8       	ldi	r20, 0x80	; 128
    20c2:	5f e3       	ldi	r21, 0x3F	; 63
    20c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20c8:	88 23       	and	r24, r24
    20ca:	2c f4       	brge	.+10     	; 0x20d6 <LCD_init+0x7a>
		__ticks = 1;
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	9e 83       	std	Y+6, r25	; 0x06
    20d2:	8d 83       	std	Y+5, r24	; 0x05
    20d4:	3f c0       	rjmp	.+126    	; 0x2154 <LCD_init+0xf8>
	else if (__tmp > 65535)
    20d6:	6f 81       	ldd	r22, Y+7	; 0x07
    20d8:	78 85       	ldd	r23, Y+8	; 0x08
    20da:	89 85       	ldd	r24, Y+9	; 0x09
    20dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	3f ef       	ldi	r19, 0xFF	; 255
    20e2:	4f e7       	ldi	r20, 0x7F	; 127
    20e4:	57 e4       	ldi	r21, 0x47	; 71
    20e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20ea:	18 16       	cp	r1, r24
    20ec:	4c f5       	brge	.+82     	; 0x2140 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    20f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    20f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	40 e2       	ldi	r20, 0x20	; 32
    20fc:	51 e4       	ldi	r21, 0x41	; 65
    20fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2102:	dc 01       	movw	r26, r24
    2104:	cb 01       	movw	r24, r22
    2106:	bc 01       	movw	r22, r24
    2108:	cd 01       	movw	r24, r26
    210a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	9e 83       	std	Y+6, r25	; 0x06
    2114:	8d 83       	std	Y+5, r24	; 0x05
    2116:	0f c0       	rjmp	.+30     	; 0x2136 <LCD_init+0xda>
    2118:	88 ec       	ldi	r24, 0xC8	; 200
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	9c 83       	std	Y+4, r25	; 0x04
    211e:	8b 83       	std	Y+3, r24	; 0x03
    2120:	8b 81       	ldd	r24, Y+3	; 0x03
    2122:	9c 81       	ldd	r25, Y+4	; 0x04
    2124:	01 97       	sbiw	r24, 0x01	; 1
    2126:	f1 f7       	brne	.-4      	; 0x2124 <LCD_init+0xc8>
    2128:	9c 83       	std	Y+4, r25	; 0x04
    212a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    212c:	8d 81       	ldd	r24, Y+5	; 0x05
    212e:	9e 81       	ldd	r25, Y+6	; 0x06
    2130:	01 97       	sbiw	r24, 0x01	; 1
    2132:	9e 83       	std	Y+6, r25	; 0x06
    2134:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2136:	8d 81       	ldd	r24, Y+5	; 0x05
    2138:	9e 81       	ldd	r25, Y+6	; 0x06
    213a:	00 97       	sbiw	r24, 0x00	; 0
    213c:	69 f7       	brne	.-38     	; 0x2118 <LCD_init+0xbc>
    213e:	14 c0       	rjmp	.+40     	; 0x2168 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2140:	6f 81       	ldd	r22, Y+7	; 0x07
    2142:	78 85       	ldd	r23, Y+8	; 0x08
    2144:	89 85       	ldd	r24, Y+9	; 0x09
    2146:	9a 85       	ldd	r25, Y+10	; 0x0a
    2148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	9e 83       	std	Y+6, r25	; 0x06
    2152:	8d 83       	std	Y+5, r24	; 0x05
    2154:	8d 81       	ldd	r24, Y+5	; 0x05
    2156:	9e 81       	ldd	r25, Y+6	; 0x06
    2158:	9a 83       	std	Y+2, r25	; 0x02
    215a:	89 83       	std	Y+1, r24	; 0x01
    215c:	89 81       	ldd	r24, Y+1	; 0x01
    215e:	9a 81       	ldd	r25, Y+2	; 0x02
    2160:	01 97       	sbiw	r24, 0x01	; 1
    2162:	f1 f7       	brne	.-4      	; 0x2160 <LCD_init+0x104>
    2164:	9a 83       	std	Y+2, r25	; 0x02
    2166:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2168:	82 e0       	ldi	r24, 0x02	; 2
    216a:	6f ef       	ldi	r22, 0xFF	; 255
    216c:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2170:	88 e3       	ldi	r24, 0x38	; 56
    2172:	0e 94 ca 10 	call	0x2194	; 0x2194 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2176:	8c e0       	ldi	r24, 0x0C	; 12
    2178:	0e 94 ca 10 	call	0x2194	; 0x2194 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	0e 94 ca 10 	call	0x2194	; 0x2194 <LCD_sendCommand>
}
    2182:	2e 96       	adiw	r28, 0x0e	; 14
    2184:	0f b6       	in	r0, 0x3f	; 63
    2186:	f8 94       	cli
    2188:	de bf       	out	0x3e, r29	; 62
    218a:	0f be       	out	0x3f, r0	; 63
    218c:	cd bf       	out	0x3d, r28	; 61
    218e:	cf 91       	pop	r28
    2190:	df 91       	pop	r29
    2192:	08 95       	ret

00002194 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2194:	df 93       	push	r29
    2196:	cf 93       	push	r28
    2198:	cd b7       	in	r28, 0x3d	; 61
    219a:	de b7       	in	r29, 0x3e	; 62
    219c:	e9 97       	sbiw	r28, 0x39	; 57
    219e:	0f b6       	in	r0, 0x3f	; 63
    21a0:	f8 94       	cli
    21a2:	de bf       	out	0x3e, r29	; 62
    21a4:	0f be       	out	0x3f, r0	; 63
    21a6:	cd bf       	out	0x3d, r28	; 61
    21a8:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    21aa:	83 e0       	ldi	r24, 0x03	; 3
    21ac:	64 e0       	ldi	r22, 0x04	; 4
    21ae:	40 e0       	ldi	r20, 0x00	; 0
    21b0:	0e 94 af 0c 	call	0x195e	; 0x195e <GPIO_writePin>
    21b4:	80 e0       	ldi	r24, 0x00	; 0
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	a0 e8       	ldi	r26, 0x80	; 128
    21ba:	bf e3       	ldi	r27, 0x3F	; 63
    21bc:	8d ab       	std	Y+53, r24	; 0x35
    21be:	9e ab       	std	Y+54, r25	; 0x36
    21c0:	af ab       	std	Y+55, r26	; 0x37
    21c2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c4:	6d a9       	ldd	r22, Y+53	; 0x35
    21c6:	7e a9       	ldd	r23, Y+54	; 0x36
    21c8:	8f a9       	ldd	r24, Y+55	; 0x37
    21ca:	98 ad       	ldd	r25, Y+56	; 0x38
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	4a ef       	ldi	r20, 0xFA	; 250
    21d2:	54 e4       	ldi	r21, 0x44	; 68
    21d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d8:	dc 01       	movw	r26, r24
    21da:	cb 01       	movw	r24, r22
    21dc:	89 ab       	std	Y+49, r24	; 0x31
    21de:	9a ab       	std	Y+50, r25	; 0x32
    21e0:	ab ab       	std	Y+51, r26	; 0x33
    21e2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21e4:	69 a9       	ldd	r22, Y+49	; 0x31
    21e6:	7a a9       	ldd	r23, Y+50	; 0x32
    21e8:	8b a9       	ldd	r24, Y+51	; 0x33
    21ea:	9c a9       	ldd	r25, Y+52	; 0x34
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	40 e8       	ldi	r20, 0x80	; 128
    21f2:	5f e3       	ldi	r21, 0x3F	; 63
    21f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21f8:	88 23       	and	r24, r24
    21fa:	2c f4       	brge	.+10     	; 0x2206 <LCD_sendCommand+0x72>
		__ticks = 1;
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	98 ab       	std	Y+48, r25	; 0x30
    2202:	8f a7       	std	Y+47, r24	; 0x2f
    2204:	3f c0       	rjmp	.+126    	; 0x2284 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2206:	69 a9       	ldd	r22, Y+49	; 0x31
    2208:	7a a9       	ldd	r23, Y+50	; 0x32
    220a:	8b a9       	ldd	r24, Y+51	; 0x33
    220c:	9c a9       	ldd	r25, Y+52	; 0x34
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	3f ef       	ldi	r19, 0xFF	; 255
    2212:	4f e7       	ldi	r20, 0x7F	; 127
    2214:	57 e4       	ldi	r21, 0x47	; 71
    2216:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    221a:	18 16       	cp	r1, r24
    221c:	4c f5       	brge	.+82     	; 0x2270 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    221e:	6d a9       	ldd	r22, Y+53	; 0x35
    2220:	7e a9       	ldd	r23, Y+54	; 0x36
    2222:	8f a9       	ldd	r24, Y+55	; 0x37
    2224:	98 ad       	ldd	r25, Y+56	; 0x38
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	40 e2       	ldi	r20, 0x20	; 32
    222c:	51 e4       	ldi	r21, 0x41	; 65
    222e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	bc 01       	movw	r22, r24
    2238:	cd 01       	movw	r24, r26
    223a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223e:	dc 01       	movw	r26, r24
    2240:	cb 01       	movw	r24, r22
    2242:	98 ab       	std	Y+48, r25	; 0x30
    2244:	8f a7       	std	Y+47, r24	; 0x2f
    2246:	0f c0       	rjmp	.+30     	; 0x2266 <LCD_sendCommand+0xd2>
    2248:	88 ec       	ldi	r24, 0xC8	; 200
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	9e a7       	std	Y+46, r25	; 0x2e
    224e:	8d a7       	std	Y+45, r24	; 0x2d
    2250:	8d a5       	ldd	r24, Y+45	; 0x2d
    2252:	9e a5       	ldd	r25, Y+46	; 0x2e
    2254:	01 97       	sbiw	r24, 0x01	; 1
    2256:	f1 f7       	brne	.-4      	; 0x2254 <LCD_sendCommand+0xc0>
    2258:	9e a7       	std	Y+46, r25	; 0x2e
    225a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    225c:	8f a5       	ldd	r24, Y+47	; 0x2f
    225e:	98 a9       	ldd	r25, Y+48	; 0x30
    2260:	01 97       	sbiw	r24, 0x01	; 1
    2262:	98 ab       	std	Y+48, r25	; 0x30
    2264:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2266:	8f a5       	ldd	r24, Y+47	; 0x2f
    2268:	98 a9       	ldd	r25, Y+48	; 0x30
    226a:	00 97       	sbiw	r24, 0x00	; 0
    226c:	69 f7       	brne	.-38     	; 0x2248 <LCD_sendCommand+0xb4>
    226e:	14 c0       	rjmp	.+40     	; 0x2298 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2270:	69 a9       	ldd	r22, Y+49	; 0x31
    2272:	7a a9       	ldd	r23, Y+50	; 0x32
    2274:	8b a9       	ldd	r24, Y+51	; 0x33
    2276:	9c a9       	ldd	r25, Y+52	; 0x34
    2278:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227c:	dc 01       	movw	r26, r24
    227e:	cb 01       	movw	r24, r22
    2280:	98 ab       	std	Y+48, r25	; 0x30
    2282:	8f a7       	std	Y+47, r24	; 0x2f
    2284:	8f a5       	ldd	r24, Y+47	; 0x2f
    2286:	98 a9       	ldd	r25, Y+48	; 0x30
    2288:	9c a7       	std	Y+44, r25	; 0x2c
    228a:	8b a7       	std	Y+43, r24	; 0x2b
    228c:	8b a5       	ldd	r24, Y+43	; 0x2b
    228e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2290:	01 97       	sbiw	r24, 0x01	; 1
    2292:	f1 f7       	brne	.-4      	; 0x2290 <LCD_sendCommand+0xfc>
    2294:	9c a7       	std	Y+44, r25	; 0x2c
    2296:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2298:	83 e0       	ldi	r24, 0x03	; 3
    229a:	65 e0       	ldi	r22, 0x05	; 5
    229c:	41 e0       	ldi	r20, 0x01	; 1
    229e:	0e 94 af 0c 	call	0x195e	; 0x195e <GPIO_writePin>
    22a2:	80 e0       	ldi	r24, 0x00	; 0
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	a0 e8       	ldi	r26, 0x80	; 128
    22a8:	bf e3       	ldi	r27, 0x3F	; 63
    22aa:	8f a3       	std	Y+39, r24	; 0x27
    22ac:	98 a7       	std	Y+40, r25	; 0x28
    22ae:	a9 a7       	std	Y+41, r26	; 0x29
    22b0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b2:	6f a1       	ldd	r22, Y+39	; 0x27
    22b4:	78 a5       	ldd	r23, Y+40	; 0x28
    22b6:	89 a5       	ldd	r24, Y+41	; 0x29
    22b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	4a ef       	ldi	r20, 0xFA	; 250
    22c0:	54 e4       	ldi	r21, 0x44	; 68
    22c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	8b a3       	std	Y+35, r24	; 0x23
    22cc:	9c a3       	std	Y+36, r25	; 0x24
    22ce:	ad a3       	std	Y+37, r26	; 0x25
    22d0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22d2:	6b a1       	ldd	r22, Y+35	; 0x23
    22d4:	7c a1       	ldd	r23, Y+36	; 0x24
    22d6:	8d a1       	ldd	r24, Y+37	; 0x25
    22d8:	9e a1       	ldd	r25, Y+38	; 0x26
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	40 e8       	ldi	r20, 0x80	; 128
    22e0:	5f e3       	ldi	r21, 0x3F	; 63
    22e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22e6:	88 23       	and	r24, r24
    22e8:	2c f4       	brge	.+10     	; 0x22f4 <LCD_sendCommand+0x160>
		__ticks = 1;
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	9a a3       	std	Y+34, r25	; 0x22
    22f0:	89 a3       	std	Y+33, r24	; 0x21
    22f2:	3f c0       	rjmp	.+126    	; 0x2372 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    22f4:	6b a1       	ldd	r22, Y+35	; 0x23
    22f6:	7c a1       	ldd	r23, Y+36	; 0x24
    22f8:	8d a1       	ldd	r24, Y+37	; 0x25
    22fa:	9e a1       	ldd	r25, Y+38	; 0x26
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	3f ef       	ldi	r19, 0xFF	; 255
    2300:	4f e7       	ldi	r20, 0x7F	; 127
    2302:	57 e4       	ldi	r21, 0x47	; 71
    2304:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2308:	18 16       	cp	r1, r24
    230a:	4c f5       	brge	.+82     	; 0x235e <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    230c:	6f a1       	ldd	r22, Y+39	; 0x27
    230e:	78 a5       	ldd	r23, Y+40	; 0x28
    2310:	89 a5       	ldd	r24, Y+41	; 0x29
    2312:	9a a5       	ldd	r25, Y+42	; 0x2a
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	40 e2       	ldi	r20, 0x20	; 32
    231a:	51 e4       	ldi	r21, 0x41	; 65
    231c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	bc 01       	movw	r22, r24
    2326:	cd 01       	movw	r24, r26
    2328:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	9a a3       	std	Y+34, r25	; 0x22
    2332:	89 a3       	std	Y+33, r24	; 0x21
    2334:	0f c0       	rjmp	.+30     	; 0x2354 <LCD_sendCommand+0x1c0>
    2336:	88 ec       	ldi	r24, 0xC8	; 200
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	98 a3       	std	Y+32, r25	; 0x20
    233c:	8f 8f       	std	Y+31, r24	; 0x1f
    233e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2340:	98 a1       	ldd	r25, Y+32	; 0x20
    2342:	01 97       	sbiw	r24, 0x01	; 1
    2344:	f1 f7       	brne	.-4      	; 0x2342 <LCD_sendCommand+0x1ae>
    2346:	98 a3       	std	Y+32, r25	; 0x20
    2348:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    234a:	89 a1       	ldd	r24, Y+33	; 0x21
    234c:	9a a1       	ldd	r25, Y+34	; 0x22
    234e:	01 97       	sbiw	r24, 0x01	; 1
    2350:	9a a3       	std	Y+34, r25	; 0x22
    2352:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2354:	89 a1       	ldd	r24, Y+33	; 0x21
    2356:	9a a1       	ldd	r25, Y+34	; 0x22
    2358:	00 97       	sbiw	r24, 0x00	; 0
    235a:	69 f7       	brne	.-38     	; 0x2336 <LCD_sendCommand+0x1a2>
    235c:	14 c0       	rjmp	.+40     	; 0x2386 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    235e:	6b a1       	ldd	r22, Y+35	; 0x23
    2360:	7c a1       	ldd	r23, Y+36	; 0x24
    2362:	8d a1       	ldd	r24, Y+37	; 0x25
    2364:	9e a1       	ldd	r25, Y+38	; 0x26
    2366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	9a a3       	std	Y+34, r25	; 0x22
    2370:	89 a3       	std	Y+33, r24	; 0x21
    2372:	89 a1       	ldd	r24, Y+33	; 0x21
    2374:	9a a1       	ldd	r25, Y+34	; 0x22
    2376:	9e 8f       	std	Y+30, r25	; 0x1e
    2378:	8d 8f       	std	Y+29, r24	; 0x1d
    237a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    237c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    237e:	01 97       	sbiw	r24, 0x01	; 1
    2380:	f1 f7       	brne	.-4      	; 0x237e <LCD_sendCommand+0x1ea>
    2382:	9e 8f       	std	Y+30, r25	; 0x1e
    2384:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2386:	82 e0       	ldi	r24, 0x02	; 2
    2388:	69 ad       	ldd	r22, Y+57	; 0x39
    238a:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <GPIO_writePort>
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	a0 e8       	ldi	r26, 0x80	; 128
    2394:	bf e3       	ldi	r27, 0x3F	; 63
    2396:	89 8f       	std	Y+25, r24	; 0x19
    2398:	9a 8f       	std	Y+26, r25	; 0x1a
    239a:	ab 8f       	std	Y+27, r26	; 0x1b
    239c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    239e:	69 8d       	ldd	r22, Y+25	; 0x19
    23a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	4a ef       	ldi	r20, 0xFA	; 250
    23ac:	54 e4       	ldi	r21, 0x44	; 68
    23ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b2:	dc 01       	movw	r26, r24
    23b4:	cb 01       	movw	r24, r22
    23b6:	8d 8b       	std	Y+21, r24	; 0x15
    23b8:	9e 8b       	std	Y+22, r25	; 0x16
    23ba:	af 8b       	std	Y+23, r26	; 0x17
    23bc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23be:	6d 89       	ldd	r22, Y+21	; 0x15
    23c0:	7e 89       	ldd	r23, Y+22	; 0x16
    23c2:	8f 89       	ldd	r24, Y+23	; 0x17
    23c4:	98 8d       	ldd	r25, Y+24	; 0x18
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	40 e8       	ldi	r20, 0x80	; 128
    23cc:	5f e3       	ldi	r21, 0x3F	; 63
    23ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23d2:	88 23       	and	r24, r24
    23d4:	2c f4       	brge	.+10     	; 0x23e0 <LCD_sendCommand+0x24c>
		__ticks = 1;
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	9c 8b       	std	Y+20, r25	; 0x14
    23dc:	8b 8b       	std	Y+19, r24	; 0x13
    23de:	3f c0       	rjmp	.+126    	; 0x245e <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    23e0:	6d 89       	ldd	r22, Y+21	; 0x15
    23e2:	7e 89       	ldd	r23, Y+22	; 0x16
    23e4:	8f 89       	ldd	r24, Y+23	; 0x17
    23e6:	98 8d       	ldd	r25, Y+24	; 0x18
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	3f ef       	ldi	r19, 0xFF	; 255
    23ec:	4f e7       	ldi	r20, 0x7F	; 127
    23ee:	57 e4       	ldi	r21, 0x47	; 71
    23f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23f4:	18 16       	cp	r1, r24
    23f6:	4c f5       	brge	.+82     	; 0x244a <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f8:	69 8d       	ldd	r22, Y+25	; 0x19
    23fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	40 e2       	ldi	r20, 0x20	; 32
    2406:	51 e4       	ldi	r21, 0x41	; 65
    2408:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	bc 01       	movw	r22, r24
    2412:	cd 01       	movw	r24, r26
    2414:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2418:	dc 01       	movw	r26, r24
    241a:	cb 01       	movw	r24, r22
    241c:	9c 8b       	std	Y+20, r25	; 0x14
    241e:	8b 8b       	std	Y+19, r24	; 0x13
    2420:	0f c0       	rjmp	.+30     	; 0x2440 <LCD_sendCommand+0x2ac>
    2422:	88 ec       	ldi	r24, 0xC8	; 200
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	9a 8b       	std	Y+18, r25	; 0x12
    2428:	89 8b       	std	Y+17, r24	; 0x11
    242a:	89 89       	ldd	r24, Y+17	; 0x11
    242c:	9a 89       	ldd	r25, Y+18	; 0x12
    242e:	01 97       	sbiw	r24, 0x01	; 1
    2430:	f1 f7       	brne	.-4      	; 0x242e <LCD_sendCommand+0x29a>
    2432:	9a 8b       	std	Y+18, r25	; 0x12
    2434:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2436:	8b 89       	ldd	r24, Y+19	; 0x13
    2438:	9c 89       	ldd	r25, Y+20	; 0x14
    243a:	01 97       	sbiw	r24, 0x01	; 1
    243c:	9c 8b       	std	Y+20, r25	; 0x14
    243e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2440:	8b 89       	ldd	r24, Y+19	; 0x13
    2442:	9c 89       	ldd	r25, Y+20	; 0x14
    2444:	00 97       	sbiw	r24, 0x00	; 0
    2446:	69 f7       	brne	.-38     	; 0x2422 <LCD_sendCommand+0x28e>
    2448:	14 c0       	rjmp	.+40     	; 0x2472 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    244a:	6d 89       	ldd	r22, Y+21	; 0x15
    244c:	7e 89       	ldd	r23, Y+22	; 0x16
    244e:	8f 89       	ldd	r24, Y+23	; 0x17
    2450:	98 8d       	ldd	r25, Y+24	; 0x18
    2452:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	9c 8b       	std	Y+20, r25	; 0x14
    245c:	8b 8b       	std	Y+19, r24	; 0x13
    245e:	8b 89       	ldd	r24, Y+19	; 0x13
    2460:	9c 89       	ldd	r25, Y+20	; 0x14
    2462:	98 8b       	std	Y+16, r25	; 0x10
    2464:	8f 87       	std	Y+15, r24	; 0x0f
    2466:	8f 85       	ldd	r24, Y+15	; 0x0f
    2468:	98 89       	ldd	r25, Y+16	; 0x10
    246a:	01 97       	sbiw	r24, 0x01	; 1
    246c:	f1 f7       	brne	.-4      	; 0x246a <LCD_sendCommand+0x2d6>
    246e:	98 8b       	std	Y+16, r25	; 0x10
    2470:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2472:	83 e0       	ldi	r24, 0x03	; 3
    2474:	65 e0       	ldi	r22, 0x05	; 5
    2476:	40 e0       	ldi	r20, 0x00	; 0
    2478:	0e 94 af 0c 	call	0x195e	; 0x195e <GPIO_writePin>
    247c:	80 e0       	ldi	r24, 0x00	; 0
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	a0 e8       	ldi	r26, 0x80	; 128
    2482:	bf e3       	ldi	r27, 0x3F	; 63
    2484:	8b 87       	std	Y+11, r24	; 0x0b
    2486:	9c 87       	std	Y+12, r25	; 0x0c
    2488:	ad 87       	std	Y+13, r26	; 0x0d
    248a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    248c:	6b 85       	ldd	r22, Y+11	; 0x0b
    248e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2490:	8d 85       	ldd	r24, Y+13	; 0x0d
    2492:	9e 85       	ldd	r25, Y+14	; 0x0e
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	4a ef       	ldi	r20, 0xFA	; 250
    249a:	54 e4       	ldi	r21, 0x44	; 68
    249c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	8f 83       	std	Y+7, r24	; 0x07
    24a6:	98 87       	std	Y+8, r25	; 0x08
    24a8:	a9 87       	std	Y+9, r26	; 0x09
    24aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24ac:	6f 81       	ldd	r22, Y+7	; 0x07
    24ae:	78 85       	ldd	r23, Y+8	; 0x08
    24b0:	89 85       	ldd	r24, Y+9	; 0x09
    24b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	40 e8       	ldi	r20, 0x80	; 128
    24ba:	5f e3       	ldi	r21, 0x3F	; 63
    24bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24c0:	88 23       	and	r24, r24
    24c2:	2c f4       	brge	.+10     	; 0x24ce <LCD_sendCommand+0x33a>
		__ticks = 1;
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	9e 83       	std	Y+6, r25	; 0x06
    24ca:	8d 83       	std	Y+5, r24	; 0x05
    24cc:	3f c0       	rjmp	.+126    	; 0x254c <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    24ce:	6f 81       	ldd	r22, Y+7	; 0x07
    24d0:	78 85       	ldd	r23, Y+8	; 0x08
    24d2:	89 85       	ldd	r24, Y+9	; 0x09
    24d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	3f ef       	ldi	r19, 0xFF	; 255
    24da:	4f e7       	ldi	r20, 0x7F	; 127
    24dc:	57 e4       	ldi	r21, 0x47	; 71
    24de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24e2:	18 16       	cp	r1, r24
    24e4:	4c f5       	brge	.+82     	; 0x2538 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    24e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	40 e2       	ldi	r20, 0x20	; 32
    24f4:	51 e4       	ldi	r21, 0x41	; 65
    24f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	bc 01       	movw	r22, r24
    2500:	cd 01       	movw	r24, r26
    2502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	9e 83       	std	Y+6, r25	; 0x06
    250c:	8d 83       	std	Y+5, r24	; 0x05
    250e:	0f c0       	rjmp	.+30     	; 0x252e <LCD_sendCommand+0x39a>
    2510:	88 ec       	ldi	r24, 0xC8	; 200
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	9c 83       	std	Y+4, r25	; 0x04
    2516:	8b 83       	std	Y+3, r24	; 0x03
    2518:	8b 81       	ldd	r24, Y+3	; 0x03
    251a:	9c 81       	ldd	r25, Y+4	; 0x04
    251c:	01 97       	sbiw	r24, 0x01	; 1
    251e:	f1 f7       	brne	.-4      	; 0x251c <LCD_sendCommand+0x388>
    2520:	9c 83       	std	Y+4, r25	; 0x04
    2522:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2524:	8d 81       	ldd	r24, Y+5	; 0x05
    2526:	9e 81       	ldd	r25, Y+6	; 0x06
    2528:	01 97       	sbiw	r24, 0x01	; 1
    252a:	9e 83       	std	Y+6, r25	; 0x06
    252c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    252e:	8d 81       	ldd	r24, Y+5	; 0x05
    2530:	9e 81       	ldd	r25, Y+6	; 0x06
    2532:	00 97       	sbiw	r24, 0x00	; 0
    2534:	69 f7       	brne	.-38     	; 0x2510 <LCD_sendCommand+0x37c>
    2536:	14 c0       	rjmp	.+40     	; 0x2560 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2538:	6f 81       	ldd	r22, Y+7	; 0x07
    253a:	78 85       	ldd	r23, Y+8	; 0x08
    253c:	89 85       	ldd	r24, Y+9	; 0x09
    253e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	9e 83       	std	Y+6, r25	; 0x06
    254a:	8d 83       	std	Y+5, r24	; 0x05
    254c:	8d 81       	ldd	r24, Y+5	; 0x05
    254e:	9e 81       	ldd	r25, Y+6	; 0x06
    2550:	9a 83       	std	Y+2, r25	; 0x02
    2552:	89 83       	std	Y+1, r24	; 0x01
    2554:	89 81       	ldd	r24, Y+1	; 0x01
    2556:	9a 81       	ldd	r25, Y+2	; 0x02
    2558:	01 97       	sbiw	r24, 0x01	; 1
    255a:	f1 f7       	brne	.-4      	; 0x2558 <LCD_sendCommand+0x3c4>
    255c:	9a 83       	std	Y+2, r25	; 0x02
    255e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2560:	e9 96       	adiw	r28, 0x39	; 57
    2562:	0f b6       	in	r0, 0x3f	; 63
    2564:	f8 94       	cli
    2566:	de bf       	out	0x3e, r29	; 62
    2568:	0f be       	out	0x3f, r0	; 63
    256a:	cd bf       	out	0x3d, r28	; 61
    256c:	cf 91       	pop	r28
    256e:	df 91       	pop	r29
    2570:	08 95       	ret

00002572 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2572:	df 93       	push	r29
    2574:	cf 93       	push	r28
    2576:	cd b7       	in	r28, 0x3d	; 61
    2578:	de b7       	in	r29, 0x3e	; 62
    257a:	e9 97       	sbiw	r28, 0x39	; 57
    257c:	0f b6       	in	r0, 0x3f	; 63
    257e:	f8 94       	cli
    2580:	de bf       	out	0x3e, r29	; 62
    2582:	0f be       	out	0x3f, r0	; 63
    2584:	cd bf       	out	0x3d, r28	; 61
    2586:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2588:	83 e0       	ldi	r24, 0x03	; 3
    258a:	64 e0       	ldi	r22, 0x04	; 4
    258c:	41 e0       	ldi	r20, 0x01	; 1
    258e:	0e 94 af 0c 	call	0x195e	; 0x195e <GPIO_writePin>
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	a0 e8       	ldi	r26, 0x80	; 128
    2598:	bf e3       	ldi	r27, 0x3F	; 63
    259a:	8d ab       	std	Y+53, r24	; 0x35
    259c:	9e ab       	std	Y+54, r25	; 0x36
    259e:	af ab       	std	Y+55, r26	; 0x37
    25a0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25a2:	6d a9       	ldd	r22, Y+53	; 0x35
    25a4:	7e a9       	ldd	r23, Y+54	; 0x36
    25a6:	8f a9       	ldd	r24, Y+55	; 0x37
    25a8:	98 ad       	ldd	r25, Y+56	; 0x38
    25aa:	20 e0       	ldi	r18, 0x00	; 0
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	4a ef       	ldi	r20, 0xFA	; 250
    25b0:	54 e4       	ldi	r21, 0x44	; 68
    25b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b6:	dc 01       	movw	r26, r24
    25b8:	cb 01       	movw	r24, r22
    25ba:	89 ab       	std	Y+49, r24	; 0x31
    25bc:	9a ab       	std	Y+50, r25	; 0x32
    25be:	ab ab       	std	Y+51, r26	; 0x33
    25c0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    25c2:	69 a9       	ldd	r22, Y+49	; 0x31
    25c4:	7a a9       	ldd	r23, Y+50	; 0x32
    25c6:	8b a9       	ldd	r24, Y+51	; 0x33
    25c8:	9c a9       	ldd	r25, Y+52	; 0x34
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	40 e8       	ldi	r20, 0x80	; 128
    25d0:	5f e3       	ldi	r21, 0x3F	; 63
    25d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25d6:	88 23       	and	r24, r24
    25d8:	2c f4       	brge	.+10     	; 0x25e4 <LCD_displayCharacter+0x72>
		__ticks = 1;
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	98 ab       	std	Y+48, r25	; 0x30
    25e0:	8f a7       	std	Y+47, r24	; 0x2f
    25e2:	3f c0       	rjmp	.+126    	; 0x2662 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    25e4:	69 a9       	ldd	r22, Y+49	; 0x31
    25e6:	7a a9       	ldd	r23, Y+50	; 0x32
    25e8:	8b a9       	ldd	r24, Y+51	; 0x33
    25ea:	9c a9       	ldd	r25, Y+52	; 0x34
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	3f ef       	ldi	r19, 0xFF	; 255
    25f0:	4f e7       	ldi	r20, 0x7F	; 127
    25f2:	57 e4       	ldi	r21, 0x47	; 71
    25f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25f8:	18 16       	cp	r1, r24
    25fa:	4c f5       	brge	.+82     	; 0x264e <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25fc:	6d a9       	ldd	r22, Y+53	; 0x35
    25fe:	7e a9       	ldd	r23, Y+54	; 0x36
    2600:	8f a9       	ldd	r24, Y+55	; 0x37
    2602:	98 ad       	ldd	r25, Y+56	; 0x38
    2604:	20 e0       	ldi	r18, 0x00	; 0
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	40 e2       	ldi	r20, 0x20	; 32
    260a:	51 e4       	ldi	r21, 0x41	; 65
    260c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2610:	dc 01       	movw	r26, r24
    2612:	cb 01       	movw	r24, r22
    2614:	bc 01       	movw	r22, r24
    2616:	cd 01       	movw	r24, r26
    2618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	98 ab       	std	Y+48, r25	; 0x30
    2622:	8f a7       	std	Y+47, r24	; 0x2f
    2624:	0f c0       	rjmp	.+30     	; 0x2644 <LCD_displayCharacter+0xd2>
    2626:	88 ec       	ldi	r24, 0xC8	; 200
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	9e a7       	std	Y+46, r25	; 0x2e
    262c:	8d a7       	std	Y+45, r24	; 0x2d
    262e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2630:	9e a5       	ldd	r25, Y+46	; 0x2e
    2632:	01 97       	sbiw	r24, 0x01	; 1
    2634:	f1 f7       	brne	.-4      	; 0x2632 <LCD_displayCharacter+0xc0>
    2636:	9e a7       	std	Y+46, r25	; 0x2e
    2638:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    263a:	8f a5       	ldd	r24, Y+47	; 0x2f
    263c:	98 a9       	ldd	r25, Y+48	; 0x30
    263e:	01 97       	sbiw	r24, 0x01	; 1
    2640:	98 ab       	std	Y+48, r25	; 0x30
    2642:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2644:	8f a5       	ldd	r24, Y+47	; 0x2f
    2646:	98 a9       	ldd	r25, Y+48	; 0x30
    2648:	00 97       	sbiw	r24, 0x00	; 0
    264a:	69 f7       	brne	.-38     	; 0x2626 <LCD_displayCharacter+0xb4>
    264c:	14 c0       	rjmp	.+40     	; 0x2676 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    264e:	69 a9       	ldd	r22, Y+49	; 0x31
    2650:	7a a9       	ldd	r23, Y+50	; 0x32
    2652:	8b a9       	ldd	r24, Y+51	; 0x33
    2654:	9c a9       	ldd	r25, Y+52	; 0x34
    2656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	98 ab       	std	Y+48, r25	; 0x30
    2660:	8f a7       	std	Y+47, r24	; 0x2f
    2662:	8f a5       	ldd	r24, Y+47	; 0x2f
    2664:	98 a9       	ldd	r25, Y+48	; 0x30
    2666:	9c a7       	std	Y+44, r25	; 0x2c
    2668:	8b a7       	std	Y+43, r24	; 0x2b
    266a:	8b a5       	ldd	r24, Y+43	; 0x2b
    266c:	9c a5       	ldd	r25, Y+44	; 0x2c
    266e:	01 97       	sbiw	r24, 0x01	; 1
    2670:	f1 f7       	brne	.-4      	; 0x266e <LCD_displayCharacter+0xfc>
    2672:	9c a7       	std	Y+44, r25	; 0x2c
    2674:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2676:	83 e0       	ldi	r24, 0x03	; 3
    2678:	65 e0       	ldi	r22, 0x05	; 5
    267a:	41 e0       	ldi	r20, 0x01	; 1
    267c:	0e 94 af 0c 	call	0x195e	; 0x195e <GPIO_writePin>
    2680:	80 e0       	ldi	r24, 0x00	; 0
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	a0 e8       	ldi	r26, 0x80	; 128
    2686:	bf e3       	ldi	r27, 0x3F	; 63
    2688:	8f a3       	std	Y+39, r24	; 0x27
    268a:	98 a7       	std	Y+40, r25	; 0x28
    268c:	a9 a7       	std	Y+41, r26	; 0x29
    268e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2690:	6f a1       	ldd	r22, Y+39	; 0x27
    2692:	78 a5       	ldd	r23, Y+40	; 0x28
    2694:	89 a5       	ldd	r24, Y+41	; 0x29
    2696:	9a a5       	ldd	r25, Y+42	; 0x2a
    2698:	20 e0       	ldi	r18, 0x00	; 0
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	4a ef       	ldi	r20, 0xFA	; 250
    269e:	54 e4       	ldi	r21, 0x44	; 68
    26a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	8b a3       	std	Y+35, r24	; 0x23
    26aa:	9c a3       	std	Y+36, r25	; 0x24
    26ac:	ad a3       	std	Y+37, r26	; 0x25
    26ae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26b0:	6b a1       	ldd	r22, Y+35	; 0x23
    26b2:	7c a1       	ldd	r23, Y+36	; 0x24
    26b4:	8d a1       	ldd	r24, Y+37	; 0x25
    26b6:	9e a1       	ldd	r25, Y+38	; 0x26
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	40 e8       	ldi	r20, 0x80	; 128
    26be:	5f e3       	ldi	r21, 0x3F	; 63
    26c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26c4:	88 23       	and	r24, r24
    26c6:	2c f4       	brge	.+10     	; 0x26d2 <LCD_displayCharacter+0x160>
		__ticks = 1;
    26c8:	81 e0       	ldi	r24, 0x01	; 1
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	9a a3       	std	Y+34, r25	; 0x22
    26ce:	89 a3       	std	Y+33, r24	; 0x21
    26d0:	3f c0       	rjmp	.+126    	; 0x2750 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    26d2:	6b a1       	ldd	r22, Y+35	; 0x23
    26d4:	7c a1       	ldd	r23, Y+36	; 0x24
    26d6:	8d a1       	ldd	r24, Y+37	; 0x25
    26d8:	9e a1       	ldd	r25, Y+38	; 0x26
    26da:	20 e0       	ldi	r18, 0x00	; 0
    26dc:	3f ef       	ldi	r19, 0xFF	; 255
    26de:	4f e7       	ldi	r20, 0x7F	; 127
    26e0:	57 e4       	ldi	r21, 0x47	; 71
    26e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26e6:	18 16       	cp	r1, r24
    26e8:	4c f5       	brge	.+82     	; 0x273c <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ea:	6f a1       	ldd	r22, Y+39	; 0x27
    26ec:	78 a5       	ldd	r23, Y+40	; 0x28
    26ee:	89 a5       	ldd	r24, Y+41	; 0x29
    26f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    26f2:	20 e0       	ldi	r18, 0x00	; 0
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	40 e2       	ldi	r20, 0x20	; 32
    26f8:	51 e4       	ldi	r21, 0x41	; 65
    26fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fe:	dc 01       	movw	r26, r24
    2700:	cb 01       	movw	r24, r22
    2702:	bc 01       	movw	r22, r24
    2704:	cd 01       	movw	r24, r26
    2706:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    270a:	dc 01       	movw	r26, r24
    270c:	cb 01       	movw	r24, r22
    270e:	9a a3       	std	Y+34, r25	; 0x22
    2710:	89 a3       	std	Y+33, r24	; 0x21
    2712:	0f c0       	rjmp	.+30     	; 0x2732 <LCD_displayCharacter+0x1c0>
    2714:	88 ec       	ldi	r24, 0xC8	; 200
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	98 a3       	std	Y+32, r25	; 0x20
    271a:	8f 8f       	std	Y+31, r24	; 0x1f
    271c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    271e:	98 a1       	ldd	r25, Y+32	; 0x20
    2720:	01 97       	sbiw	r24, 0x01	; 1
    2722:	f1 f7       	brne	.-4      	; 0x2720 <LCD_displayCharacter+0x1ae>
    2724:	98 a3       	std	Y+32, r25	; 0x20
    2726:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2728:	89 a1       	ldd	r24, Y+33	; 0x21
    272a:	9a a1       	ldd	r25, Y+34	; 0x22
    272c:	01 97       	sbiw	r24, 0x01	; 1
    272e:	9a a3       	std	Y+34, r25	; 0x22
    2730:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2732:	89 a1       	ldd	r24, Y+33	; 0x21
    2734:	9a a1       	ldd	r25, Y+34	; 0x22
    2736:	00 97       	sbiw	r24, 0x00	; 0
    2738:	69 f7       	brne	.-38     	; 0x2714 <LCD_displayCharacter+0x1a2>
    273a:	14 c0       	rjmp	.+40     	; 0x2764 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    273c:	6b a1       	ldd	r22, Y+35	; 0x23
    273e:	7c a1       	ldd	r23, Y+36	; 0x24
    2740:	8d a1       	ldd	r24, Y+37	; 0x25
    2742:	9e a1       	ldd	r25, Y+38	; 0x26
    2744:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2748:	dc 01       	movw	r26, r24
    274a:	cb 01       	movw	r24, r22
    274c:	9a a3       	std	Y+34, r25	; 0x22
    274e:	89 a3       	std	Y+33, r24	; 0x21
    2750:	89 a1       	ldd	r24, Y+33	; 0x21
    2752:	9a a1       	ldd	r25, Y+34	; 0x22
    2754:	9e 8f       	std	Y+30, r25	; 0x1e
    2756:	8d 8f       	std	Y+29, r24	; 0x1d
    2758:	8d 8d       	ldd	r24, Y+29	; 0x1d
    275a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    275c:	01 97       	sbiw	r24, 0x01	; 1
    275e:	f1 f7       	brne	.-4      	; 0x275c <LCD_displayCharacter+0x1ea>
    2760:	9e 8f       	std	Y+30, r25	; 0x1e
    2762:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2764:	82 e0       	ldi	r24, 0x02	; 2
    2766:	69 ad       	ldd	r22, Y+57	; 0x39
    2768:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <GPIO_writePort>
    276c:	80 e0       	ldi	r24, 0x00	; 0
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	a0 e8       	ldi	r26, 0x80	; 128
    2772:	bf e3       	ldi	r27, 0x3F	; 63
    2774:	89 8f       	std	Y+25, r24	; 0x19
    2776:	9a 8f       	std	Y+26, r25	; 0x1a
    2778:	ab 8f       	std	Y+27, r26	; 0x1b
    277a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    277c:	69 8d       	ldd	r22, Y+25	; 0x19
    277e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2780:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2782:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	4a ef       	ldi	r20, 0xFA	; 250
    278a:	54 e4       	ldi	r21, 0x44	; 68
    278c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2790:	dc 01       	movw	r26, r24
    2792:	cb 01       	movw	r24, r22
    2794:	8d 8b       	std	Y+21, r24	; 0x15
    2796:	9e 8b       	std	Y+22, r25	; 0x16
    2798:	af 8b       	std	Y+23, r26	; 0x17
    279a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    279c:	6d 89       	ldd	r22, Y+21	; 0x15
    279e:	7e 89       	ldd	r23, Y+22	; 0x16
    27a0:	8f 89       	ldd	r24, Y+23	; 0x17
    27a2:	98 8d       	ldd	r25, Y+24	; 0x18
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	40 e8       	ldi	r20, 0x80	; 128
    27aa:	5f e3       	ldi	r21, 0x3F	; 63
    27ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27b0:	88 23       	and	r24, r24
    27b2:	2c f4       	brge	.+10     	; 0x27be <LCD_displayCharacter+0x24c>
		__ticks = 1;
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	9c 8b       	std	Y+20, r25	; 0x14
    27ba:	8b 8b       	std	Y+19, r24	; 0x13
    27bc:	3f c0       	rjmp	.+126    	; 0x283c <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    27be:	6d 89       	ldd	r22, Y+21	; 0x15
    27c0:	7e 89       	ldd	r23, Y+22	; 0x16
    27c2:	8f 89       	ldd	r24, Y+23	; 0x17
    27c4:	98 8d       	ldd	r25, Y+24	; 0x18
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	3f ef       	ldi	r19, 0xFF	; 255
    27ca:	4f e7       	ldi	r20, 0x7F	; 127
    27cc:	57 e4       	ldi	r21, 0x47	; 71
    27ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27d2:	18 16       	cp	r1, r24
    27d4:	4c f5       	brge	.+82     	; 0x2828 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d6:	69 8d       	ldd	r22, Y+25	; 0x19
    27d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	40 e2       	ldi	r20, 0x20	; 32
    27e4:	51 e4       	ldi	r21, 0x41	; 65
    27e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	bc 01       	movw	r22, r24
    27f0:	cd 01       	movw	r24, r26
    27f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	9c 8b       	std	Y+20, r25	; 0x14
    27fc:	8b 8b       	std	Y+19, r24	; 0x13
    27fe:	0f c0       	rjmp	.+30     	; 0x281e <LCD_displayCharacter+0x2ac>
    2800:	88 ec       	ldi	r24, 0xC8	; 200
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	9a 8b       	std	Y+18, r25	; 0x12
    2806:	89 8b       	std	Y+17, r24	; 0x11
    2808:	89 89       	ldd	r24, Y+17	; 0x11
    280a:	9a 89       	ldd	r25, Y+18	; 0x12
    280c:	01 97       	sbiw	r24, 0x01	; 1
    280e:	f1 f7       	brne	.-4      	; 0x280c <LCD_displayCharacter+0x29a>
    2810:	9a 8b       	std	Y+18, r25	; 0x12
    2812:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2814:	8b 89       	ldd	r24, Y+19	; 0x13
    2816:	9c 89       	ldd	r25, Y+20	; 0x14
    2818:	01 97       	sbiw	r24, 0x01	; 1
    281a:	9c 8b       	std	Y+20, r25	; 0x14
    281c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281e:	8b 89       	ldd	r24, Y+19	; 0x13
    2820:	9c 89       	ldd	r25, Y+20	; 0x14
    2822:	00 97       	sbiw	r24, 0x00	; 0
    2824:	69 f7       	brne	.-38     	; 0x2800 <LCD_displayCharacter+0x28e>
    2826:	14 c0       	rjmp	.+40     	; 0x2850 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2828:	6d 89       	ldd	r22, Y+21	; 0x15
    282a:	7e 89       	ldd	r23, Y+22	; 0x16
    282c:	8f 89       	ldd	r24, Y+23	; 0x17
    282e:	98 8d       	ldd	r25, Y+24	; 0x18
    2830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	9c 8b       	std	Y+20, r25	; 0x14
    283a:	8b 8b       	std	Y+19, r24	; 0x13
    283c:	8b 89       	ldd	r24, Y+19	; 0x13
    283e:	9c 89       	ldd	r25, Y+20	; 0x14
    2840:	98 8b       	std	Y+16, r25	; 0x10
    2842:	8f 87       	std	Y+15, r24	; 0x0f
    2844:	8f 85       	ldd	r24, Y+15	; 0x0f
    2846:	98 89       	ldd	r25, Y+16	; 0x10
    2848:	01 97       	sbiw	r24, 0x01	; 1
    284a:	f1 f7       	brne	.-4      	; 0x2848 <LCD_displayCharacter+0x2d6>
    284c:	98 8b       	std	Y+16, r25	; 0x10
    284e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2850:	83 e0       	ldi	r24, 0x03	; 3
    2852:	65 e0       	ldi	r22, 0x05	; 5
    2854:	40 e0       	ldi	r20, 0x00	; 0
    2856:	0e 94 af 0c 	call	0x195e	; 0x195e <GPIO_writePin>
    285a:	80 e0       	ldi	r24, 0x00	; 0
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	a0 e8       	ldi	r26, 0x80	; 128
    2860:	bf e3       	ldi	r27, 0x3F	; 63
    2862:	8b 87       	std	Y+11, r24	; 0x0b
    2864:	9c 87       	std	Y+12, r25	; 0x0c
    2866:	ad 87       	std	Y+13, r26	; 0x0d
    2868:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    286a:	6b 85       	ldd	r22, Y+11	; 0x0b
    286c:	7c 85       	ldd	r23, Y+12	; 0x0c
    286e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2870:	9e 85       	ldd	r25, Y+14	; 0x0e
    2872:	20 e0       	ldi	r18, 0x00	; 0
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	4a ef       	ldi	r20, 0xFA	; 250
    2878:	54 e4       	ldi	r21, 0x44	; 68
    287a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287e:	dc 01       	movw	r26, r24
    2880:	cb 01       	movw	r24, r22
    2882:	8f 83       	std	Y+7, r24	; 0x07
    2884:	98 87       	std	Y+8, r25	; 0x08
    2886:	a9 87       	std	Y+9, r26	; 0x09
    2888:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    288a:	6f 81       	ldd	r22, Y+7	; 0x07
    288c:	78 85       	ldd	r23, Y+8	; 0x08
    288e:	89 85       	ldd	r24, Y+9	; 0x09
    2890:	9a 85       	ldd	r25, Y+10	; 0x0a
    2892:	20 e0       	ldi	r18, 0x00	; 0
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	40 e8       	ldi	r20, 0x80	; 128
    2898:	5f e3       	ldi	r21, 0x3F	; 63
    289a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    289e:	88 23       	and	r24, r24
    28a0:	2c f4       	brge	.+10     	; 0x28ac <LCD_displayCharacter+0x33a>
		__ticks = 1;
    28a2:	81 e0       	ldi	r24, 0x01	; 1
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	9e 83       	std	Y+6, r25	; 0x06
    28a8:	8d 83       	std	Y+5, r24	; 0x05
    28aa:	3f c0       	rjmp	.+126    	; 0x292a <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    28ac:	6f 81       	ldd	r22, Y+7	; 0x07
    28ae:	78 85       	ldd	r23, Y+8	; 0x08
    28b0:	89 85       	ldd	r24, Y+9	; 0x09
    28b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	3f ef       	ldi	r19, 0xFF	; 255
    28b8:	4f e7       	ldi	r20, 0x7F	; 127
    28ba:	57 e4       	ldi	r21, 0x47	; 71
    28bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28c0:	18 16       	cp	r1, r24
    28c2:	4c f5       	brge	.+82     	; 0x2916 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    28c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    28c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    28cc:	20 e0       	ldi	r18, 0x00	; 0
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	40 e2       	ldi	r20, 0x20	; 32
    28d2:	51 e4       	ldi	r21, 0x41	; 65
    28d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	bc 01       	movw	r22, r24
    28de:	cd 01       	movw	r24, r26
    28e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	9e 83       	std	Y+6, r25	; 0x06
    28ea:	8d 83       	std	Y+5, r24	; 0x05
    28ec:	0f c0       	rjmp	.+30     	; 0x290c <LCD_displayCharacter+0x39a>
    28ee:	88 ec       	ldi	r24, 0xC8	; 200
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	9c 83       	std	Y+4, r25	; 0x04
    28f4:	8b 83       	std	Y+3, r24	; 0x03
    28f6:	8b 81       	ldd	r24, Y+3	; 0x03
    28f8:	9c 81       	ldd	r25, Y+4	; 0x04
    28fa:	01 97       	sbiw	r24, 0x01	; 1
    28fc:	f1 f7       	brne	.-4      	; 0x28fa <LCD_displayCharacter+0x388>
    28fe:	9c 83       	std	Y+4, r25	; 0x04
    2900:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2902:	8d 81       	ldd	r24, Y+5	; 0x05
    2904:	9e 81       	ldd	r25, Y+6	; 0x06
    2906:	01 97       	sbiw	r24, 0x01	; 1
    2908:	9e 83       	std	Y+6, r25	; 0x06
    290a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    290c:	8d 81       	ldd	r24, Y+5	; 0x05
    290e:	9e 81       	ldd	r25, Y+6	; 0x06
    2910:	00 97       	sbiw	r24, 0x00	; 0
    2912:	69 f7       	brne	.-38     	; 0x28ee <LCD_displayCharacter+0x37c>
    2914:	14 c0       	rjmp	.+40     	; 0x293e <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2916:	6f 81       	ldd	r22, Y+7	; 0x07
    2918:	78 85       	ldd	r23, Y+8	; 0x08
    291a:	89 85       	ldd	r24, Y+9	; 0x09
    291c:	9a 85       	ldd	r25, Y+10	; 0x0a
    291e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2922:	dc 01       	movw	r26, r24
    2924:	cb 01       	movw	r24, r22
    2926:	9e 83       	std	Y+6, r25	; 0x06
    2928:	8d 83       	std	Y+5, r24	; 0x05
    292a:	8d 81       	ldd	r24, Y+5	; 0x05
    292c:	9e 81       	ldd	r25, Y+6	; 0x06
    292e:	9a 83       	std	Y+2, r25	; 0x02
    2930:	89 83       	std	Y+1, r24	; 0x01
    2932:	89 81       	ldd	r24, Y+1	; 0x01
    2934:	9a 81       	ldd	r25, Y+2	; 0x02
    2936:	01 97       	sbiw	r24, 0x01	; 1
    2938:	f1 f7       	brne	.-4      	; 0x2936 <LCD_displayCharacter+0x3c4>
    293a:	9a 83       	std	Y+2, r25	; 0x02
    293c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    293e:	e9 96       	adiw	r28, 0x39	; 57
    2940:	0f b6       	in	r0, 0x3f	; 63
    2942:	f8 94       	cli
    2944:	de bf       	out	0x3e, r29	; 62
    2946:	0f be       	out	0x3f, r0	; 63
    2948:	cd bf       	out	0x3d, r28	; 61
    294a:	cf 91       	pop	r28
    294c:	df 91       	pop	r29
    294e:	08 95       	ret

00002950 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2950:	df 93       	push	r29
    2952:	cf 93       	push	r28
    2954:	00 d0       	rcall	.+0      	; 0x2956 <LCD_displayString+0x6>
    2956:	0f 92       	push	r0
    2958:	cd b7       	in	r28, 0x3d	; 61
    295a:	de b7       	in	r29, 0x3e	; 62
    295c:	9b 83       	std	Y+3, r25	; 0x03
    295e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2960:	19 82       	std	Y+1, r1	; 0x01
    2962:	0e c0       	rjmp	.+28     	; 0x2980 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2964:	89 81       	ldd	r24, Y+1	; 0x01
    2966:	28 2f       	mov	r18, r24
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	8a 81       	ldd	r24, Y+2	; 0x02
    296c:	9b 81       	ldd	r25, Y+3	; 0x03
    296e:	fc 01       	movw	r30, r24
    2970:	e2 0f       	add	r30, r18
    2972:	f3 1f       	adc	r31, r19
    2974:	80 81       	ld	r24, Z
    2976:	0e 94 b9 12 	call	0x2572	; 0x2572 <LCD_displayCharacter>
		i++;
    297a:	89 81       	ldd	r24, Y+1	; 0x01
    297c:	8f 5f       	subi	r24, 0xFF	; 255
    297e:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2980:	89 81       	ldd	r24, Y+1	; 0x01
    2982:	28 2f       	mov	r18, r24
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	8a 81       	ldd	r24, Y+2	; 0x02
    2988:	9b 81       	ldd	r25, Y+3	; 0x03
    298a:	fc 01       	movw	r30, r24
    298c:	e2 0f       	add	r30, r18
    298e:	f3 1f       	adc	r31, r19
    2990:	80 81       	ld	r24, Z
    2992:	88 23       	and	r24, r24
    2994:	39 f7       	brne	.-50     	; 0x2964 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2996:	0f 90       	pop	r0
    2998:	0f 90       	pop	r0
    299a:	0f 90       	pop	r0
    299c:	cf 91       	pop	r28
    299e:	df 91       	pop	r29
    29a0:	08 95       	ret

000029a2 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    29a2:	df 93       	push	r29
    29a4:	cf 93       	push	r28
    29a6:	00 d0       	rcall	.+0      	; 0x29a8 <LCD_moveCursor+0x6>
    29a8:	00 d0       	rcall	.+0      	; 0x29aa <LCD_moveCursor+0x8>
    29aa:	0f 92       	push	r0
    29ac:	cd b7       	in	r28, 0x3d	; 61
    29ae:	de b7       	in	r29, 0x3e	; 62
    29b0:	8a 83       	std	Y+2, r24	; 0x02
    29b2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    29b4:	8a 81       	ldd	r24, Y+2	; 0x02
    29b6:	28 2f       	mov	r18, r24
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	3d 83       	std	Y+5, r19	; 0x05
    29bc:	2c 83       	std	Y+4, r18	; 0x04
    29be:	8c 81       	ldd	r24, Y+4	; 0x04
    29c0:	9d 81       	ldd	r25, Y+5	; 0x05
    29c2:	81 30       	cpi	r24, 0x01	; 1
    29c4:	91 05       	cpc	r25, r1
    29c6:	c1 f0       	breq	.+48     	; 0x29f8 <LCD_moveCursor+0x56>
    29c8:	2c 81       	ldd	r18, Y+4	; 0x04
    29ca:	3d 81       	ldd	r19, Y+5	; 0x05
    29cc:	22 30       	cpi	r18, 0x02	; 2
    29ce:	31 05       	cpc	r19, r1
    29d0:	2c f4       	brge	.+10     	; 0x29dc <LCD_moveCursor+0x3a>
    29d2:	8c 81       	ldd	r24, Y+4	; 0x04
    29d4:	9d 81       	ldd	r25, Y+5	; 0x05
    29d6:	00 97       	sbiw	r24, 0x00	; 0
    29d8:	61 f0       	breq	.+24     	; 0x29f2 <LCD_moveCursor+0x50>
    29da:	19 c0       	rjmp	.+50     	; 0x2a0e <LCD_moveCursor+0x6c>
    29dc:	2c 81       	ldd	r18, Y+4	; 0x04
    29de:	3d 81       	ldd	r19, Y+5	; 0x05
    29e0:	22 30       	cpi	r18, 0x02	; 2
    29e2:	31 05       	cpc	r19, r1
    29e4:	69 f0       	breq	.+26     	; 0x2a00 <LCD_moveCursor+0x5e>
    29e6:	8c 81       	ldd	r24, Y+4	; 0x04
    29e8:	9d 81       	ldd	r25, Y+5	; 0x05
    29ea:	83 30       	cpi	r24, 0x03	; 3
    29ec:	91 05       	cpc	r25, r1
    29ee:	61 f0       	breq	.+24     	; 0x2a08 <LCD_moveCursor+0x66>
    29f0:	0e c0       	rjmp	.+28     	; 0x2a0e <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    29f2:	8b 81       	ldd	r24, Y+3	; 0x03
    29f4:	89 83       	std	Y+1, r24	; 0x01
    29f6:	0b c0       	rjmp	.+22     	; 0x2a0e <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    29f8:	8b 81       	ldd	r24, Y+3	; 0x03
    29fa:	80 5c       	subi	r24, 0xC0	; 192
    29fc:	89 83       	std	Y+1, r24	; 0x01
    29fe:	07 c0       	rjmp	.+14     	; 0x2a0e <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2a00:	8b 81       	ldd	r24, Y+3	; 0x03
    2a02:	80 5f       	subi	r24, 0xF0	; 240
    2a04:	89 83       	std	Y+1, r24	; 0x01
    2a06:	03 c0       	rjmp	.+6      	; 0x2a0e <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2a08:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0a:	80 5b       	subi	r24, 0xB0	; 176
    2a0c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2a0e:	89 81       	ldd	r24, Y+1	; 0x01
    2a10:	80 68       	ori	r24, 0x80	; 128
    2a12:	0e 94 ca 10 	call	0x2194	; 0x2194 <LCD_sendCommand>
}
    2a16:	0f 90       	pop	r0
    2a18:	0f 90       	pop	r0
    2a1a:	0f 90       	pop	r0
    2a1c:	0f 90       	pop	r0
    2a1e:	0f 90       	pop	r0
    2a20:	cf 91       	pop	r28
    2a22:	df 91       	pop	r29
    2a24:	08 95       	ret

00002a26 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2a26:	df 93       	push	r29
    2a28:	cf 93       	push	r28
    2a2a:	00 d0       	rcall	.+0      	; 0x2a2c <LCD_displayStringRowColumn+0x6>
    2a2c:	00 d0       	rcall	.+0      	; 0x2a2e <LCD_displayStringRowColumn+0x8>
    2a2e:	cd b7       	in	r28, 0x3d	; 61
    2a30:	de b7       	in	r29, 0x3e	; 62
    2a32:	89 83       	std	Y+1, r24	; 0x01
    2a34:	6a 83       	std	Y+2, r22	; 0x02
    2a36:	5c 83       	std	Y+4, r21	; 0x04
    2a38:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2a3a:	89 81       	ldd	r24, Y+1	; 0x01
    2a3c:	6a 81       	ldd	r22, Y+2	; 0x02
    2a3e:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2a42:	8b 81       	ldd	r24, Y+3	; 0x03
    2a44:	9c 81       	ldd	r25, Y+4	; 0x04
    2a46:	0e 94 a8 14 	call	0x2950	; 0x2950 <LCD_displayString>
}
    2a4a:	0f 90       	pop	r0
    2a4c:	0f 90       	pop	r0
    2a4e:	0f 90       	pop	r0
    2a50:	0f 90       	pop	r0
    2a52:	cf 91       	pop	r28
    2a54:	df 91       	pop	r29
    2a56:	08 95       	ret

00002a58 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2a58:	df 93       	push	r29
    2a5a:	cf 93       	push	r28
    2a5c:	cd b7       	in	r28, 0x3d	; 61
    2a5e:	de b7       	in	r29, 0x3e	; 62
    2a60:	62 97       	sbiw	r28, 0x12	; 18
    2a62:	0f b6       	in	r0, 0x3f	; 63
    2a64:	f8 94       	cli
    2a66:	de bf       	out	0x3e, r29	; 62
    2a68:	0f be       	out	0x3f, r0	; 63
    2a6a:	cd bf       	out	0x3d, r28	; 61
    2a6c:	9a 8b       	std	Y+18, r25	; 0x12
    2a6e:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2a70:	89 89       	ldd	r24, Y+17	; 0x11
    2a72:	9a 89       	ldd	r25, Y+18	; 0x12
    2a74:	9e 01       	movw	r18, r28
    2a76:	2f 5f       	subi	r18, 0xFF	; 255
    2a78:	3f 4f       	sbci	r19, 0xFF	; 255
    2a7a:	b9 01       	movw	r22, r18
    2a7c:	4a e0       	ldi	r20, 0x0A	; 10
    2a7e:	50 e0       	ldi	r21, 0x00	; 0
    2a80:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <itoa>
   LCD_displayString(buff); /* Display the string */
    2a84:	ce 01       	movw	r24, r28
    2a86:	01 96       	adiw	r24, 0x01	; 1
    2a88:	0e 94 a8 14 	call	0x2950	; 0x2950 <LCD_displayString>
}
    2a8c:	62 96       	adiw	r28, 0x12	; 18
    2a8e:	0f b6       	in	r0, 0x3f	; 63
    2a90:	f8 94       	cli
    2a92:	de bf       	out	0x3e, r29	; 62
    2a94:	0f be       	out	0x3f, r0	; 63
    2a96:	cd bf       	out	0x3d, r28	; 61
    2a98:	cf 91       	pop	r28
    2a9a:	df 91       	pop	r29
    2a9c:	08 95       	ret

00002a9e <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2a9e:	df 93       	push	r29
    2aa0:	cf 93       	push	r28
    2aa2:	cd b7       	in	r28, 0x3d	; 61
    2aa4:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2aa6:	81 e0       	ldi	r24, 0x01	; 1
    2aa8:	0e 94 ca 10 	call	0x2194	; 0x2194 <LCD_sendCommand>
}
    2aac:	cf 91       	pop	r28
    2aae:	df 91       	pop	r29
    2ab0:	08 95       	ret

00002ab2 <UART_init>:
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */

void UART_init(const UART_ConfigType * Config_Ptr)
{
    2ab2:	df 93       	push	r29
    2ab4:	cf 93       	push	r28
    2ab6:	00 d0       	rcall	.+0      	; 0x2ab8 <UART_init+0x6>
    2ab8:	00 d0       	rcall	.+0      	; 0x2aba <UART_init+0x8>
    2aba:	cd b7       	in	r28, 0x3d	; 61
    2abc:	de b7       	in	r29, 0x3e	; 62
    2abe:	9c 83       	std	Y+4, r25	; 0x04
    2ac0:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2ac2:	1a 82       	std	Y+2, r1	; 0x02
    2ac4:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2ac6:	eb e2       	ldi	r30, 0x2B	; 43
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	82 e0       	ldi	r24, 0x02	; 2
    2acc:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2ace:	ea e2       	ldi	r30, 0x2A	; 42
    2ad0:	f0 e0       	ldi	r31, 0x00	; 0
    2ad2:	88 e1       	ldi	r24, 0x18	; 24
    2ad4:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC |= (1<<URSEL);
    2ad6:	a0 e4       	ldi	r26, 0x40	; 64
    2ad8:	b0 e0       	ldi	r27, 0x00	; 0
    2ada:	e0 e4       	ldi	r30, 0x40	; 64
    2adc:	f0 e0       	ldi	r31, 0x00	; 0
    2ade:	80 81       	ld	r24, Z
    2ae0:	80 68       	ori	r24, 0x80	; 128
    2ae2:	8c 93       	st	X, r24
	UCSRC = ( UCSRC & 0xCF ) | ( (Config_Ptr->parity )<<4 );
    2ae4:	a0 e4       	ldi	r26, 0x40	; 64
    2ae6:	b0 e0       	ldi	r27, 0x00	; 0
    2ae8:	e0 e4       	ldi	r30, 0x40	; 64
    2aea:	f0 e0       	ldi	r31, 0x00	; 0
    2aec:	80 81       	ld	r24, Z
    2aee:	28 2f       	mov	r18, r24
    2af0:	2f 7c       	andi	r18, 0xCF	; 207
    2af2:	eb 81       	ldd	r30, Y+3	; 0x03
    2af4:	fc 81       	ldd	r31, Y+4	; 0x04
    2af6:	81 81       	ldd	r24, Z+1	; 0x01
    2af8:	88 2f       	mov	r24, r24
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	82 95       	swap	r24
    2afe:	92 95       	swap	r25
    2b00:	90 7f       	andi	r25, 0xF0	; 240
    2b02:	98 27       	eor	r25, r24
    2b04:	80 7f       	andi	r24, 0xF0	; 240
    2b06:	98 27       	eor	r25, r24
    2b08:	82 2b       	or	r24, r18
    2b0a:	8c 93       	st	X, r24

	UCSRC = ( UCSRC & 0xF7 ) | ( (Config_Ptr->stop_bit )<<3 );
    2b0c:	a0 e4       	ldi	r26, 0x40	; 64
    2b0e:	b0 e0       	ldi	r27, 0x00	; 0
    2b10:	e0 e4       	ldi	r30, 0x40	; 64
    2b12:	f0 e0       	ldi	r31, 0x00	; 0
    2b14:	80 81       	ld	r24, Z
    2b16:	28 2f       	mov	r18, r24
    2b18:	27 7f       	andi	r18, 0xF7	; 247
    2b1a:	eb 81       	ldd	r30, Y+3	; 0x03
    2b1c:	fc 81       	ldd	r31, Y+4	; 0x04
    2b1e:	82 81       	ldd	r24, Z+2	; 0x02
    2b20:	88 2f       	mov	r24, r24
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	88 0f       	add	r24, r24
    2b26:	99 1f       	adc	r25, r25
    2b28:	88 0f       	add	r24, r24
    2b2a:	99 1f       	adc	r25, r25
    2b2c:	88 0f       	add	r24, r24
    2b2e:	99 1f       	adc	r25, r25
    2b30:	82 2b       	or	r24, r18
    2b32:	8c 93       	st	X, r24

	UCSRC = ( UCSRC & 0xF9 ) | ( (Config_Ptr->bit_data )<<3 );
    2b34:	a0 e4       	ldi	r26, 0x40	; 64
    2b36:	b0 e0       	ldi	r27, 0x00	; 0
    2b38:	e0 e4       	ldi	r30, 0x40	; 64
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	80 81       	ld	r24, Z
    2b3e:	28 2f       	mov	r18, r24
    2b40:	29 7f       	andi	r18, 0xF9	; 249
    2b42:	eb 81       	ldd	r30, Y+3	; 0x03
    2b44:	fc 81       	ldd	r31, Y+4	; 0x04
    2b46:	80 81       	ld	r24, Z
    2b48:	88 2f       	mov	r24, r24
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	88 0f       	add	r24, r24
    2b4e:	99 1f       	adc	r25, r25
    2b50:	88 0f       	add	r24, r24
    2b52:	99 1f       	adc	r25, r25
    2b54:	88 0f       	add	r24, r24
    2b56:	99 1f       	adc	r25, r25
    2b58:	82 2b       	or	r24, r18
    2b5a:	8c 93       	st	X, r24



	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    2b5c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b5e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b60:	83 81       	ldd	r24, Z+3	; 0x03
    2b62:	94 81       	ldd	r25, Z+4	; 0x04
    2b64:	a5 81       	ldd	r26, Z+5	; 0x05
    2b66:	b6 81       	ldd	r27, Z+6	; 0x06
    2b68:	88 0f       	add	r24, r24
    2b6a:	99 1f       	adc	r25, r25
    2b6c:	aa 1f       	adc	r26, r26
    2b6e:	bb 1f       	adc	r27, r27
    2b70:	88 0f       	add	r24, r24
    2b72:	99 1f       	adc	r25, r25
    2b74:	aa 1f       	adc	r26, r26
    2b76:	bb 1f       	adc	r27, r27
    2b78:	88 0f       	add	r24, r24
    2b7a:	99 1f       	adc	r25, r25
    2b7c:	aa 1f       	adc	r26, r26
    2b7e:	bb 1f       	adc	r27, r27
    2b80:	9c 01       	movw	r18, r24
    2b82:	ad 01       	movw	r20, r26
    2b84:	80 e0       	ldi	r24, 0x00	; 0
    2b86:	92 e1       	ldi	r25, 0x12	; 18
    2b88:	aa e7       	ldi	r26, 0x7A	; 122
    2b8a:	b0 e0       	ldi	r27, 0x00	; 0
    2b8c:	bc 01       	movw	r22, r24
    2b8e:	cd 01       	movw	r24, r26
    2b90:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <__udivmodsi4>
    2b94:	da 01       	movw	r26, r20
    2b96:	c9 01       	movw	r24, r18
    2b98:	01 97       	sbiw	r24, 0x01	; 1
    2b9a:	9a 83       	std	Y+2, r25	; 0x02
    2b9c:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2b9e:	e0 e4       	ldi	r30, 0x40	; 64
    2ba0:	f0 e0       	ldi	r31, 0x00	; 0
    2ba2:	89 81       	ldd	r24, Y+1	; 0x01
    2ba4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba6:	89 2f       	mov	r24, r25
    2ba8:	99 27       	eor	r25, r25
    2baa:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2bac:	e9 e2       	ldi	r30, 0x29	; 41
    2bae:	f0 e0       	ldi	r31, 0x00	; 0
    2bb0:	89 81       	ldd	r24, Y+1	; 0x01
    2bb2:	80 83       	st	Z, r24
}
    2bb4:	0f 90       	pop	r0
    2bb6:	0f 90       	pop	r0
    2bb8:	0f 90       	pop	r0
    2bba:	0f 90       	pop	r0
    2bbc:	cf 91       	pop	r28
    2bbe:	df 91       	pop	r29
    2bc0:	08 95       	ret

00002bc2 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2bc2:	df 93       	push	r29
    2bc4:	cf 93       	push	r28
    2bc6:	0f 92       	push	r0
    2bc8:	cd b7       	in	r28, 0x3d	; 61
    2bca:	de b7       	in	r29, 0x3e	; 62
    2bcc:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2bce:	eb e2       	ldi	r30, 0x2B	; 43
    2bd0:	f0 e0       	ldi	r31, 0x00	; 0
    2bd2:	80 81       	ld	r24, Z
    2bd4:	88 2f       	mov	r24, r24
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	80 72       	andi	r24, 0x20	; 32
    2bda:	90 70       	andi	r25, 0x00	; 0
    2bdc:	00 97       	sbiw	r24, 0x00	; 0
    2bde:	b9 f3       	breq	.-18     	; 0x2bce <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2be0:	ec e2       	ldi	r30, 0x2C	; 44
    2be2:	f0 e0       	ldi	r31, 0x00	; 0
    2be4:	89 81       	ldd	r24, Y+1	; 0x01
    2be6:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2be8:	0f 90       	pop	r0
    2bea:	cf 91       	pop	r28
    2bec:	df 91       	pop	r29
    2bee:	08 95       	ret

00002bf0 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2bf0:	df 93       	push	r29
    2bf2:	cf 93       	push	r28
    2bf4:	cd b7       	in	r28, 0x3d	; 61
    2bf6:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2bf8:	eb e2       	ldi	r30, 0x2B	; 43
    2bfa:	f0 e0       	ldi	r31, 0x00	; 0
    2bfc:	80 81       	ld	r24, Z
    2bfe:	88 23       	and	r24, r24
    2c00:	dc f7       	brge	.-10     	; 0x2bf8 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    2c02:	ec e2       	ldi	r30, 0x2C	; 44
    2c04:	f0 e0       	ldi	r31, 0x00	; 0
    2c06:	80 81       	ld	r24, Z
}
    2c08:	cf 91       	pop	r28
    2c0a:	df 91       	pop	r29
    2c0c:	08 95       	ret

00002c0e <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2c0e:	df 93       	push	r29
    2c10:	cf 93       	push	r28
    2c12:	00 d0       	rcall	.+0      	; 0x2c14 <UART_sendString+0x6>
    2c14:	0f 92       	push	r0
    2c16:	cd b7       	in	r28, 0x3d	; 61
    2c18:	de b7       	in	r29, 0x3e	; 62
    2c1a:	9b 83       	std	Y+3, r25	; 0x03
    2c1c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c1e:	19 82       	std	Y+1, r1	; 0x01
    2c20:	0e c0       	rjmp	.+28     	; 0x2c3e <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2c22:	89 81       	ldd	r24, Y+1	; 0x01
    2c24:	28 2f       	mov	r18, r24
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c2c:	fc 01       	movw	r30, r24
    2c2e:	e2 0f       	add	r30, r18
    2c30:	f3 1f       	adc	r31, r19
    2c32:	80 81       	ld	r24, Z
    2c34:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <UART_sendByte>
		i++;
    2c38:	89 81       	ldd	r24, Y+1	; 0x01
    2c3a:	8f 5f       	subi	r24, 0xFF	; 255
    2c3c:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2c3e:	89 81       	ldd	r24, Y+1	; 0x01
    2c40:	28 2f       	mov	r18, r24
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	8a 81       	ldd	r24, Y+2	; 0x02
    2c46:	9b 81       	ldd	r25, Y+3	; 0x03
    2c48:	fc 01       	movw	r30, r24
    2c4a:	e2 0f       	add	r30, r18
    2c4c:	f3 1f       	adc	r31, r19
    2c4e:	80 81       	ld	r24, Z
    2c50:	88 23       	and	r24, r24
    2c52:	39 f7       	brne	.-50     	; 0x2c22 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    2c54:	0f 90       	pop	r0
    2c56:	0f 90       	pop	r0
    2c58:	0f 90       	pop	r0
    2c5a:	cf 91       	pop	r28
    2c5c:	df 91       	pop	r29
    2c5e:	08 95       	ret

00002c60 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2c60:	0f 93       	push	r16
    2c62:	1f 93       	push	r17
    2c64:	df 93       	push	r29
    2c66:	cf 93       	push	r28
    2c68:	00 d0       	rcall	.+0      	; 0x2c6a <UART_receiveString+0xa>
    2c6a:	0f 92       	push	r0
    2c6c:	cd b7       	in	r28, 0x3d	; 61
    2c6e:	de b7       	in	r29, 0x3e	; 62
    2c70:	9b 83       	std	Y+3, r25	; 0x03
    2c72:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c74:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2c76:	89 81       	ldd	r24, Y+1	; 0x01
    2c78:	28 2f       	mov	r18, r24
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c80:	8c 01       	movw	r16, r24
    2c82:	02 0f       	add	r16, r18
    2c84:	13 1f       	adc	r17, r19
    2c86:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <UART_recieveByte>
    2c8a:	f8 01       	movw	r30, r16
    2c8c:	80 83       	st	Z, r24
    2c8e:	0f c0       	rjmp	.+30     	; 0x2cae <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2c90:	89 81       	ldd	r24, Y+1	; 0x01
    2c92:	8f 5f       	subi	r24, 0xFF	; 255
    2c94:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2c96:	89 81       	ldd	r24, Y+1	; 0x01
    2c98:	28 2f       	mov	r18, r24
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9e:	9b 81       	ldd	r25, Y+3	; 0x03
    2ca0:	8c 01       	movw	r16, r24
    2ca2:	02 0f       	add	r16, r18
    2ca4:	13 1f       	adc	r17, r19
    2ca6:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <UART_recieveByte>
    2caa:	f8 01       	movw	r30, r16
    2cac:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2cae:	89 81       	ldd	r24, Y+1	; 0x01
    2cb0:	28 2f       	mov	r18, r24
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb6:	9b 81       	ldd	r25, Y+3	; 0x03
    2cb8:	fc 01       	movw	r30, r24
    2cba:	e2 0f       	add	r30, r18
    2cbc:	f3 1f       	adc	r31, r19
    2cbe:	80 81       	ld	r24, Z
    2cc0:	83 32       	cpi	r24, 0x23	; 35
    2cc2:	31 f7       	brne	.-52     	; 0x2c90 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2cc4:	89 81       	ldd	r24, Y+1	; 0x01
    2cc6:	28 2f       	mov	r18, r24
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	8a 81       	ldd	r24, Y+2	; 0x02
    2ccc:	9b 81       	ldd	r25, Y+3	; 0x03
    2cce:	fc 01       	movw	r30, r24
    2cd0:	e2 0f       	add	r30, r18
    2cd2:	f3 1f       	adc	r31, r19
    2cd4:	10 82       	st	Z, r1
}
    2cd6:	0f 90       	pop	r0
    2cd8:	0f 90       	pop	r0
    2cda:	0f 90       	pop	r0
    2cdc:	cf 91       	pop	r28
    2cde:	df 91       	pop	r29
    2ce0:	1f 91       	pop	r17
    2ce2:	0f 91       	pop	r16
    2ce4:	08 95       	ret

00002ce6 <__udivmodsi4>:
    2ce6:	a1 e2       	ldi	r26, 0x21	; 33
    2ce8:	1a 2e       	mov	r1, r26
    2cea:	aa 1b       	sub	r26, r26
    2cec:	bb 1b       	sub	r27, r27
    2cee:	fd 01       	movw	r30, r26
    2cf0:	0d c0       	rjmp	.+26     	; 0x2d0c <__udivmodsi4_ep>

00002cf2 <__udivmodsi4_loop>:
    2cf2:	aa 1f       	adc	r26, r26
    2cf4:	bb 1f       	adc	r27, r27
    2cf6:	ee 1f       	adc	r30, r30
    2cf8:	ff 1f       	adc	r31, r31
    2cfa:	a2 17       	cp	r26, r18
    2cfc:	b3 07       	cpc	r27, r19
    2cfe:	e4 07       	cpc	r30, r20
    2d00:	f5 07       	cpc	r31, r21
    2d02:	20 f0       	brcs	.+8      	; 0x2d0c <__udivmodsi4_ep>
    2d04:	a2 1b       	sub	r26, r18
    2d06:	b3 0b       	sbc	r27, r19
    2d08:	e4 0b       	sbc	r30, r20
    2d0a:	f5 0b       	sbc	r31, r21

00002d0c <__udivmodsi4_ep>:
    2d0c:	66 1f       	adc	r22, r22
    2d0e:	77 1f       	adc	r23, r23
    2d10:	88 1f       	adc	r24, r24
    2d12:	99 1f       	adc	r25, r25
    2d14:	1a 94       	dec	r1
    2d16:	69 f7       	brne	.-38     	; 0x2cf2 <__udivmodsi4_loop>
    2d18:	60 95       	com	r22
    2d1a:	70 95       	com	r23
    2d1c:	80 95       	com	r24
    2d1e:	90 95       	com	r25
    2d20:	9b 01       	movw	r18, r22
    2d22:	ac 01       	movw	r20, r24
    2d24:	bd 01       	movw	r22, r26
    2d26:	cf 01       	movw	r24, r30
    2d28:	08 95       	ret

00002d2a <__prologue_saves__>:
    2d2a:	2f 92       	push	r2
    2d2c:	3f 92       	push	r3
    2d2e:	4f 92       	push	r4
    2d30:	5f 92       	push	r5
    2d32:	6f 92       	push	r6
    2d34:	7f 92       	push	r7
    2d36:	8f 92       	push	r8
    2d38:	9f 92       	push	r9
    2d3a:	af 92       	push	r10
    2d3c:	bf 92       	push	r11
    2d3e:	cf 92       	push	r12
    2d40:	df 92       	push	r13
    2d42:	ef 92       	push	r14
    2d44:	ff 92       	push	r15
    2d46:	0f 93       	push	r16
    2d48:	1f 93       	push	r17
    2d4a:	cf 93       	push	r28
    2d4c:	df 93       	push	r29
    2d4e:	cd b7       	in	r28, 0x3d	; 61
    2d50:	de b7       	in	r29, 0x3e	; 62
    2d52:	ca 1b       	sub	r28, r26
    2d54:	db 0b       	sbc	r29, r27
    2d56:	0f b6       	in	r0, 0x3f	; 63
    2d58:	f8 94       	cli
    2d5a:	de bf       	out	0x3e, r29	; 62
    2d5c:	0f be       	out	0x3f, r0	; 63
    2d5e:	cd bf       	out	0x3d, r28	; 61
    2d60:	09 94       	ijmp

00002d62 <__epilogue_restores__>:
    2d62:	2a 88       	ldd	r2, Y+18	; 0x12
    2d64:	39 88       	ldd	r3, Y+17	; 0x11
    2d66:	48 88       	ldd	r4, Y+16	; 0x10
    2d68:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d6a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d6c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d6e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d70:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d72:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d74:	b9 84       	ldd	r11, Y+9	; 0x09
    2d76:	c8 84       	ldd	r12, Y+8	; 0x08
    2d78:	df 80       	ldd	r13, Y+7	; 0x07
    2d7a:	ee 80       	ldd	r14, Y+6	; 0x06
    2d7c:	fd 80       	ldd	r15, Y+5	; 0x05
    2d7e:	0c 81       	ldd	r16, Y+4	; 0x04
    2d80:	1b 81       	ldd	r17, Y+3	; 0x03
    2d82:	aa 81       	ldd	r26, Y+2	; 0x02
    2d84:	b9 81       	ldd	r27, Y+1	; 0x01
    2d86:	ce 0f       	add	r28, r30
    2d88:	d1 1d       	adc	r29, r1
    2d8a:	0f b6       	in	r0, 0x3f	; 63
    2d8c:	f8 94       	cli
    2d8e:	de bf       	out	0x3e, r29	; 62
    2d90:	0f be       	out	0x3f, r0	; 63
    2d92:	cd bf       	out	0x3d, r28	; 61
    2d94:	ed 01       	movw	r28, r26
    2d96:	08 95       	ret

00002d98 <itoa>:
    2d98:	fb 01       	movw	r30, r22
    2d9a:	9f 01       	movw	r18, r30
    2d9c:	e8 94       	clt
    2d9e:	42 30       	cpi	r20, 0x02	; 2
    2da0:	c4 f0       	brlt	.+48     	; 0x2dd2 <itoa+0x3a>
    2da2:	45 32       	cpi	r20, 0x25	; 37
    2da4:	b4 f4       	brge	.+44     	; 0x2dd2 <itoa+0x3a>
    2da6:	4a 30       	cpi	r20, 0x0A	; 10
    2da8:	29 f4       	brne	.+10     	; 0x2db4 <itoa+0x1c>
    2daa:	97 fb       	bst	r25, 7
    2dac:	1e f4       	brtc	.+6      	; 0x2db4 <itoa+0x1c>
    2dae:	90 95       	com	r25
    2db0:	81 95       	neg	r24
    2db2:	9f 4f       	sbci	r25, 0xFF	; 255
    2db4:	64 2f       	mov	r22, r20
    2db6:	77 27       	eor	r23, r23
    2db8:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <__udivmodhi4>
    2dbc:	80 5d       	subi	r24, 0xD0	; 208
    2dbe:	8a 33       	cpi	r24, 0x3A	; 58
    2dc0:	0c f0       	brlt	.+2      	; 0x2dc4 <itoa+0x2c>
    2dc2:	89 5d       	subi	r24, 0xD9	; 217
    2dc4:	81 93       	st	Z+, r24
    2dc6:	cb 01       	movw	r24, r22
    2dc8:	00 97       	sbiw	r24, 0x00	; 0
    2dca:	a1 f7       	brne	.-24     	; 0x2db4 <itoa+0x1c>
    2dcc:	16 f4       	brtc	.+4      	; 0x2dd2 <itoa+0x3a>
    2dce:	5d e2       	ldi	r21, 0x2D	; 45
    2dd0:	51 93       	st	Z+, r21
    2dd2:	10 82       	st	Z, r1
    2dd4:	c9 01       	movw	r24, r18
    2dd6:	0c 94 ed 16 	jmp	0x2dda	; 0x2dda <strrev>

00002dda <strrev>:
    2dda:	dc 01       	movw	r26, r24
    2ddc:	fc 01       	movw	r30, r24
    2dde:	67 2f       	mov	r22, r23
    2de0:	71 91       	ld	r23, Z+
    2de2:	77 23       	and	r23, r23
    2de4:	e1 f7       	brne	.-8      	; 0x2dde <strrev+0x4>
    2de6:	32 97       	sbiw	r30, 0x02	; 2
    2de8:	04 c0       	rjmp	.+8      	; 0x2df2 <strrev+0x18>
    2dea:	7c 91       	ld	r23, X
    2dec:	6d 93       	st	X+, r22
    2dee:	70 83       	st	Z, r23
    2df0:	62 91       	ld	r22, -Z
    2df2:	ae 17       	cp	r26, r30
    2df4:	bf 07       	cpc	r27, r31
    2df6:	c8 f3       	brcs	.-14     	; 0x2dea <strrev+0x10>
    2df8:	08 95       	ret

00002dfa <__udivmodhi4>:
    2dfa:	aa 1b       	sub	r26, r26
    2dfc:	bb 1b       	sub	r27, r27
    2dfe:	51 e1       	ldi	r21, 0x11	; 17
    2e00:	07 c0       	rjmp	.+14     	; 0x2e10 <__udivmodhi4_ep>

00002e02 <__udivmodhi4_loop>:
    2e02:	aa 1f       	adc	r26, r26
    2e04:	bb 1f       	adc	r27, r27
    2e06:	a6 17       	cp	r26, r22
    2e08:	b7 07       	cpc	r27, r23
    2e0a:	10 f0       	brcs	.+4      	; 0x2e10 <__udivmodhi4_ep>
    2e0c:	a6 1b       	sub	r26, r22
    2e0e:	b7 0b       	sbc	r27, r23

00002e10 <__udivmodhi4_ep>:
    2e10:	88 1f       	adc	r24, r24
    2e12:	99 1f       	adc	r25, r25
    2e14:	5a 95       	dec	r21
    2e16:	a9 f7       	brne	.-22     	; 0x2e02 <__udivmodhi4_loop>
    2e18:	80 95       	com	r24
    2e1a:	90 95       	com	r25
    2e1c:	bc 01       	movw	r22, r24
    2e1e:	cd 01       	movw	r24, r26
    2e20:	08 95       	ret

00002e22 <_exit>:
    2e22:	f8 94       	cli

00002e24 <__stop_program>:
    2e24:	ff cf       	rjmp	.-2      	; 0x2e24 <__stop_program>
